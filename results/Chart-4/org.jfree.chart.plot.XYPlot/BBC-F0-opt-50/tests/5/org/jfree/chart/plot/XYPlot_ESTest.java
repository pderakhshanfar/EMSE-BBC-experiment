/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:09:49 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.IllegalComponentStateException;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.PixelGrabber;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.TransferHandler;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTabbedPaneUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.Segment;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator;
import org.jfree.chart.labels.IntervalXYItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.ObjectList;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer((-3459.214905162));
      stackedXYBarRenderer0.findRangeBounds((XYDataset) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("Empty list not permitted.", (Range) null);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, stackedXYBarRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(">I#Pj(U?Fk0`W", combinedDomainXYPlot0);
      Week week0 = new Week(15, 1397);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null, week0, week0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainAxisEdge(10);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 91, 76, 463, 3527, 553, true, false, true, true, true, true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getItemStroke(91, (-2588), true);
      RingPlot ringPlot0 = new RingPlot();
      Rectangle2D rectangle2D0 = ringPlot0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, 553, 0.0, 10);
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, (-2604.753445004), basicStroke0, (Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.39240928132E12) <= upper (1.392409281319E12).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(196.70651106189393, 196.70651106189393);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      ModuloAxis moduloAxis0 = new ModuloAxis("XY_Plot", cyclicNumberAxis0.DEFAULT_RANGE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      combinedRangeXYPlot0.zoomRangeAxes(196.70651106189393, plotRenderingInfo0, (Point2D) point0);
      combinedRangeXYPlot0.zoomRangeAxes(482.9158945083618, plotRenderingInfo0, (Point2D) point2D_Double0, true);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-741), (-2931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(14.0, "$4/S^FIQTp@h");
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedRangeXYPlot2.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0);
      combinedRangeXYPlot0.zoomRangeAxes(4.0, plotRenderingInfo0, (Point2D) point0, true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float(10, 10);
      point2D_Float0.y = (-1391.1449F);
      combinedDomainXYPlot0.panDomainAxes(10, (PlotRenderingInfo) null, point2D_Float0);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(2388, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setWeight((-1));
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot1.DEFAULT_INSETS);
      LogAxis logAxis0 = new LogAxis();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(10, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, (-1120.945986), 0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo2.getRenderingSource();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 1.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.select(generalPath0, (Rectangle2D) rectangle2D_Double0, (RenderingSource) null);
      combinedDomainXYPlot1.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      combinedDomainXYPlot0.clearDomainMarkers(1);
      BufferedImage bufferedImage0 = new BufferedImage(6, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 29;
      CategoryMarker categoryMarker0 = new CategoryMarker(false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(29, (Marker) categoryMarker0, layer0, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.getEntityCollection();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Stack<XYLineAndShapeRenderer> stack0 = new Stack<XYLineAndShapeRenderer>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D0, stack0);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      PeriodAxis periodAxis0 = new PeriodAxis("--> Date=");
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.0, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      xYShapeAnnotation0.clone();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getSeriesCount();
      BasicStroke basicStroke0 = new BasicStroke();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(154.5, (PlotRenderingInfo) null, (Point2D) point2D_Double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      JFreeChart jFreeChart0 = new JFreeChart("J~x6svdmF", combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(500, 3, (double) 500, 100000.0, chartRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.zoomDomainAxes((-3765.87), (PlotRenderingInfo) null, (Point2D) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      statisticalLineAndShapeRenderer0.getErrorIndicatorPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(4130.332, (-1.0));
      point2D_Double0.y = (double) 10;
      point2D_Double0.clone();
      ValueMarker valueMarker0 = new ValueMarker(33.9864713128);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.getDomainGridlineStroke();
      Layer layer1 = Layer.BACKGROUND;
      boolean boolean0 = new Boolean(false);
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot1.DEFAULT_INSETS);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logAxis0, periodAxis0, xYAreaRenderer0);
      combinedRangeXYPlot1.setRangeZeroBaselinePaint(periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot1.setRenderer(10, (XYItemRenderer) xYAreaRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot1.DEFAULT_INSETS);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logAxis0, periodAxis0, xYAreaRenderer0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot1.clone();
      xYPlot0.setDataset(4, (XYDataset) defaultXYZDataset0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(65, 2028, (-3420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -3420
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      JFreeChart jFreeChart0 = new JFreeChart("J~x6svdmF", combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3, (double) 500, 100000.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setFrame((double) 2.0F, (double) 3, 100000.0, (-1540.2650802));
      Rectangle rectangle0 = new Rectangle(defaultCaret0);
      Rectangle rectangle1 = chartPanel0.getBounds(rectangle0);
      combinedDomainXYPlot0.drawBackground(graphics2D0, rectangle1);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, defaultCaret0);
      combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, defaultCaret0, axisSpace0);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.5F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.getDomainGridlineStroke();
      CategoryMarker categoryMarker1 = new CategoryMarker(false);
      combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker1, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      JFreeChart jFreeChart0 = new JFreeChart("J~x6svdmF", combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3, (double) 500, 100000.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle rectangle0 = new Rectangle(defaultCaret0);
      Rectangle rectangle1 = chartPanel0.getBounds(rectangle0);
      combinedDomainXYPlot0.drawBackground(graphics2D0, rectangle1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2987, (double) 10, (double) 1.0F, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-1), color0, color0, color0, color0);
      JTextField jTextField0 = new JTextField("%-", 182);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds((-2704), 2987);
      multiplePiePlot0.createAndAddEntity((Rectangle2D) null, (PlotRenderingInfo) null, (String) null, (String) null);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, (-1), 4, 10, (-4970));
      combinedRangeXYPlot0.drawAnnotations(graphics2D0, rectangle0, (PlotRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes((-2198.6114379585174), (PlotRenderingInfo) null, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, "");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.zoomRangeAxes((double) 0.0F, (PlotRenderingInfo) null, (Point2D) null);
      combinedRangeXYPlot0.zoomRangeAxes((-2198.6114379585174), (PlotRenderingInfo) null, (Point2D) null, false);
      combinedRangeXYPlot1.getRangeAxis(10);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeMarkers(10);
      xYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.clearDomainMarkers();
      combinedRangeXYPlot0.getRenderer(10);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 5.0E7, 10);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10.0, false, standardXYToolTipGenerator0);
      candlestickRenderer0.getSeriesItemLabelPaint((-397));
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.5F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.getDomainGridlineStroke();
      combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}z^{0");
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, logarithmicAxis0, xYAreaRenderer0);
      PeriodAxis periodAxis1 = new PeriodAxis("}z^{0");
      periodAxis1.setTickLabelInsets(combinedRangeXYPlot1.DEFAULT_INSETS);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot2 = new XYPlot(defaultXYZDataset0, logAxis0, periodAxis0, xYAreaRenderer0);
      combinedRangeXYPlot1.setRangeZeroBaselinePaint(periodAxis1.DEFAULT_AXIS_LABEL_PAINT);
      xYPlot1.getOrientation();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis("ecl zA @|j:,$x6*uub");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("ecl zA @|j:,$x6*uub");
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis3D0, logAxis0, categoryStepRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot1.getSeriesCount();
      combinedRangeXYPlot1.clone();
      xYPlot2.setDataset(4, (XYDataset) defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-2671), (ValueAxis) periodAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      LogAxis logAxis0 = new LogAxis("D)Rz7zJV7Y,3Oroi_$");
      xYPlot0.setOutlineVisible(true);
      xYPlot0.setRangeAxis(3, (ValueAxis) logAxis0, true);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      xYPlot0.getDomainGridlineStroke();
      xYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      xYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setNoDataMessage("cn>u)&AoHR");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2163.8562469032), 1.0F, (-1065.390043), 10);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, "");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.zoomRangeAxes((double) 0.0F, (PlotRenderingInfo) null, (Point2D) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes((-2198.6114379585174), (PlotRenderingInfo) null, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      periodAxis0.setLabelToolTip("))$C}Z&l6Siu lQLs");
      combinedRangeXYPlot0.setRangeAxisLocation(232, axisLocation0, true);
      BufferedImage bufferedImage0 = new BufferedImage(10, 3, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      combinedRangeXYPlot1.render(graphics2D0, rectangle2D_Float0, 10, plotRenderingInfo0, categoryCrosshairState0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      LogAxis logAxis0 = new LogAxis("D)Rz7zJV7Y,3Oroi_$");
      xYPlot0.setRangeAxis(3, (ValueAxis) logAxis0, true);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      xYPlot0.getDomainGridlineStroke();
      xYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.clearSelection();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      JViewport jViewport0 = new JViewport();
      combinedRangeXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-2331), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(1704, layer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.getFixedRangeAxisSpace();
      logAxis0.configure();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
      xYPlot0.getLegendItems();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      ValueMarker valueMarker0 = new ValueMarker(10);
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      JSpinner jSpinner0 = new JSpinner();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'axisIndex' argument.", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1011);
      bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1.0F, (double) 1011, 591.0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.drawDomainCrosshair(graphics2D0, rectangle2D0, (PlotOrientation) null, 0.18, numberAxis0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      JSpinner jSpinner0 = new JSpinner();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'axisIndex' argument.", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1011);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1.0F, (double) 1011, 591.0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(15, 500, chartRenderingInfo0);
      bufferedImage1.createGraphics();
      combinedRangeXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 0.5F, numberAxis0, numberAxis0.DEFAULT_TICK_MARK_STROKE, numberAxis0.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Point2D.Double point2D_Double0 = new Point2D.Double(10, 1.0F);
      point2D_Double0.clone();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot0.clearDomainMarkers();
      combinedRangeXYPlot0.getRenderer((-544));
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, false);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(10, 2958);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getItemStroke(10, 200, false);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 72.0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainGridlinePaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.drawZeroDomainBaseline((Graphics2D) null, rectangle2D0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1739);
      combinedDomainXYPlot0.equals(stackedXYAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 3, 781.9, 3.0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}z^{0");
      XYPlot xYPlot1 = null;
      try {
        xYPlot1 = new XYPlot(defaultXYZDataset0, (ValueAxis) null, logarithmicAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(781.9, 6.0, 6.0, 2664.601132541809);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.setDataset(10, (XYDataset) null);
      System.setCurrentTimeMillis(1L);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainAxisEdge(10);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, (Layer) null, false);
      NumberAxis numberAxis0 = new NumberAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.addRangeMarker(2738, (Marker) categoryMarker0, (Layer) null, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LabelBlock labelBlock0 = new LabelBlock(">A^0&M7korR%}~O#", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 500;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-4.0F);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1932, (-271), 1150);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1150
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      defaultCategoryDataset0.addValue((Number) 10, (Comparable) 1.0F, (Comparable) 1.0F);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D rectangle2D0 = chartRenderingInfo0.getChartArea();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 10, layer0);
      combinedRangeXYPlot0.getRangeGridlineStroke();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-276), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(2528.0, (-341.51455530932435));
      point2D_Double0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2528.0, (-2308.8));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.zoomDomainAxes((-2308.8), (-1.0), plotRenderingInfo0, (Point2D) point2D_Double0);
      Layer layer0 = Layer.BACKGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      combinedDomainXYPlot0.zoomDomainAxes(1.0E-7, plotRenderingInfo1, (Point2D) point2D_Double0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers(6);
      combinedDomainXYPlot0.getDomainAxis((-524));
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(xYBlockRenderer0, true);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Stack<ObjectList> stack0 = new Stack<ObjectList>();
      JTree jTree0 = new JTree();
      jTree0.getAnchorSelectionPath();
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.modelToView(10);
      fixedHeightLayoutCache0.getBounds((TreePath) null, (Rectangle) null);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearSelection();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker(10, (Marker) null, layer0, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(0);
      double double0 = 5678.721463041;
      JFreeChart jFreeChart0 = new JFreeChart("w/!4bJi>F", valueAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 56, 10, 10, (-643), 58, false, false, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        chartPanel0.getLocationOnScreen();
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 45;
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(45, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlineStroke(false);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(1.0F, 3, 781.9, 3.0);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, stackedXYAreaRenderer0);
      XYBoxAnnotation xYBoxAnnotation1 = new XYBoxAnnotation(3, 3, 0.0F, 6.0, xYPlot0.DEFAULT_OUTLINE_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      stackedXYAreaRenderer0.addAnnotation((XYAnnotation) xYBoxAnnotation1, layer0);
      xYPlot0.getRangeAxisLocation((-477));
      combinedRangeXYPlot0.setDataset(2, (XYDataset) jDBCXYDataset0);
      System.setCurrentTimeMillis((-1L));
      xYPlot0.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("p2!Bt$F_|P_##F", logAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 1, 10.0, 1.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 300, 1024, 768);
      Rectangle rectangle1 = chartPanel0.getVisibleRect();
      Rectangle2D rectangle2D0 = rectangle1.createIntersection(rectangle0);
      xYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, (-118.4), xYStepRenderer0.DEFAULT_OUTLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      xYPlot0.getRenderer();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      xYPlot0.equals(rectangle2D_Double1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Stack<ObjectList> stack0 = new Stack<ObjectList>();
      JTree jTree0 = new JTree();
      jTree0.getAnchorSelectionPath();
      JEditorPane jEditorPane0 = new JEditorPane();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2631, 10, (double) 1.0F, (-2024.47), chartRenderingInfo0);
      bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-90.627777386046), Double.NaN, 3294.15763075366, 1024);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      rectangle0.createIntersection(rectangle2D_Double0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Double0, 0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(473.2272162015399);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      RingPlot ringPlot0 = new RingPlot();
      Line2D.Float line2D_Float0 = new Line2D.Float(0.0F, 0.0F, 10, 0.0F);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      Rectangle2D rectangle2D1 = ringPlot0.getArcBounds(rectangle2D0, rectangle2D0, 10, 1345.065126956311, 0.65);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      cyclicNumberAxis0.java2DToValue(846.7094587, rectangle2D1, rectangleEdge0);
      combinedDomainXYPlot0.configureDomainAxes();
      System.setCurrentTimeMillis(0);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setAutoRangeStickyZero(false);
      combinedRangeXYPlot0.setDomainAxis(1, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setDomainTickBandPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getRangeCrosshairPaint();
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot1.getDomainAxisLocation();
      combinedRangeXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot2.setRangeAxis((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(2528.0, (-341.51455530932435));
      point2D_Double0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2528.0, (-2308.8));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(2767.982, (PlotRenderingInfo) null, (Point2D) point2D_Double0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("ZPR1~/;{=bvm1P sZ%");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setRangeWithMargins((-2463.3943273), (double) 10);
      combinedRangeXYPlot0.setDomainCrosshairValue(1004.44, false);
      combinedRangeXYPlot0.setRangeGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(6);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot0.clearDomainMarkers();
      combinedRangeXYPlot0.getRenderer(2);
      int int0 = 441;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, true);
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea(10, (-1));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getItemStroke(3, 420, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 0.5F, stroke0, defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Stack<ObjectList> stack0 = new Stack<ObjectList>();
      JTree jTree0 = new JTree();
      jTree0.getAnchorSelectionPath();
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.modelToView(10);
      fixedHeightLayoutCache0.getBounds((TreePath) null, (Rectangle) null);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearSelection();
      combinedDomainXYPlot1.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.getRangeAxisEdge();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) xYAreaRenderer0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = new Rectangle((-130), 3);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createIntersection(rectangle0);
      ArrayList<DefaultWindDataset> arrayList0 = new ArrayList<DefaultWindDataset>();
      combinedRangeXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D0, arrayList0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(2528.0, (-341.51455530932435));
      point2D_Double0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2308.8));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.zoomDomainAxes((-2308.8), (-1.0), plotRenderingInfo0, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) categoryMarker0, layer0, false);
      combinedDomainXYPlot0.equals(categoryMarker0);
      combinedRangeXYPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.clearAnnotations();
      combinedRangeXYPlot1.getLegendItems();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6789, 6789, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Float0, rectangle2D_Float0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.FOREGROUND;
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      JSpinner jSpinner0 = new JSpinner();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 64);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(482.9158945083618, 135.0, 1.0E-8);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      Rectangle2D rectangle2D0 = affineTransformOp0.getBounds2D(bufferedImage0);
      xYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 439.1973, numberAxis0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double(2528.0, (-341.51455530932435));
      point2D_Double0.clone();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2308.8));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.zoomDomainAxes((-2308.8), (-1.0), plotRenderingInfo0, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainAxis(500);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(";Na.ZMIOFt<");
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(500, boxAndWhiskerXYToolTipGenerator0, standardXYZURLGenerator0);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultTableXYDataset0, logarithmicAxis0, logarithmicAxis0, stackedXYAreaRenderer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation(200);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(6789);
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.getEntityCollection();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Stack<XYLineAndShapeRenderer> stack0 = new Stack<XYLineAndShapeRenderer>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedRangeXYPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D0, stack0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearRangeAxes();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 485.6001323801062, 10.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(10, (double) 1.0F, (double) 3);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D1, rectangle2D0, (-950.681967), dateAxis0.DEFAULT_TICK_MARK_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot1.drawRangeMarkers(graphics2D0, rectangle2D0, (-1), layer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" --> ");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getSeriesFillPaint(10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[][][] objectArray0 = new Object[0][7][7];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-996.77096), "mv:)>B{ssG)[:");
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer((-2));
      cyclicNumberAxis0.setLabel("mv:)>B{ssG)[:");
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYStepAreaRenderer0);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      DateFormat dateFormat0 = DateFormat.getDateTimeInstance();
      IntervalXYItemLabelGenerator intervalXYItemLabelGenerator0 = new IntervalXYItemLabelGenerator("v)mL#Gd9yow=6!", numberFormat0, dateFormat0);
      xYStepAreaRenderer0.setSeriesItemLabelGenerator(0, (XYItemLabelGenerator) intervalXYItemLabelGenerator0, true);
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToRangeAxes(1204, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      combinedDomainXYPlot0.getRangeAxisEdge();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      chartRenderingInfo0.getEntityCollection();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo1.getDataArea();
      plotRenderingInfo0.setDataArea(rectangle2D0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      combinedDomainXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.getQuadrantPaint(2);
      combinedRangeXYPlot0.clearAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(4, 10, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(1, (Marker) intervalMarker0, layer0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 10, "");
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainZoomable();
      CategoryMarker categoryMarker1 = new CategoryMarker(0.05);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Double point2D_Double0 = new Point2D.Double((-1364.963471), 829.38139);
      combinedDomainXYPlot0.zoomDomainAxes((double) 0.0F, 482.9158945083618, plotRenderingInfo0, (Point2D) point2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(759, (Marker) categoryMarker1, layer1, false);
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      NumberFormat.getCurrencyInstance();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.setDomainAxis(1, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setDomainTickBandPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getRangeCrosshairPaint();
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot1.getDomainAxisLocation();
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(true);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedRangeXYPlot0, false);
      combinedRangeXYPlot2.rendererChanged(rendererChangeEvent0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2806.8418563117), 1.0);
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      LogAxis logAxis0 = new LogAxis("a;Y >Ty$\u0004|iv#5w");
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((-810.66244875195), "Null 'order' argument.");
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis1;
      CyclicNumberAxis cyclicNumberAxis2 = new CyclicNumberAxis(2664.601132541809, 0.05);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, (Layer) null, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis((-872));
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      valueAxisArray0[2] = valueAxis0;
      valueAxisArray0[3] = null;
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("8");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("Q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(1);
      combinedRangeXYPlot0.getDataset();
      Layer layer0 = Layer.BACKGROUND;
      JFreeChart jFreeChart0 = new JFreeChart("", waferMapRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode("Q", true);
      combinedRangeXYPlot0.indexOf((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot1.getRangeTickBandPaint();
      combinedRangeXYPlot1.isRangeGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}z^{0");
      periodAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Rectangle rectangle0 = new Rectangle(500, 10, 1, 10);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, (-327.424613614), (-1200.1256593535215));
      xYPlot0.zoomRangeAxes((double) 10, (-327.424613614), (PlotRenderingInfo) null, point2D0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      combinedRangeXYPlot0.isRangeZoomable();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(Double.POSITIVE_INFINITY, (-2518.453823104), 10.0, 10.0);
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'marker' argument.", font0, combinedRangeXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-626), 48, 15, 4, 1800, false, false, true, false, false, true, false);
      combinedRangeXYPlot0.select(10.0, (-2518.453823104), (Rectangle2D) rectangle2D_Double0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation(1);
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      combinedRangeXYPlot0.setRangeCrosshairStroke(waferMapRenderer0.DEFAULT_STROKE);
      combinedRangeXYPlot0.getRangeAxis(27);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(0.05);
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      xYBarRenderer0.setSeriesURLGenerator(3345, (XYURLGenerator) timeSeriesURLGenerator0, false);
      combinedRangeXYPlot0.getIndexOf(xYBarRenderer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 10, "");
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainZoomable();
      CategoryMarker categoryMarker1 = new CategoryMarker(0.05);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(759, (Marker) categoryMarker1, layer1, false);
      combinedDomainXYPlot1.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", numberFormat0, (DateFormat) null);
      combinedDomainXYPlot1.setRangeCrosshairLockedOnData(false);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(2147376225, standardXYToolTipGenerator0);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) standardXYItemRenderer0);
      combinedRangeXYPlot0.setRangeCrosshairStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) valueMarker0, layer0, false);
      JSpinner jSpinner0 = new JSpinner();
      xYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setDomainCrosshairPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(10, 10, (-1569.901F), 0.0F);
      Rectangle2D rectangle2D0 = ellipse2D_Float0.getBounds2D();
      xYPlot0.calculateAxisSpace((Graphics2D) null, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearRangeAxes();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 485.6001323801062, 10.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(2);
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.clearRangeMarkers(1);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      Stack<XYLineAnnotation> stack0 = new Stack<XYLineAnnotation>();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, rectangle0, stack0);
      xYPlot0.canSelectByRegion();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = (-1715);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(500, (Marker) null, layer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, stackedXYAreaRenderer0);
      stackedXYAreaRenderer0.setLegendTextFont(574, periodAxis0.DEFAULT_TICK_LABEL_FONT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      valueAxisArray0[4] = (ValueAxis) periodAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("Wm;``]<Kuz*isbrTI`", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(2, 1636.0F, renderingHints0);
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, true, 4, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ComponentColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2586.243105555785), "`<#C");
      cyclicNumberAxis0.setTickLabelFont(periodAxis0.DEFAULT_AXIS_LABEL_FONT);
      Class<Object> class0 = Object.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getDrawingSupplier();
      combinedRangeXYPlot1.setDrawingSupplier((DrawingSupplier) null);
      combinedRangeXYPlot1.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRangeAxis((ValueAxis) periodAxis0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, (Layer) null, false);
      combinedRangeXYPlot0.setDomainPannable(true);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setRangeCrosshairValue((-382.77509790311));
      combinedRangeXYPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("Q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(1);
      combinedRangeXYPlot0.getDataset();
      Layer layer0 = Layer.BACKGROUND;
      JFreeChart jFreeChart0 = new JFreeChart("Q", waferMapRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      combinedRangeXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.setQuadrantPaint(3, cyclicXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[13];
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[12] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot1.setRenderers(xYItemRendererArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.canSelectByPoint();
      combinedRangeXYPlot1.zoomRangeAxes((double) 1.0F, (PlotRenderingInfo) null, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot1.getRangeMarkers(layer0);
      combinedRangeXYPlot1.isRangeZeroBaselineVisible();
      combinedDomainXYPlot0.getDomainAxisLocation();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, cyclicXYItemRenderer0.DEFAULT_OUTLINE_PAINT, cyclicXYItemRenderer0.DEFAULT_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.addDomainMarker((Marker) categoryMarker0);
      combinedDomainXYPlot1.getDomainAxis(57);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.isRangeCrosshairVisible();
      combinedDomainXYPlot0.clone();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisndex' argument.");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Paint paint0 = thermometerPlot0.getValuePaint();
      periodAxis0.setMinorTickMarkPaint(paint0);
      periodAxis0.setMinorTickMarksVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeCrosshairPaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.getQuadrantPaint(0);
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.getIndexOf((XYItemRenderer) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) cyclicXYItemRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.canSelectByPoint();
      combinedRangeXYPlot0.zoomRangeAxes((double) 1.0F, (PlotRenderingInfo) null, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      periodAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot1.setRangeAxisLocation(axisLocation0);
      xYPlot0.getDomainZeroBaselinePaint();
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, periodAxis0, xYAreaRenderer0);
      combinedRangeXYPlot2.setRangeZeroBaselinePaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      xYPlot1.getOrientation();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot2.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.getQuadrantPaint(3);
      combinedRangeXYPlot1.getDomainMinorGridlineStroke();
      combinedRangeXYPlot2.getIndexOf(xYAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(1704, layer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.getFixedRangeAxisSpace();
      logAxis0.configure();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
      xYPlot0.getLegendItems();
      defaultBoxAndWhiskerXYDataset0.getDomainOrder();
      xYPlot0.getDomainAxisLocation((-1268));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(xYStepRenderer0.DEFAULT_PAINT);
      Object object0 = xYPlot0.clone();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(object0, defaultBoxAndWhiskerXYDataset0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      Stack<XYBoxAndWhiskerRenderer> stack0 = new Stack<XYBoxAndWhiskerRenderer>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToDomainAxes((-2146428617), stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 10, "");
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainZoomable();
      CategoryMarker categoryMarker1 = new CategoryMarker(0.05);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(759, (Marker) categoryMarker1, layer1, false);
      combinedDomainXYPlot1.equals(combinedDomainXYPlot0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", numberFormat0, (DateFormat) null);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(2147376225, standardXYToolTipGenerator0);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) standardXYItemRenderer0);
      combinedDomainXYPlot1.clone();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      categoryMarker0.setOutlineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      jList0.indexToLocation(987);
      combinedDomainXYPlot0.zoomDomainAxes(45.0, plotRenderingInfo0, (Point2D) null, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setAxisOffset(dateAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.getRangeAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("wRxW");
      periodAxis0.resizeRange2(180.0, (-1.0));
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(3, (XYItemRenderer) cyclicXYItemRenderer0, true);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0E-8, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0);
      combinedDomainXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot0.setDomainCrosshairPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) null, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      DateAxis dateAxis0 = new DateAxis("Q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.getWeight();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation(Integer.MAX_VALUE, axisLocation0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setLabel("Spider Web Plot");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot0.getRangeAxisIndex(logarithmicAxis0);
      combinedDomainXYPlot0.getSeriesCount();
      PlotRenderingInfo plotRenderingInfo0 = null;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart("Spider Web Plot", logarithmicAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 10, 300, 0, (-447), 2735, 300, false, 6, 300, (-447));
      chartPanel0.getPopupLocation(mouseWheelEvent0);
      // Undeclared exception!
      try { 
        point2D_Double0.setLocation((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Point2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      TimeSeries timeSeries0 = new TimeSeries(true, "TLOFtt`(ug=", "TLOFtt`(ug=");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, dateAxis0, dateAxis0, xYStepRenderer0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, dateAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10, (-2024.47), (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1024, 591.0, (-3892.158873642), (-890.3992882138969));
      rectangle0.createIntersection(rectangle2D_Double0);
      xYPlot0.drawVerticalLine(graphics2D0, rectangle2D_Double0, 41.640392, logAxis0.DEFAULT_AXIS_LINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(4, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.getOrientation();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(cyclicXYItemRenderer0.DEFAULT_SHAPE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, cyclicXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      xYShapeAnnotation0.equals((Object) null);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      combinedRangeXYPlot0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("LRxW");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      GeneralPath generalPath0 = new GeneralPath(arc2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("LRxW", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("LRxW", 1.0F, 10.0);
      xYTextAnnotation0.setRotationAngle(1837.4976610647348);
      xYTextAnnotation0.clone();
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(clusteredXYBarRenderer0, taskSeriesCollection0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(4, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getRosePaint();
      deviationRenderer0.setLegendTextPaint(3, paint0);
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, valueAxis0, valueAxis0, deviationRenderer0);
      xYPlot0.clearRangeMarkers();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      chartRenderingInfo1.getPlotInfo();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(valueAxis0);
      axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, true, true, true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6789);
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      combinedRangeXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      combinedRangeXYPlot0.setRangeCrosshairStroke(waferMapRenderer0.DEFAULT_STROKE);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) periodAxis0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 270.0, "");
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      CategoryMarker categoryMarker0 = new CategoryMarker(3);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker((-454), (Marker) categoryMarker0, layer1, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}z^{0");
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, logarithmicAxis0, xYAreaRenderer0);
      periodAxis0.setTickLabelInsets(logarithmicAxis0.DEFAULT_AXIS_LABEL_INSETS);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot1.setRangeAxisLocation(axisLocation0);
      TimeSeries timeSeries0 = new TimeSeries(0.0F);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      defaultXYZDataset0.setSelectionState(timeSeriesCollection0);
      xYPlot0.getDomainZeroBaselinePaint();
      XYPlot xYPlot2 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, periodAxis0, xYAreaRenderer0);
      xYPlot1.setRangeZeroBaselinePaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      xYPlot2.getOrientation();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis("ecl zA @|j:,$x6*uub");
      combinedRangeXYPlot0.clearDomainMarkers();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, logarithmicAxis0, categoryStepRenderer0);
      categoryPlot0.getRangeZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      xYPlot2.getRangeAxisLocation(3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.lookupSeriesPaint(10);
      combinedDomainXYPlot0.setDomainGridlinePaint(paint0);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.getDomainAxisForDataset(0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.6428571428571429, 20000.0);
      intervalMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      int int0 = 2876;
      combinedDomainXYPlot0.getDomainAxisEdge(2876);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(10.0, 500);
      JFreeChart jFreeChart0 = new JFreeChart("", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      Millisecond millisecond0 = new Millisecond();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.UK;
      PeriodAxis periodAxis1 = new PeriodAxis((String) null, millisecond0, millisecond0, timeZone0, locale0);
      valueAxisArray0[4] = (ValueAxis) periodAxis1;
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GeneralPath generalPath0 = new GeneralPath();
      generalPath0.getCurrentPoint();
      combinedRangeXYPlot1.panDomainAxes(0.05, plotRenderingInfo0, (Point2D) null);
      combinedRangeXYPlot1.setRangeAxis((ValueAxis) periodAxis0);
      combinedRangeXYPlot0.setDomainGridlinePaint(periodAxis1.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(1704, layer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.getFixedRangeAxisSpace();
      logAxis0.configure();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
      xYPlot0.getLegendItems();
      defaultBoxAndWhiskerXYDataset0.getDomainOrder();
      xYPlot0.getDomainAxisLocation(1704);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("p2!Bt$F_|P_##F", logAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 1, 10.0, 1.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1, 300, 1024, 768);
      Rectangle rectangle1 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle1.createIntersection(rectangle0);
      xYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, (-118.4), xYStepRenderer0.DEFAULT_OUTLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      xYPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, true);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(500, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" out of bounds.");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.removeRangeMarker(3041, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(0, axisLocation0, true);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      CompassPlot compassPlot0 = new CompassPlot();
      Paint paint0 = compassPlot0.getRosePaint();
      deviationRenderer0.setLegendTextPaint(3, paint0);
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, valueAxis0, valueAxis0, deviationRenderer0);
      xYPlot0.clearRangeMarkers();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(valueAxis0);
      axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, true, true, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 0, 0, 501, 0, 46, (-1394), true, 1, 10, 79);
      chartPanel0.getPopupLocation(mouseWheelEvent0);
      xYPlot0.zoomRangeAxes((-1279.58776), (double) 10, plotRenderingInfo1, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3, 1.0F, "]<O ;bn*#");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      BasicStroke basicStroke0 = (BasicStroke)XYPlot.DEFAULT_CROSSHAIR_STROKE;
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(basicStroke0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      jList0.indexToLocation(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Q";
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("Q");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(1);
      combinedRangeXYPlot0.getDataset();
      // Undeclared exception!
      combinedRangeXYPlot0.setDomainAxis(2146950957, (ValueAxis) periodAxis0, false);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearRangeAxes();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 485.6001323801062, 10.0, (ChartRenderingInfo) null);
      bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = new AffineTransform(1.0F, (float) 2, 6.0F, 126.0F, 1.0F, (float) 3);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D0, (-950.681967), dateAxis0.DEFAULT_TICK_MARK_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(6);
      combinedRangeXYPlot0.getSeriesCount();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0E-8, 1.0E-8, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(74, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Vector<AxisLocation> vector0 = new Vector<AxisLocation>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-1), vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlineStroke(true);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      simpleHistogramDataset0.clone();
      jDBCXYDataset0.setSelectionState(simpleHistogramDataset0);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, stackedXYAreaRenderer0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-880.5041278714027), 10.0, 10, 0.0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_AXIS_LINE_PAINT, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      stackedXYAreaRenderer0.addAnnotation((XYAnnotation) xYBoxAnnotation0, layer0);
      xYPlot0.getPlotType();
      stackedXYAreaRenderer0.setLegendTextFont(574, periodAxis0.DEFAULT_TICK_LABEL_FONT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Wm;``]<Kuz*isbrTI`", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      int int0 = 81;
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(81, 3, (double) 10, 1862.94678533, (ChartRenderingInfo) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(false);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(500, layer0);
      xYStepRenderer0.setBaseShapesVisible(true);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.getFixedRangeAxisSpace();
      logAxis0.configure();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      BasicStroke basicStroke0 = new BasicStroke();
      xYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      Layer layer0 = Layer.FOREGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainMarkers(95, layer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, false);
      xYPlot0.getLegendItems();
      xYPlot0.getDomainAxisLocation((-312));
      ValueMarker valueMarker0 = new ValueMarker(482.9158945083618, periodAxis0.DEFAULT_TICK_LABEL_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      xYPlot0.addRangeMarker(4689, (Marker) valueMarker0, layer0, false);
      xYPlot0.getDomainAxisCount();
      xYPlot0.getDomainZeroBaselineStroke();
      xYPlot0.clone();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      xYPlot0.indexOf(defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      LogAxis logAxis0 = new LogAxis();
      defaultBoxAndWhiskerXYDataset0.setOutlierCoefficient(2.0);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(true);
      XYPlot xYPlot1 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      JFreeChart jFreeChart0 = new JFreeChart("p2!Bt$F_|P_##F", logAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(64, 6, (-963.0), (double) 500, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      chartPanel0.getVisibleRect();
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = 0;
      intArray0[2] = 10;
      intArray0[3] = 0;
      intArray0[4] = 64;
      intArray0[5] = 724;
      // Undeclared exception!
      try { 
        bufferedImage0.getRGB(10, 10, 1784, 500, intArray0, 6, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("oi(\"D|goL:qAf`O");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(10);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDataset();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-1957), (Layer) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      waferMapRenderer0.equals(categoryAxis3D0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.panRangeAxes(0, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.getDataset((-1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      LogAxis logAxis0 = new LogAxis();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      xYStepRenderer0.clearSeriesPaints(false);
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      xYPlot0.getFixedLegendItems();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(10);
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(true);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      xYPlot0.setDomainAxisLocation(1, axisLocation1, true);
      xYPlot0.getOrientation();
      RectangleInsets rectangleInsets0 = xYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      
      xYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(1.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(6, layer1);
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(1, 6);
      point0.setLocation(3, 2146631133);
      xYPlot0.setQuadrantOrigin(point0);
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      stackedXYAreaRenderer0.setAutoPopulateSeriesOutlineStroke(true);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(true);
      jDBCXYDataset0.setSelectionState(simpleHistogramDataset0);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, periodAxis0, periodAxis0, stackedXYAreaRenderer0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-880.5041278714027), 10.0, 10, 0.0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_AXIS_LINE_PAINT, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      stackedXYAreaRenderer0.addAnnotation((XYAnnotation) xYBoxAnnotation0, layer0);
      stackedXYAreaRenderer0.setLegendTextFont(574, periodAxis0.DEFAULT_TICK_LABEL_FONT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Wm;``]<Kuz*isbrTI`", periodAxis0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, false);
      int int0 = 81;
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(81, 3, (double) 10, 1862.94678533, (ChartRenderingInfo) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.mapDatasetToDomainAxis(1, 2);
      combinedRangeXYPlot1.getDataset(10);
      combinedRangeXYPlot0.getDomainAxisLocation(3916);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      XYSeries xYSeries0 = new XYSeries(10);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      XYDatasetSelectionState xYDatasetSelectionState0 = xYSeriesCollection0.getSelectionState();
      defaultWindDataset0.setSelectionState(xYDatasetSelectionState0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(907, 552.585475759073);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.clearSelection();
      xYPlot0.getDomainAxisLocation(3110);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-1715), (ValueAxis) periodAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'listener' argument.");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisEdge(500);
      combinedRangeXYPlot0.getSeriesCount();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDatasetCount();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder0);
      ValueAxis valueAxis0 = combinedRangeXYPlot1.getRangeAxis(0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot2.setDomainAxisLocation(3, axisLocation0, false);
      combinedRangeXYPlot1.clearRangeMarkers(0);
      combinedRangeXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(1, 6);
      point0.setLocation(3, 2146631133);
      xYPlot0.setQuadrantOrigin(point0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getDomainMarkers(95, layer0);
      AxisSpace axisSpace0 = new AxisSpace();
      xYPlot0.setFixedRangeAxisSpace(axisSpace0, false);
      xYPlot0.getLegendItems();
      xYPlot0.getDomainAxisLocation(95);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.addRangeMarker(95, (Marker) valueMarker0, layer0, false);
      xYPlot0.getDomainAxisCount();
      xYPlot0.getDomainZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clone();
      int int0 = 5544;
      combinedDomainXYPlot0.getRenderer(5544);
      combinedDomainXYPlot0.clearRangeMarkers();
      XYSeries xYSeries0 = new XYSeries(10);
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      int int1 = 48;
      JTable jTable0 = new JTable(48, 2146631133);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      BasicStroke basicStroke0 = new BasicStroke();
      int int0 = 907;
      Point point0 = new Point(907, 907);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      ArrayList<Rectangle2D.Float> arrayList1 = new ArrayList<Rectangle2D.Float>();
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(arrayList1, (Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      combinedRangeXYPlot0.getRangeMarkers(0, (Layer) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)92;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "Index ");
      JToggleButton jToggleButton0 = new JToggleButton(imageIcon0, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jToggleButton0, 10, (-1936L), 961, 1904, 71, 500, true, (-2459), 86, 15);
      Point point0 = mouseWheelEvent0.getPoint();
      JViewport jViewport0 = new JViewport();
      jViewport0.getViewPosition();
      combinedRangeXYPlot0.panDomainAxes(0.05, plotRenderingInfo0, point0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) periodAxis0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      combinedDomainXYPlot0.clearDomainAxes();
      int int0 = (-4700);
      AxisState[] axisStateArray0 = new AxisState[6];
      String string0 = ">40rL4@aE";
      PeriodAxis periodAxis0 = new PeriodAxis(">40rL4@aE");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-4700);
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-4700);
      floatArray0[6] = (float) (-4700);
      floatArray0[7] = (float) 10;
      floatArray0[8] = (float) (-4700);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, (-5010), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      xYPlot0.setRangeAxisLocation(500, (AxisLocation) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 10);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      cyclicNumberAxis0.setTickLabelsVisible(true);
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.clearSelection();
      // Undeclared exception!
      try { 
        xYPlot0.drawBackground((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 552.585475759073);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.clearSelection();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 4.0, cyclicNumberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 6461.437287723867, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(dateAxis0);
      combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.addDomainMarker(23, (Marker) intervalMarker0, layer0, true);
      combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      combinedRangeXYPlot0.isDomainGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      stackedXYAreaRenderer0.setLegendTextFont(1244, dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      xYPlot0.setRangeAxisLocation(4, axisLocation0, true);
      xYPlot0.setNoDataMessage((String) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, (CategoryAxis) null, dateAxis0, categoryStepRenderer0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(categoryStepRenderer0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(0.05);
      combinedRangeXYPlot0.clearDomainMarkers(205);
      combinedRangeXYPlot0.getDataset();
      SystemColor systemColor0 = SystemColor.info;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot(defaultKeyedValuesDataset0);
      Millisecond millisecond0 = new Millisecond();
      piePlot0.getSectionOutlinePaint(millisecond0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      combinedRangeXYPlot0.panRangeAxes(2528.0, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "|Ct|x%Q");
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeAxisLocation();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      chartRenderingInfo0.getEntityCollection();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Stack<XYLineAndShapeRenderer> stack0 = new Stack<XYLineAndShapeRenderer>();
      combinedRangeXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D0, stack0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      Locale locale0 = Locale.ITALIAN;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", numberFormat0, numberFormat0, numberFormat0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10, standardXYZToolTipGenerator0);
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYBarRenderer0;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) xYSplineRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(2.0F);
      stackedXYBarRenderer0.setDataBoundsIncludesVisibleSeriesOnly(true);
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYBarRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, logarithmicAxis0, xYAreaRenderer0);
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      AxisLocation axisLocation0 = combinedRangeXYPlot1.getDomainAxisLocation();
      combinedRangeXYPlot2.setRangeAxisLocation(axisLocation0);
      xYPlot0.getDomainZeroBaselinePaint();
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, periodAxis0, xYAreaRenderer0);
      combinedRangeXYPlot1.setRangeZeroBaselinePaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getOrientation();
      Object object0 = new Object();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0E-8, 591.0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      combinedRangeXYPlot1.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot1.clearAnnotations();
      combinedRangeXYPlot2.clearSelection();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("");
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation((-719), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "";
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(dimension1);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(rectangle0, 0.05, 1728.51, 2);
      rectangle0.height = 0;
      dimension1.setSize(dimension0);
      Point2D point2D0 = arc2D_Double0.getStartPoint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(1189.5704116980496, 0.0, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2379.140823396099) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisSpace axisSpace0 = null;
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.getRenderer(5544);
      combinedDomainXYPlot0.clearRangeMarkers();
      XYSeries xYSeries0 = new XYSeries(10);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      int int0 = (-3822);
      int int1 = 2224;
      boolean boolean0 = true;
      Number[][] numberArray0 = new Number[6][3];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 10;
      // Undeclared exception!
      try { 
        xYSeriesCollection0.getX(10, (-1689));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "|Ct|x%Q");
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainAxisEdge(0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot1.getDatasetCount();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot1.setSeriesRenderingOrder(seriesRenderingOrder0);
      combinedRangeXYPlot0.getRangeAxis(10);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.getSubplots();
      combinedRangeXYPlot0.setRangeCrosshairValue(25.0, true);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      combinedRangeXYPlot0.setQuadrantPaint(0, cyclicXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      byte[] byteArray0 = new byte[0];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "Null 'stroke' argument.");
      JToggleButton jToggleButton0 = new JToggleButton(imageIcon0, false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jToggleButton0, (-1370), 0L, 86, (byte)92, 1, (byte) (-21), false, (-2459), 10, 10);
      mouseWheelEvent0.getPoint();
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      combinedRangeXYPlot0.panDomainAxes(362.0, plotRenderingInfo0, point0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "{0}: ({1}, {2})", "", "");
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, timeSeriesURLGenerator0);
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getRangeMarkers(layer0);
      int int0 = (-380);
      // Undeclared exception!
      try { 
        xYPlot0.setRenderer((-380), (XYItemRenderer) stackedXYAreaRenderer2_0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.setDomainAxis(759, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.clearDomainMarkers(10);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot1.getDataset(10);
      combinedRangeXYPlot1.isRangePannable();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.getRangeMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1139.0363171, 1.0E-8);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker(2642, (Marker) intervalMarker0, layer0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(65535, 10);
      periodAxis0.getRange();
      xYPlot0.getRendererCount();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      xYPlot0.setDomainGridlinePaint(systemColor0);
      combinedRangeXYPlot0.getRangeTickBandPaint();
      xYPlot0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      numberAxis3D0.removeChangeListener(combinedRangeXYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getRangeAxisEdge(10);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      combinedDomainXYPlot0.getIndexOf(xYLineAndShapeRenderer0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(65535, 10);
      periodAxis0.getRange();
      xYPlot0.getRendererCount();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      xYPlot0.setDomainGridlinePaint(systemColor0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("}z^{0");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(periodAxis0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      XYPlot xYPlot0 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, logarithmicAxis0, xYAreaRenderer0);
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      AxisLocation axisLocation0 = combinedRangeXYPlot1.getDomainAxisLocation();
      combinedRangeXYPlot2.setRangeAxisLocation(axisLocation0);
      xYPlot0.getDomainZeroBaselinePaint();
      XYPlot xYPlot1 = new XYPlot(defaultXYZDataset0, logarithmicAxis0, periodAxis0, xYAreaRenderer0);
      combinedRangeXYPlot1.setRangeZeroBaselinePaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getOrientation();
      Object object0 = new Object();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis("ecl zA @|j:,$x6*uub");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, logarithmicAxis0, categoryStepRenderer0);
      categoryPlot0.getRangeZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(categoryStepRenderer0.DEFAULT_STROKE);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      combinedDomainXYPlot0.getDomainAxis((-2967));
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(65535, 10);
      xYPlot0.getDataRange(periodAxis0);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 2.0F, 482.9158945083618, 2.0, (double) 500);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 3437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 3437
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      ValueMarker valueMarker0 = new ValueMarker((-1046.5), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("TimePeriodAnchor.END");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot1.setRenderer(4, (XYItemRenderer) cyclicXYItemRenderer0, true);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot1.addDomainMarker(2035, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot1.getDomainAxisEdge(500);
      combinedRangeXYPlot1.getSeriesCount();
      combinedRangeXYPlot1.getDatasetCount();
      combinedRangeXYPlot1.setRangeTickBandPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getSeriesRenderingOrder();
      ValueMarker valueMarker0 = new ValueMarker((-1046.5), combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Font font0 = defaultPolarItemRenderer0.getBaseItemLabelFont();
      stackedXYAreaRenderer0.setLegendTextFont(10, font0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-615), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, (ValueAxis) null, (ValueAxis) null, xYAreaRenderer0);
      xYPlot0.getRangeAxis();
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setRenderer((XYItemRenderer) xYAreaRenderer0);
      xYPlot0.setDataset(4, (XYDataset) yIntervalSeriesCollection0);
      System.setCurrentTimeMillis(2403L);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, false);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.setDomainTickBandPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getDomainGridlinePaint();
      xYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDomainAxisLocation();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1041.78762618, 1805.0, "");
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, cyclicNumberAxis0, (ValueAxis) null, candlestickRenderer0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(candlestickRenderer0.DEFAULT_SHAPE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ArrayList<LogarithmicAxis> arrayList0 = new ArrayList<LogarithmicAxis>();
      combinedRangeXYPlot0.setDomainPannable(true);
      ArrayList<Color> arrayList1 = new ArrayList<Color>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes((-1799), arrayList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      dateAxis0.setTickLabelsVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.setAxisLineVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.getDomainGridlinePaint();
      double double0 = (-1247.238881392368);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 10, 10, (-1396), 6789, 10, 6789, true, true, true, true, true, true, true);
      chartPanel0.getGraphicsConfiguration();
      Dialog dialog0 = null;
      try {
        dialog0 = new Dialog((Dialog) null, "6I1]#$mu8h\"]=c Ifw", true, (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      Point point1 = new Point(point0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 552.585475759073);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.clearSelection();
      combinedRangeXYPlot0.getRangeMinorGridlineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("", xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(610.9586F, 0.0F, renderingHints0);
      int int0 = 6;
      int int1 = (-277);
      int int2 = (-175);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-119);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1755, 3671, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Stack<ObjectList> stack0 = new Stack<ObjectList>();
      JTree jTree0 = new JTree(stack0);
      jTree0.getAnchorSelectionPath();
      JEditorPane jEditorPane0 = new JEditorPane();
      jEditorPane0.modelToView(2647);
      fixedHeightLayoutCache0.getBounds((TreePath) null, (Rectangle) null);
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
      combinedDomainXYPlot0.clone();
      combinedDomainXYPlot0.clearRangeMarkers();
      BasicStroke basicStroke0 = null;
      try {
        basicStroke0 = new BasicStroke(10, 10, 10, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal end cap value
         //
         verifyException("java.awt.BasicStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      Millisecond millisecond0 = new Millisecond();
      Color color0 = Color.DARK_GRAY;
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT, color0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(valueAxisArray0[3]);
      combinedRangeXYPlot2.getDomainAxisEdge(10);
      combinedRangeXYPlot0.clearDomainMarkers(1);
      combinedRangeXYPlot1.getDataset();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(3.0, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)499;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)603;
      shortArray0[8] = (short)2;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable((short)2, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'marker' not permitted.", dateAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage((int) (short)2, 1377, (double) 2, 2742.02166, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle1 = rectangle2D_Double0.getBounds();
      rectangle1.createIntersection(rectangle2D_Double0);
      xYPlot0.drawVerticalLine(graphics2D0, rectangle0, 15, dateAxis0.DEFAULT_AXIS_LINE_STROKE, stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYPlot xYPlot0 = new XYPlot();
      numberAxis3D0.removeChangeListener(xYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      xYPlot0.getRangeAxisEdge(2622);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4174);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-4174);
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)6;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("Index ", periodAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart1 = new JFreeChart(thermometerPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 2, 7.0, (double) (short) (-4174), chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle1 = rectangle2D_Double0.getBounds();
      Rectangle2D rectangle2D0 = rectangle0.createIntersection(rectangle1);
      // Undeclared exception!
      try { 
        xYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, 10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, (Paint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.setRangeCrosshairPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.clearDomainMarkers(67);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      Stroke stroke0 = spiderWebPlot0.getAxisLineStroke();
      combinedRangeXYPlot1.setRangeMinorGridlineStroke(stroke0);
      combinedRangeXYPlot1.getDataset(490);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(false);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      combinedRangeXYPlot0.setDomainAxis(759, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(1, 1898);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.getSubplots();
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0, false);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, ".8&V");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-1), cyclicXYItemRenderer0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getWeight();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(903, axisLocation0, false);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      combinedRangeXYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 500, (-872.0), 0.0F);
      xYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      BasicStroke basicStroke0 = new BasicStroke();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-435);
      shortArray0[1] = (short)6;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(317, shortArray0);
      combinedRangeXYPlot0.clearDomainMarkers((int) (short)6);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(270, 270, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      periodAxis0.setFixedDimension(6789);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6789);
      combinedRangeXYPlot0.getDomainAxisLocation(0);
      combinedRangeXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      combinedRangeXYPlot0.setRangeCrosshairStroke(waferMapRenderer0.DEFAULT_STROKE);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) periodAxis0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clone();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(10);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      timeTableXYDataset0.getDomainBounds(true);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis(2513, (ValueAxis) moduloAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge(759);
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1873, 71, millisecond0);
      mockDate0.clone();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.GERMANY;
      PeriodAxis periodAxis0 = new PeriodAxis("d&i4>I'M0pj?~gF~", millisecond0, millisecond0, simpleTimeZone0, locale0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      periodAxis0.setTickLabelInsets(xYPlot1.DEFAULT_INSETS);
      AxisLocation axisLocation0 = xYPlot1.getDomainAxisLocation();
      xYPlot0.setRangeAxisLocation(axisLocation0);
      xYPlot1.getDomainZeroBaselinePaint();
      xYPlot0.setRangeZeroBaselinePaint(standardXYItemRenderer0.DEFAULT_PAINT);
      xYPlot0.getOrientation();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis("d&i4>I'M0pj?~gF~");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = new StandardCategorySeriesLabelGenerator("fXvJ[!YTS}9wev");
      categoryStepRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, periodAxis0, categoryStepRenderer0);
      categoryPlot0.getRangeZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(xYPlot1.DEFAULT_OUTLINE_STROKE);
      // Undeclared exception!
      try { 
        xYPlot1.setQuadrantPaint(280, xYPlot0.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (280) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      Week week0 = new Week(dateAxis0.DEFAULT_ANCHOR_DATE);
      PeriodAxis periodAxis0 = new PeriodAxis("rJ09yfA@jKr@03=sC-", week0, week0);
      periodAxis0.setTickLabelInsets(combinedRangeXYPlot1.DEFAULT_INSETS);
      combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot1.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getOrientation();
      Object object0 = new Object();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, periodAxis0, categoryStepRenderer0);
      CategoryPlot categoryPlot1 = new CategoryPlot();
      categoryPlot1.getRangeZeroBaselineStroke();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(categoryAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot1.getDataset(10);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge(759);
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1873, 71, millisecond0);
      mockDate0.clone();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.GERMANY;
      PeriodAxis periodAxis0 = new PeriodAxis("d&i4>I'M0pj?~gF~", millisecond0, millisecond0, simpleTimeZone0, locale0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      periodAxis0.setTickLabelInsets(xYPlot1.DEFAULT_INSETS);
      AxisLocation axisLocation0 = xYPlot1.getDomainAxisLocation();
      xYPlot0.setRangeAxisLocation(axisLocation0);
      xYPlot1.getDomainZeroBaselinePaint();
      xYPlot0.setRangeZeroBaselinePaint(standardXYItemRenderer0.DEFAULT_PAINT);
      xYPlot0.getOrientation();
      Object object0 = new Object();
      xYPlot1.clearDomainMarkers(8);
      xYPlot1.getDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes((double) 2.0F, plotRenderingInfo0, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDataset((XYDataset) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.clearRangeAxes();
      Layer layer1 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.removeRangeMarker((Marker) null, layer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getDomainAxisCount();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.3F);
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeXYPlot0);
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      combinedRangeXYPlot0.setInsets(rectangleInsets0, true);
      combinedRangeXYPlot0.removeRangeMarker(1789, (Marker) categoryMarker0, (Layer) null, false);
      combinedRangeXYPlot0.setDomainPannable(true);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-320.4720484519854));
      candlestickRenderer0.getSeriesStroke(1789);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke(10);
      Point point0 = new Point();
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      combinedRangeXYPlot0.setQuadrantOrigin(point0);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedRangeXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("TimePeriodAnchor.END");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.clearDomainMarkers(1);
      combinedRangeXYPlot0.getDataset();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(periodAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      PeriodAxis periodAxis1 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(500, periodAxis0.DEFAULT_AXIS_LINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.mapDatasetToRangeAxis(51, 2045);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      ValueMarker valueMarker0 = new ValueMarker((-1046.5), xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ArrayList<LogarithmicAxis> arrayList0 = new ArrayList<LogarithmicAxis>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(501, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "|Ct|x%Q");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.getRangeAxisLocation();
      combinedRangeXYPlot1.configureDomainAxes();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      MockDate mockDate0 = new MockDate((-794), 10, 10);
      Minute minute0 = null;
      try {
        minute0 = new Minute(mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(2045, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      xYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, (Point2D) null);
      Layer layer0 = Layer.FOREGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedRangeXYPlot0.setDataset((XYDataset) defaultXYDataset0);
      combinedRangeXYPlot0.clearRangeAxes();
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer1);
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairValue((double) 500, false);
      combinedRangeXYPlot1.getOrientation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -454 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryPlot0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      xYPlot0.getDatasetRenderingOrder();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      JFreeChart jFreeChart0 = new JFreeChart("Wm;``]<Kuz*isbrTI`", periodAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(6, 631, (double) 10, (double) 10, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxisEdge(759);
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point((-929), 999);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(6.0, 6.0, "Null 'layer' not permitted.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][0][4];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-3577), (XYDataset) vectorSeriesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("TimePeriodAnchor.END");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0, false);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      xYPlot0.getQuadrantPaint(2);
      xYPlot0.getRangeAxisEdge();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers(10, layer0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation0, true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot1.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(":37_Y2", combinedRangeXYPlot0);
      jFreeChart0.clearSubtitles();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(10, 2.0F, 234.1166291, 0.2213589206056106);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      Layer layer1 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addRangeMarker((Marker) null, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 20000.0, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis1 = new DateAxis("J*[#Oio`", zoneInfo0, locale0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis1);
      combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot1.getDomainGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainAxisIndex(dateAxis1);
      JFreeChart jFreeChart0 = new JFreeChart("J*[#Oio`", combinedRangeXYPlot1);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1390), 10, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1390) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      DateAxis dateAxis0 = new DateAxis("8");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
      combinedRangeXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      combinedDomainXYPlot0.handleClick(500, 10, plotRenderingInfo0);
      combinedDomainXYPlot0.getDomainAxis((-2967));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      String string0 = "";
      Comparable<AxisSpace>[] comparableArray0 = (Comparable<AxisSpace>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<AxisSpace>) numberAxis3D0.DEFAULT_TICK_UNIT;
      comparableArray0[1] = (Comparable<AxisSpace>) numberAxis3D0.DEFAULT_TICK_UNIT;
      comparableArray0[2] = (Comparable<AxisSpace>) numberAxis3D0.DEFAULT_TICK_UNIT;
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 10;
      numberArray1[1] = combinedDomainXYPlot0.ZERO;
      numberArray1[2] = (Number) 0.0F;
      Integer integer0 = Integer.getInteger("", 10);
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) 10;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) 1.0F;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      numberArray3[0] = (Number) 500;
      Double double0 = new Double(500);
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) 1.0F;
      numberArray3[3] = (Number) 0.05;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = (Number) 500;
      numberArray3[6] = (Number) 0.05;
      numberArray3[7] = (Number) 500;
      numberArray3[8] = (Number) 1.0F;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) 10;
      numberArray4[2] = (Number) 0.0F;
      numberArray4[3] = (Number) 1.0F;
      numberArray4[4] = (Number) 10;
      numberArray4[5] = (Number) 1.0E-8;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      BasicStroke basicStroke0 = new BasicStroke();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-435);
      shortArray0[1] = (short)6;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(317, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("Index ", periodAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      int int0 = 342;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage((int) (short)6, 342, 2528.0, (double) 500, chartRenderingInfo0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)17;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, (short)6, byteArray0, 317, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 317
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      Millisecond millisecond0 = new Millisecond();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.UK;
      PeriodAxis periodAxis1 = new PeriodAxis((String) null, millisecond0, millisecond0, timeZone0, locale0);
      valueAxisArray0[4] = (ValueAxis) periodAxis1;
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.LocalizationBundle");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setOutlinePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(65535);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-1070), 680);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, categoryPlot0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 669, 6.0, (-963.0), chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Segment segment0 = new Segment();
      AffineTransform.getRotateInstance(1.0E-6);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      Point point0 = new Point(907, 10);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      xYPlot0.setDomainCrosshairVisible(false);
      Object[][][] objectArray0 = new Object[0][8][6];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(arrayList0, objectArray0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultWindDataset0);
      Point point1 = new Point(point0);
      combinedRangeXYPlot0.setQuadrantOrigin(point1);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(3551.78);
      DateAxis dateAxis0 = new DateAxis("8");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      BasicStroke basicStroke0 = new BasicStroke();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getWallPaint();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getSeriesOutlineStroke(759);
      combinedRangeXYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      JSpinner jSpinner0 = new JSpinner();
      JScrollPane jScrollPane0 = new JScrollPane(jSpinner0);
      jScrollPane0.getViewport();
      jScrollPane0.add((Component) jSpinner0, (Object) chartRenderingInfo0, 0);
      jScrollPane0.firePropertyChange("=mU1kr8", 0.0F, (float) 1770);
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getDomainMarkers((Layer) null);
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      // Undeclared exception!
      combinedRangeXYPlot1.setRenderer(2147376211, (XYItemRenderer) cyclicXYItemRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.setTextAntiAlias(true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.handleClick(500, 500, plotRenderingInfo0);
      chartPanel0.isFocusOwner();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(200, 0.0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.getDomainGridlineStroke();
      combinedDomainXYPlot0.getDomainAxisIndex(logAxis0);
      int int0 = (-118);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-118), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-118) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ValueMarker valueMarker0 = new ValueMarker(10000.0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, thermometerPlot0.DEFAULT_OUTLINE_STROKE, valueAxis0.DEFAULT_TICK_LABEL_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE, 1);
      String string0 = "o&;!|,4";
      valueMarker0.setLabel("o&;!|,4");
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(851, (Marker) valueMarker0, layer0, false);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      PeriodAxis periodAxis0 = new PeriodAxis("Wm;``]<Kuz*isbrTI`");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JSpinner jSpinner0 = new JSpinner();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.setDomainGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.clearAnnotations();
      xYPlot0.getDataRange(periodAxis0);
      combinedRangeXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      JSpinner jSpinner0 = new JSpinner();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(4492, layer0);
      xYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "|Ct|x%Q");
      cyclicNumberAxis0.setAutoTickUnitSelection(false, false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      Object object0 = new Object();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      LogAxis logAxis0 = new LogAxis("E<WtMmoUy{{3#qe|");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedRangeXYPlot0.setDataset((XYDataset) jDBCXYDataset0);
      combinedRangeXYPlot0.clearRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      xYPlot0.setNoDataMessage("*%aZBC");
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1725.793);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      PeriodAxis periodAxis0 = new PeriodAxis("|l7");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getRangeAxisLocation(434);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      combinedRangeXYPlot0.getRendererCount();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot2.isDomainZoomable();
      combinedRangeXYPlot2.getDatasetRenderingOrder();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DefaultEditorKit.BeepAction defaultEditorKit_BeepAction0 = new DefaultEditorKit.BeepAction();
      xIntervalSeriesCollection0.hasListener(defaultEditorKit_BeepAction0);
      combinedRangeXYPlot1.getRendererForDataset(xIntervalSeriesCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(periodAxis0);
      Stroke stroke0 = combinedRangeXYPlot1.getDomainCrosshairStroke();
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(1725.793, (double) candlestickRenderer0.ZERO, periodAxis0.DEFAULT_AXIS_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, stroke0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("", regularTimePeriod0, regularTimePeriod0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      regularTimePeriod0.getLastMillisecond();
      Object[][] objectArray0 = new Object[7][2];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) fixedMillisecond0;
      objectArray1[1] = (Object) regularTimePeriod0;
      objectArray1[2] = (Object) fixedMillisecond0;
      objectArray1[3] = (Object) regularTimePeriod0;
      objectArray1[4] = (Object) "";
      objectArray1[5] = (Object) defaultWindDataset0;
      objectArray1[6] = (Object) combinedRangeXYPlot0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[3];
      objectArray2[0] = (Object) combinedRangeXYPlot0;
      objectArray2[1] = (Object) "";
      objectArray2[2] = (Object) "";
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[4];
      objectArray3[0] = (Object) "";
      objectArray3[1] = (Object) defaultPolarItemRenderer0;
      objectArray3[2] = (Object) defaultPolarItemRenderer0;
      objectArray3[3] = (Object) "";
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = (Object) regularTimePeriod0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = (Object) defaultWindDataset0;
      objectArray5[1] = (Object) defaultWindDataset0;
      objectArray5[2] = (Object) regularTimePeriod0;
      objectArray5[3] = (Object) fixedMillisecond0;
      objectArray5[4] = (Object) fixedMillisecond0;
      objectArray5[5] = (Object) defaultPolarItemRenderer0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[6];
      Object object0 = combinedRangeXYPlot0.clone();
      objectArray6[0] = object0;
      objectArray6[1] = (Object) fixedMillisecond0;
      objectArray6[2] = (Object) defaultWindDataset0;
      objectArray6[3] = (Object) defaultPolarItemRenderer0;
      objectArray6[4] = (Object) combinedRangeXYPlot0;
      objectArray6[5] = (Object) defaultWindDataset0;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[6];
      objectArray7[0] = (Object) fixedMillisecond0;
      objectArray7[1] = (Object) defaultPolarItemRenderer0;
      objectArray7[2] = (Object) "";
      objectArray7[3] = (Object) periodAxis0;
      objectArray7[4] = (Object) fixedMillisecond0;
      objectArray7[5] = object0;
      objectArray0[6] = objectArray7;
      DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      PolarPlot polarPlot0 = new PolarPlot(defaultWindDataset0, periodAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers();
      Stroke stroke0 = combinedDomainXYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker(10, (Marker) null, layer0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      combinedDomainXYPlot0.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedDomainXYPlot0.getDomainAxis(680);
      Object[][][] objectArray0 = new Object[6][5][9];
      Object[][] objectArray1 = new Object[3][3];
      Object[] objectArray2 = new Object[7];
      Object object0 = combinedDomainXYPlot0.clone();
      objectArray2[0] = object0;
      objectArray2[1] = (Object) categoryMarker0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) categoryMarker0;
      objectArray2[4] = (Object) categoryMarker0;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) combinedDomainXYPlot0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = object0;
      Object object1 = new Object();
      objectArray3[1] = object1;
      objectArray3[2] = (Object) categoryMarker0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = object1;
      objectArray1[2] = objectArray4;
      objectArray0[0] = objectArray1;
      Object[][] objectArray5 = new Object[1][5];
      objectArray5[0] = objectArray2;
      objectArray0[1] = objectArray5;
      Object[][] objectArray6 = new Object[7][5];
      objectArray6[0] = objectArray4;
      objectArray6[1] = objectArray4;
      objectArray6[2] = objectArray3;
      objectArray6[3] = objectArray2;
      objectArray6[4] = objectArray4;
      objectArray6[5] = objectArray3;
      objectArray6[6] = objectArray3;
      objectArray0[2] = objectArray6;
      Object[][] objectArray7 = new Object[5][2];
      objectArray7[0] = objectArray3;
      Object[] objectArray8 = new Object[3];
      objectArray8[0] = (Object) combinedDomainXYPlot0;
      objectArray8[1] = (Object) combinedDomainXYPlot0;
      objectArray8[2] = object1;
      objectArray7[1] = objectArray8;
      objectArray7[2] = objectArray3;
      objectArray7[3] = objectArray2;
      objectArray7[4] = objectArray2;
      objectArray0[3] = objectArray7;
      Object[][] objectArray9 = new Object[8][1];
      objectArray9[0] = objectArray2;
      Object[] objectArray10 = new Object[8];
      objectArray10[0] = (Object) combinedDomainXYPlot0;
      objectArray10[1] = object1;
      Object object2 = combinedDomainXYPlot0.clone();
      objectArray10[2] = object2;
      objectArray10[3] = (Object) combinedDomainXYPlot0;
      objectArray10[4] = object1;
      objectArray10[5] = (Object) null;
      objectArray10[6] = object1;
      objectArray10[7] = object1;
      objectArray9[1] = objectArray10;
      objectArray9[2] = objectArray2;
      objectArray9[3] = objectArray8;
      objectArray9[4] = objectArray8;
      objectArray9[5] = objectArray4;
      objectArray9[6] = objectArray3;
      objectArray9[7] = objectArray3;
      objectArray0[4] = objectArray9;
      Object[][] objectArray11 = new Object[8][9];
      objectArray11[0] = objectArray10;
      Object[] objectArray12 = new Object[9];
      objectArray12[0] = (Object) categoryMarker0;
      Object object3 = combinedDomainXYPlot0.clone();
      objectArray12[1] = object3;
      objectArray12[2] = (Object) null;
      Object object4 = new Object();
      objectArray12[3] = object4;
      objectArray12[4] = (Object) null;
      Object object5 = new Object();
      objectArray12[5] = object5;
      objectArray12[6] = (Object) categoryMarker0;
      objectArray12[7] = (Object) categoryMarker0;
      objectArray12[8] = object2;
      objectArray11[1] = objectArray12;
      objectArray11[2] = objectArray8;
      objectArray11[3] = objectArray10;
      objectArray11[4] = objectArray4;
      objectArray11[5] = objectArray8;
      objectArray11[6] = objectArray8;
      objectArray11[7] = objectArray8;
      objectArray0[5] = objectArray11;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CategoryMarker cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers();
      Stroke stroke0 = combinedDomainXYPlot0.getRangeCrosshairStroke();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}YikT-}vjp";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}YikT-}vjp");
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, symbolAxis0, logarithmicAxis0, xYBubbleRenderer0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((-1678), (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      cyclicNumberAxis0.getRange();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      MockDate mockDate0 = new MockDate(200, (-284), 270);
      Minute minute0 = new Minute(mockDate0);
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      combinedRangeXYPlot3.setDomainPannable(true);
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(true);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.getRangeMarkers(layer0);
      int int0 = 1263;
      Vector<LogAxis> vector0 = new Vector<LogAxis>();
      LogAxis logAxis0 = new LogAxis();
      vector0.add(logAxis0);
      logAxis0.setSmallestValue(10);
      logAxis0.setUpArrow(xYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      vector0.removeAllElements();
      vector0.remove((Object) logAxis0);
      // Undeclared exception!
      try { 
        vector0.listIterator(759);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 759
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      Stroke stroke0 = combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("!zzz!a=Z2*qviD", combinedRangeXYPlot0);
      jFreeChart0.clearSubtitles();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.hasListener(jFreeChart0);
      combinedRangeXYPlot1.getRendererForDataset(xIntervalSeriesCollection0);
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(true);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.1, jFreeChart0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_BACKGROUND_PAINT, stroke0, 0.0F);
      BoxAndWhiskerXYToolTipGenerator boxAndWhiskerXYToolTipGenerator0 = new BoxAndWhiskerXYToolTipGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0, false, boxAndWhiskerXYToolTipGenerator0);
      candlestickRenderer0.setVolumePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker((-674), (Marker) intervalMarker0, layer0, true);
      combinedRangeXYPlot1.getDomainAxisEdge(1244);
      combinedRangeXYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getSeriesRenderingOrder();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BasicStroke basicStroke0 = new BasicStroke();
      double double0 = 20000.0;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      String string0 = "%N'5";
      JFreeChart jFreeChart0 = new JFreeChart("%N'5", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 20000.0, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Segment segment0 = new Segment();
      int int0 = (-2118);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-4604.701901577606));
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, xYSplineRenderer0, graphics2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.chart.renderer.xy.XYSplineRenderer@841a5a1a
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeAxisLocation(2018);
      combinedRangeXYPlot0.getRenderer();
      combinedRangeXYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedDomainXYPlot0.clearSelection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getDrawingSupplier();
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      combinedRangeXYPlot0.getRendererCount();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDatasetRenderingOrder();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.hasListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 10, periodAxis0.DEFAULT_AXIS_LINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1);
      candlestickRenderer0.setVolumePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(1, (Marker) valueMarker0, layer0, true);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, candlestickRenderer0.DEFAULT_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}YikT-}vjp";
      stringArray0[3] = "";
      stringArray0[4] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("}YikT-}vjp");
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, symbolAxis0, logarithmicAxis0, xYBubbleRenderer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation((-1678), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 1;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      categoryMarker0.equals(samplingXYLineRenderer0);
      TextAnchor textAnchor0 = TextAnchor.TOP_LEFT;
      categoryMarker0.setLabelTextAnchor(textAnchor0);
      combinedRangeXYPlot0.getSubplots();
      combinedRangeXYPlot0.removeRangeMarker(1, (Marker) categoryMarker0, layer0, false);
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 1);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      timePeriodValuesCollection0.hasListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.setDataset((XYDataset) timePeriodValuesCollection0);
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.getDomainMinorGridlinePaint();
      double double0 = 101.86514268106035;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-7);
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(3331, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart("Indices must be unique.", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(261, 3510, (-2547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -2547
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedDomainXYPlot0.clearSelection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getDrawingSupplier();
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      combinedRangeXYPlot0.getRendererCount();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDatasetRenderingOrder();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.hasListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      IntervalMarker intervalMarker0 = new IntervalMarker(1, 10, periodAxis0.DEFAULT_AXIS_LINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 1);
      candlestickRenderer0.setVolumePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker(1, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.getDomainAxisEdge(1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(5.0E-7, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("3Pf");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(1920, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.setRangeCrosshairValue(5474.0, true);
      combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.getRangeAxisForDataset(10);
      combinedRangeXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(" out of bounds.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(2148, layer1);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(10, axisLocation0, false);
      Stroke stroke0 = xYPlot0.getDomainZeroBaselineStroke();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(stroke0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Empty list not permitted.", combinedRangeXYPlot1);
      jFreeChart0.clearSubtitles();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((-850.9779967882216), 0.0, 0.0F, 10.0);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      Layer layer2 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 58);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(58, 65);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      
      WaferMapRenderer waferMapRenderer1 = new WaferMapRenderer();
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer1);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer1.getDrawingSupplier();
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertNotSame(waferMapRenderer1, waferMapRenderer0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logarithmicAxis0);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      
      int int0 = combinedRangeXYPlot1.getRendererCount();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainCrosshairLockedOnData(true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot1.isDomainZoomable();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot1.getDatasetRenderingOrder();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(datasetRenderingOrder0);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, (-346.0), dateAxis0.DEFAULT_AXIS_LINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, waferMapRenderer1.DEFAULT_VALUE_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(2.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-346.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(8, layer0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.getRangeGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(3551.9013385693975);
      DateAxis dateAxis0 = new DateAxis("8");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JSpinner jSpinner0 = new JSpinner();
      combinedRangeXYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(collection0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(range0);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot2);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(chartPanel0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertNotNull(plotOrientation0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      
      combinedRangeXYPlot2.setOrientation(plotOrientation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      
      boolean boolean0 = combinedRangeXYPlot1.isDomainZoomable();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot1.getAxisOffset();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleInsets0);
      assertEquals(500.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-499.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(500.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(1263);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      
      combinedRangeXYPlot2.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot2.getSeriesRenderingOrder();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedRangeXYPlot2.setRangeGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.isRangeGridlinesVisible();
      combinedRangeXYPlot0.setWeight(1263);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.getRangeMarkers(519, layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.302585092994046);
      cyclicNumberAxis0.getRange();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("yj:Esje7h9@9-d", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot2, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      combinedRangeXYPlot2.getRendererCount();
      combinedRangeXYPlot1.isDomainZoomable();
      combinedRangeXYPlot2.getAxisOffset();
      XYPlot xYPlot1 = new XYPlot();
      xYPlot1.getRenderer(10);
      xYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot2.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot1.getSeriesRenderingOrder();
      combinedRangeXYPlot2.setRangeGridlinesVisible(true);
      xYPlot1.getDatasetRenderingOrder();
      combinedRangeXYPlot2.setRangeAxis(1024, (ValueAxis) cyclicNumberAxis0, true);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("qwl@EO+>5(");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      BasicStroke basicStroke0 = new BasicStroke();
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      lineRenderer3D0.getWallPaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, lineRenderer3D0.DEFAULT_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT, basicStroke0, 0.5F);
      combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      xYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0, false);
      combinedRangeXYPlot0.getOrientation();
      xYPlot0.getQuadrantPaint(2);
      xYPlot0.removeDomainMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      combinedDomainXYPlot0.clearSelection();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      generalPath0.lineTo((double) 2.0F, 0.0);
      Point2D.Double[] point2D_DoubleArray0 = new Point2D.Double[0];
      JList<Point2D.Double> jList0 = new JList<Point2D.Double>(point2D_DoubleArray0);
      jList0.getCellBounds(10, 500);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Wr^]$N(/hUh^F");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(logarithmicAxis0);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals("Wr^]$N(/hUh^F", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals("Wr^]$N(/hUh^F", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      assertNotNull(defaultPolarItemRenderer1);
      assertEquals(2.0, defaultPolarItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer1.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer1.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer1.getBaseItemLabelsVisible());
      
      DrawingSupplier drawingSupplier1 = defaultPolarItemRenderer1.getDrawingSupplier();
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      assertNull(drawingSupplier1);
      assertEquals(2.0, defaultPolarItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer1.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer1.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer1.getBaseItemLabelsVisible());
      assertNotSame(defaultPolarItemRenderer1, defaultPolarItemRenderer0);
      
      combinedRangeXYPlot1.setDrawingSupplier((DrawingSupplier) null);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals("Wr^]$N(/hUh^F", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot1.getRendererCount();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals("Wr^]$N(/hUh^F", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot2);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      
      boolean boolean0 = combinedRangeXYPlot2.isDomainZoomable();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(xYItemRenderer0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot2.setDomainMinorGridlinesVisible(true);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(134.842790239365, 10, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT, defaultPolarItemRenderer1.DEFAULT_OUTLINE_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(defaultPolarItemRenderer0.equals((Object)defaultPolarItemRenderer1));
      assertTrue(defaultPolarItemRenderer1.equals((Object)defaultPolarItemRenderer0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(intervalMarker0);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(134.842790239365, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals("Wr^]$N(/hUh^F", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, defaultPolarItemRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer1.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer1.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer1.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer1.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer1.getBaseItemLabelsVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot3);
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot3.addDomainMarker(71, (Marker) intervalMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      
      ValueMarker valueMarker0 = new ValueMarker(5.0E-7, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(5.0E-7, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYShapeAnnotation0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainGridlinesVisible();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot1.getQuadrantOrigin();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(seriesRenderingOrder0);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(datasetRenderingOrder0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertNotNull(xYErrorRenderer0);
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      Stroke stroke0 = xYErrorRenderer0.getErrorStroke();
      assertNull(stroke0);
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker((-2363.7279555), 1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, (Stroke) null, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      
      combinedRangeXYPlot0.setRangeCrosshairValue((-1.0), false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals((-1.0), combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals((-1.0), combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      xYPlot0.setDomainCrosshairValue(0.05, true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.05, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -246 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(logarithmicAxis0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(boolean0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(xYItemRenderer0);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 58);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(58, 65);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      
      WaferMapRenderer waferMapRenderer1 = new WaferMapRenderer();
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer1);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer1.getDrawingSupplier();
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertNotSame(waferMapRenderer1, waferMapRenderer0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logarithmicAxis0);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      DrawingSupplier drawingSupplier1 = defaultPolarItemRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier1);
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      int int0 = combinedRangeXYPlot1.getRendererCount();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainCrosshairLockedOnData(true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot1.isDomainZoomable();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot1.getDatasetRenderingOrder();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(datasetRenderingOrder0);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(false);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, (-346.0), dateAxis0.DEFAULT_AXIS_LINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, waferMapRenderer1.DEFAULT_VALUE_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(intervalMarker0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-346.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      
      combinedRangeXYPlot0.addDomainMarker(1, (Marker) intervalMarker0, layer0, false);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(58.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-346.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(waferMapRenderer1, waferMapRenderer0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(10);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JTree jTree0 = new JTree((Object[]) null);
      assertNotNull(jTree0);
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      
      Vector<DefaultXYZDataset> vector0 = new Vector<DefaultXYZDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      JTree jTree1 = new JTree(vector0);
      assertFalse(jTree1.equals((Object)jTree0));
      assertNotNull(jTree1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(jTree1.isFocusTraversalPolicyProvider());
      assertFalse(jTree1.isFocusTraversalPolicySet());
      assertFalse(jTree1.getIgnoreRepaint());
      assertTrue(jTree1.getFocusTraversalKeysEnabled());
      assertFalse(jTree1.isFocusCycleRoot());
      
      Rectangle rectangle0 = jTree1.getRowBounds((-378));
      assertFalse(jTree1.equals((Object)jTree0));
      assertNull(rectangle0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(jTree1.isFocusTraversalPolicyProvider());
      assertFalse(jTree1.isFocusTraversalPolicySet());
      assertFalse(jTree1.getIgnoreRepaint());
      assertTrue(jTree1.getFocusTraversalKeysEnabled());
      assertFalse(jTree1.isFocusCycleRoot());
      assertNotSame(jTree1, jTree0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNotNull(valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      DateAxis dateAxis0 = new DateAxis("8");
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) null, true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      combinedRangeXYPlot0.setRangeCrosshairValue(0.05, true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.05, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.05, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (500) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      
      ValueMarker valueMarker0 = new ValueMarker(5.0E-7, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(5.0E-7, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYShapeAnnotation0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      cyclicXYItemRenderer0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      
      combinedRangeXYPlot0.setRenderer(4492, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(5.0E-7, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot1.getQuadrantOrigin();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Collection collection0 = xYPlot0.getDomainMarkers(1760, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertNotNull(stackedXYAreaRenderer0);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      stackedXYAreaRenderer0.setLegendTextFont(1244, dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setRangeAxisLocation(4, axisLocation0, true);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setNoDataMessage((String) null);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainZeroBaselineStroke();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      xYPlot0.setDomainMinorGridlineStroke(stackedXYAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      JFreeChart jFreeChart0 = new JFreeChart("'position' out of bounds.", combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      
      combinedRangeXYPlot1.setRangeCrosshairValue(2.0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(2.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot2);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot2.getOrientation();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.getRangeAxisForDataset(777);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 777 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertNotNull(range0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartPanel0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(plotOrientation0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot2.setOrientation(plotOrientation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      boolean boolean0 = combinedRangeXYPlot1.isDomainZoomable();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot1.getAxisOffset();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleInsets0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(4493);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(xYItemRenderer0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot2.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      
      Color color0 = (Color)FastScatterPlot.DEFAULT_GRIDLINE_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(200, 0.05, color0);
      assertNotNull(intervalMarker0);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(200.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      
      combinedRangeXYPlot1.addDomainMarker(420, (Marker) intervalMarker0, layer0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(200.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.05, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      double double0 = 0.0;
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartRenderingInfo0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(plotRenderingInfo0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(polarPlot0);
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertFalse(polarPlot0.isDomainZoomable());
      assertTrue(polarPlot0.isNotify());
      assertFalse(polarPlot0.isSubplot());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(polarPlot0.isOutlineVisible());
      
      double double1 = (-2207.64801613657);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      Rectangle rectangle0 = new Rectangle(1, 10);
      assertEquals(1, rectangle0.width);
      assertEquals(10, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.5, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, rectangle0.getWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        debugGraphics0.getClipBounds(rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      
      ValueMarker valueMarker0 = new ValueMarker(5.0E-7, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(5.0E-7, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      
      Class<AxisState> class0 = AxisState.class;
      periodAxis0.setAutoRangeTimePeriodClass(class0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer(4492, (XYItemRenderer) cyclicXYItemRenderer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertNotNull(dateAxis0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(1244);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertNotNull(stackedXYAreaRenderer0);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      stackedXYAreaRenderer0.setLegendTextFont(10, dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setNoDataMessage("Null 'marker' not permitted.");
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(basicStroke0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      
      JFreeChart jFreeChart0 = new JFreeChart("!zzz!a=Z2*qviD", combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      
      jFreeChart0.clearSubtitles();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, (-1.0), 1539.446, 0.5F);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(stackedXYAreaRenderer0.DEFAULT_SHAPE, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT, color0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYShapeAnnotation0);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Null 'marker' not permitted.", combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Layer layer1 = Layer.FOREGROUND;
      assertFalse(layer1.equals((Object)layer0));
      assertNotNull(layer1);
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertNotSame(layer1, layer0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(759);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleEdge0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1852, 71, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.text.TextBlock", millisecond0, millisecond0, zoneInfo0, locale0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1473);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertNotNull(standardXYItemRenderer0);
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      
      periodAxis0.setTickLabelInsets(xYPlot0.DEFAULT_INSETS);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(mockDate0, object0);
      
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(xYPlot0, xYPlot1);
      
      xYPlot1.setRangeAxisLocation(axisLocation0);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      Color color0 = (Color)xYPlot0.getDomainZeroBaselinePaint();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(color0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertNotSame(xYPlot0, xYPlot1);
      
      xYPlot1.setRangeZeroBaselinePaint(standardXYItemRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      PlotOrientation plotOrientation0 = xYPlot1.getOrientation();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("org.jfree.chart.text.TextBlock", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isRangeZoomable());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockDate0;
      objectArray0[1] = (Object) dynamicTimeSeriesCollection0;
      objectArray0[2] = (Object) plotOrientation0;
      JTree jTree0 = new JTree(objectArray0);
      assertNotNull(jTree0);
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      
      Rectangle rectangle0 = jTree0.getRowBounds(8);
      assertNull(rectangle0);
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        xYPlot1.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(periodAxis0);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      periodAxis0.resizeRange((double) 10, (double) 1.0F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals((-4.0), periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(7.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      assertNotNull(color0);
      assertEquals(221, color0.getRed());
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-2236963), color0.getRGB());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(numberAxis0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(759);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(rectangleEdge0);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1852, 71, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      PeriodAxis periodAxis0 = new PeriodAxis("d&i4>I'M0pj?~gF~", millisecond0, millisecond0, simpleTimeZone0, locale0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertNotNull(standardXYItemRenderer0);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      
      periodAxis0.setTickLabelInsets(xYPlot1.DEFAULT_INSETS);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      AxisLocation axisLocation0 = xYPlot1.getDomainAxisLocation();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      valueAxisArray0[4] = (ValueAxis) periodAxis0;
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      valueAxisArray0[6] = (ValueAxis) periodAxis0;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(">p`6D}Dz5,<GmxZT");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(numberAxis3D0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(">p`6D}Dz5,<GmxZT", numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      
      valueAxisArray0[7] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[8] = (ValueAxis) periodAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(9, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(9, valueAxisArray0.length);
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F, periodAxis0.DEFAULT_AXIS_LINE_PAINT, xYPlot1.DEFAULT_CROSSHAIR_STROKE);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(9, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      boolean boolean1 = xYPlot1.removeRangeMarker(1, (Marker) valueMarker0, layer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(1, xYPlot1.getWeight());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangePannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainPannable());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isOutlineVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertNotNull(stackedXYAreaRenderer0);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      stackedXYAreaRenderer0.setLegendTextFont(1244, dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setRangeAxisLocation(4, axisLocation0, true);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setNoDataMessage((String) null);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainZeroBaselineStroke();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      xYPlot0.setDomainMinorGridlineStroke(stackedXYAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      
      JFreeChart jFreeChart0 = new JFreeChart("'position' out of bounds.", combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.clearSubtitles();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2.0F, 0.6428571428571429, 0.0, 0.0);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(5.0E-7, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(5.0E-7, valueMarker0.getValue(), 0.01);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(periodAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      
      combinedRangeXYPlot0.setRenderer(4492, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      
      combinedRangeXYPlot1.setRangeCrosshairValue(1.0E-8, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1.0E-8, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxisForDataset(1198);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(valueAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(4493, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(valueAxis0.isInverted());
      assertEquals(0.0F, valueAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(valueAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, valueAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertFalse(valueAxis0.isVerticalTickLabels());
      assertTrue(valueAxis0.isAxisLineVisible());
      assertTrue(valueAxis0.isAutoRange());
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, valueAxis0.getLowerMargin(), 0.01);
      assertFalse(valueAxis0.isMinorTickMarksVisible());
      assertTrue(valueAxis0.isTickMarksVisible());
      assertNull(valueAxis0.getLabelURL());
      assertEquals(2.0, valueAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, valueAxis0.getFixedDimension(), 0.01);
      assertTrue(valueAxis0.isVisible());
      assertEquals("", valueAxis0.getLabel());
      assertTrue(valueAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, valueAxis0.getLowerBound(), 0.01);
      assertFalse(valueAxis0.isPositiveArrowVisible());
      assertEquals(0, valueAxis0.getMinorTickCount());
      assertEquals(0.05, valueAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(valueAxis0.getLabelToolTip());
      assertEquals(2.0F, valueAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, valueAxis0.getFixedAutoRange(), 0.01);
      assertSame(periodAxis0, valueAxis0);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertSame(valueAxis0, periodAxis0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(3551.78);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3551.78, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      
      DateAxis dateAxis0 = new DateAxis("8");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(2, valueAxisArray0.length);
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3551.78, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      combinedRangeXYPlot0.setDomainGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      combinedRangeXYPlot0.clearAnnotations();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logarithmicAxis0);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      ModuloAxis moduloAxis0 = new ModuloAxis("vidpAc.", logarithmicAxis0.DEFAULT_RANGE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertNotNull(moduloAxis0);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals("vidpAc.", moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isVisible());
      assertFalse(moduloAxis0.isInverted());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      
      combinedRangeXYPlot0.setBackgroundImageAlpha(0.0F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(2472.786177, 1.0E-100, 2472.786177, 1655.0);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      
      xYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(logarithmicAxis0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      
      logarithmicAxis0.resizeRange((double) waferMapRenderer0.ZERO);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(datasetRenderingOrder0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      
      xYStepRenderer0.clearSeriesPaints(false);
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      AffineTransform affineTransform0 = AffineTransform.getShearInstance((-2070.3033555624), 1777.378614682868);
      assertNotNull(affineTransform0);
      assertEquals(3679713.910082792, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-2070.3033555624), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1777.378614682868, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      
      Point point0 = new Point(10, 907);
      assertEquals(907, point0.y);
      assertEquals(10, point0.x);
      assertNotNull(point0);
      assertEquals(10.0, point0.getX(), 0.01);
      assertEquals(907.0, point0.getY(), 0.01);
      
      combinedRangeXYPlot0.setDataset(21, (XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(22, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertEquals(907, point0.y);
      assertEquals(10, point0.x);
      assertEquals(10, point1.x);
      assertEquals(907, point1.y);
      assertNotNull(point1);
      assertEquals(10.0, point0.getX(), 0.01);
      assertEquals(907.0, point0.getY(), 0.01);
      assertEquals(10.0, point1.getX(), 0.01);
      assertEquals(907.0, point1.getY(), 0.01);
      
      Point point2 = (Point)affineTransform0.inverseTransform((Point2D) point1, (Point2D) point0);
      assertFalse(point0.equals((Object)point1));
      assertFalse(point1.equals((Object)point0));
      assertFalse(point2.equals((Object)point1));
      assertEquals(0, point0.y);
      assertEquals(1, point0.x);
      assertEquals(10, point1.x);
      assertEquals(907, point1.y);
      assertEquals(0, point2.y);
      assertEquals(1, point2.x);
      assertNotNull(point2);
      assertEquals(3679713.910082792, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-2070.3033555624), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1777.378614682868, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(10.0, point1.getX(), 0.01);
      assertEquals(907.0, point1.getY(), 0.01);
      assertEquals(1.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotSame(point0, point1);
      assertSame(point0, point2);
      assertNotSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertSame(point2, point0);
      
      combinedRangeXYPlot0.setQuadrantOrigin(point2);
      assertFalse(point0.equals((Object)point1));
      assertFalse(point1.equals((Object)point0));
      assertFalse(point1.equals((Object)point2));
      assertFalse(point2.equals((Object)point1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, point0.y);
      assertEquals(1, point0.x);
      assertEquals(10, point1.x);
      assertEquals(907, point1.y);
      assertEquals(0, point2.y);
      assertEquals(1, point2.x);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertTrue(logAxis0.isVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(22, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(3679713.910082792, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals((-2070.3033555624), affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1777.378614682868, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(10.0, point1.getX(), 0.01);
      assertEquals(907.0, point1.getY(), 0.01);
      assertEquals(1.0, point2.getX(), 0.01);
      assertEquals(0.0, point2.getY(), 0.01);
      assertNotSame(point0, point1);
      assertSame(point0, point2);
      assertNotSame(point1, point0);
      assertNotSame(point1, point2);
      assertNotSame(point2, point1);
      assertSame(point2, point0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(759);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleEdge0);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1852, 71, millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      PeriodAxis periodAxis0 = new PeriodAxis("d&i4>I'M0pj?~gF~", millisecond0, millisecond0, simpleTimeZone0, locale0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertNotNull(standardXYItemRenderer0);
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      
      periodAxis0.setTickLabelInsets(xYPlot1.DEFAULT_INSETS);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      AxisLocation axisLocation0 = xYPlot1.getDomainAxisLocation();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      xYPlot0.setRangeAxisLocation(axisLocation0);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      Color color0 = (Color)xYPlot1.getDomainZeroBaselinePaint();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(color0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      xYPlot0.setRangeZeroBaselinePaint(standardXYItemRenderer0.DEFAULT_PAINT);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(xYPlot0, xYPlot1);
      
      PlotOrientation plotOrientation0 = xYPlot0.getOrientation();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertNotSame(xYPlot0, xYPlot1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryAxis categoryAxis0 = new CategoryAxis("d&i4>I'M0pj?~gF~");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(categoryAxis0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertNotNull(categoryStepRenderer0);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      
      CategoryPlot categoryPlot0 = new CategoryPlot(taskSeriesCollection0, categoryAxis0, periodAxis0, categoryStepRenderer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(categoryPlot0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      
      BasicStroke basicStroke0 = (BasicStroke)categoryPlot0.getRangeZeroBaselineStroke();
      assertTrue(mockDate0.equals((Object)object0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(5, CategoryStepRenderer.STAGGER_WIDTH);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(basicStroke0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01);
      assertNull(categoryAxis0.getLabelToolTip());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(categoryStepRenderer0.getBaseSeriesVisible());
      assertTrue(categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(categoryStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertTrue(categoryStepRenderer0.getStagger());
      assertTrue(categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertNotSame(mockDate0, object0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(xYPlot1.DEFAULT_OUTLINE_STROKE);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isDomainPannable());
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot1.getWeight());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isDomainZoomable());
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(range0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot2);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(chartPanel0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(plotOrientation0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot2.setOrientation(plotOrientation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      boolean boolean0 = combinedRangeXYPlot1.isDomainZoomable();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot1.getAxisOffset();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleInsets0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot2.getRenderer((-1425));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      assertNotNull(color0);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot1.getDomainAxis();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(valueAxis0);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, false, false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertNotNull(chartPanel0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, (-1706), 36L, (-929), 680, 10, 6, false, 3788, 6, 200);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertNotNull(mouseWheelEvent0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, mouseWheelEvent0.getY());
      assertEquals(6, mouseWheelEvent0.getClickCount());
      assertEquals(3788, mouseWheelEvent0.getScrollType());
      assertEquals((-1706), mouseWheelEvent0.getID());
      assertEquals(36L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(6, mouseWheelEvent0.getScrollAmount());
      assertEquals(680, mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-2147483617), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(200, mouseWheelEvent0.getWheelRotation());
      assertEquals(1200, mouseWheelEvent0.getUnitsToScroll());
      
      Point point0 = mouseWheelEvent0.getPoint();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(680, point0.x);
      assertEquals(10, point0.y);
      assertNotNull(point0);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(10, mouseWheelEvent0.getY());
      assertEquals(6, mouseWheelEvent0.getClickCount());
      assertEquals(3788, mouseWheelEvent0.getScrollType());
      assertEquals((-1706), mouseWheelEvent0.getID());
      assertEquals(36L, mouseWheelEvent0.getWhen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(6, mouseWheelEvent0.getScrollAmount());
      assertEquals(680, mouseWheelEvent0.getX());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertFalse(mouseWheelEvent0.isPopupTrigger());
      assertEquals((-2147483617), mouseWheelEvent0.getModifiers());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(200, mouseWheelEvent0.getWheelRotation());
      assertEquals(1200, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(10.0, point0.getY(), 0.01);
      assertEquals(680.0, point0.getX(), 0.01);
      
      JViewport jViewport0 = new JViewport();
      assertNotNull(jViewport0);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      
      Point point1 = jViewport0.getViewPosition();
      assertFalse(point1.equals((Object)point0));
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertNotNull(point1);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertNotSame(point1, point0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 1024);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1024.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo();
      assertTrue(chartRenderingInfo2.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo2.equals((Object)chartRenderingInfo1));
      assertNotNull(chartRenderingInfo2);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) 1.0F, (double) 1.0F, (PlotRenderingInfo) null, (Point2D) point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(seriesRenderingOrder0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(logarithmicAxis0);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int0);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      ModuloAxis moduloAxis0 = new ModuloAxis("vidpAc.", logarithmicAxis0.DEFAULT_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(moduloAxis0);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("vidpAc.", moduloAxis0.getLabel());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setBackgroundImageAlpha(0.0F);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      combinedRangeXYPlot1.setRangeGridlinePaint(waferMapRenderer0.DEFAULT_OUTLINE_PAINT);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(moduloAxis0.DEFAULT_TICK_MARK_STROKE);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals("vidpAc.", moduloAxis0.getLabel());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      Paint paint0 = combinedRangeXYPlot0.getDomainTickBandPaint();
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(paint0);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(logAxis0);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      
      xYStepRenderer0.clearSeriesPaints(false);
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation((-8));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(1.0E-8, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYStepRenderer0.DEFAULT_STROKE, logAxis0.DEFAULT_TICK_MARK_PAINT, basicStroke0, 493.4766F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(759);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(rectangleEdge0);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1852, 71, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Object object0 = mockDate0.clone();
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      PeriodAxis periodAxis0 = new PeriodAxis("d&i4>I'M0pj?~gF~", millisecond0, millisecond0, simpleTimeZone0, locale0);
      assertTrue(mockDate0.equals((Object)object0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(periodAxis0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertNotNull(standardXYItemRenderer0);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, periodAxis0, periodAxis0, standardXYItemRenderer0);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      
      periodAxis0.setTickLabelInsets(xYPlot1.DEFAULT_INSETS);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      AxisLocation axisLocation0 = xYPlot1.getDomainAxisLocation();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      xYPlot0.setRangeAxisLocation(axisLocation0);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      Color color0 = (Color)xYPlot1.getDomainZeroBaselinePaint();
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(xYPlot1.equals((Object)xYPlot0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(color0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(70, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("d&i4>I'M0pj?~gF~", periodAxis0.getLabel());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot1.canSelectByPoint());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getRendererCount());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isNotify());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot1.isSubplot());
      assertTrue(xYPlot1.isOutlineVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isRangePannable());
      assertFalse(xYPlot1.isDomainPannable());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot1.canSelectByRegion());
      assertTrue(xYPlot1.isDomainZoomable());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotSame(mockDate0, object0);
      assertNotSame(xYPlot1, xYPlot0);
      
      xYPlot0.setRangeZeroBaselinePaint(standardXYItemRenderer0.DEFAULT_PAINT);
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertNotSame(xYPlot0, xYPlot1);
      
      PlotOrientation plotOrientation0 = xYPlot0.getOrientation();
      assertFalse(xYPlot0.equals((Object)xYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertNotSame(xYPlot0, xYPlot1);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) dynamicTimeSeriesCollection0;
      objectArray0[2] = (Object) millisecond0;
      objectArray0[3] = (Object) simpleTimeZone0;
      JTree jTree0 = new JTree(objectArray0);
      assertNotNull(jTree0);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertEquals(4, objectArray0.length);
      
      Rectangle rectangle0 = jTree0.getRowBounds(6789);
      assertNull(rectangle0);
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        xYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-2989.9), 5.0E-5);
      assertNotNull(intervalMarker0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(5.0E-5, intervalMarker0.getEndValue(), 0.01);
      assertEquals((-2989.9), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      
      // Undeclared exception!
      try { 
        xYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      boolean boolean0 = xYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      
      xYPlot0.setNoDataMessage("Jess Thrysoee");
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getDomainAxisEdge(2010);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleEdge0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      xYPlot0.clearDomainMarkers(2010);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      
      XYDataset xYDataset0 = xYPlot0.getDataset();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYDataset0);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      
      RectangleEdge rectangleEdge1 = xYPlot0.getRangeAxisEdge(2010);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleEdge1);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(0.0, 10, 0.0, 1.0F);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      xYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("Jess Thrysoee", xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      // Undeclared exception!
      try { 
        xYPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      int int0 = combinedDomainXYPlot0.getWeight();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(759);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleEdge0);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      int int0 = 1852;
      int int1 = 71;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("org.jfree.chart.text.TextBlock");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      boolean boolean0 = xYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      
      RectangleEdge rectangleEdge0 = xYPlot0.getDomainAxisEdge(2010);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleEdge0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      xYPlot0.clearDomainMarkers(2010);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      
      XYDataset xYDataset0 = xYPlot0.getDataset();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(xYDataset0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      int int0 = 669;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 669;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 2.0, "RHz");
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals("RHz", cyclicNumberAxis0.getLabel());
      
      JFreeChart jFreeChart0 = new JFreeChart("RHz", dateAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 10, chartRenderingInfo0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(bufferedImage0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(graphics2D0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, standardEntityCollection0.getEntityCount());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 669.0F, 2.0F, 3336.469F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(669.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3336.469F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(2.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2337.2344970703125, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(4005.468994140625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(669.0, rectangle2D_Float0.getMinY(), 0.01);
      
      Point point0 = new Point();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(669.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3336.469F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(4005.468994140625, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(2.0, rectangle2D_Double0.width, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(1.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(2337.2344970703125, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(4005.468994140625, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(669.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(4005.468994140625, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(2002.7344970703125, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge1.toString());
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      
      // Undeclared exception!
      try { 
        cyclicNumberAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge1, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker0);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) categoryMarker0, (Layer) null, false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      
      combinedRangeXYPlot0.setDomainPannable(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertNotNull(xYItemRendererState0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      assertNotNull(entityCollection0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, entityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, entityCollection0.getEntityCount());
      
      chartRenderingInfo1.setEntityCollection(entityCollection0);
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, entityCollection0.getEntityCount());
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertNotNull(plotRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, entityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      
      combinedRangeXYPlot0.handleClick(3408, 1646, plotRenderingInfo1);
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, entityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainCrosshairPaint();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(color0);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0, color0.getRed());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNotNull(valueMarker0);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation1);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      AxisLocation axisLocation2 = axisLocation0.getOpposite();
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation2);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation2, axisLocation0);
      assertSame(axisLocation2, axisLocation1);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) 500, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker0);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      
      CategoryMarker categoryMarker1 = new CategoryMarker(10);
      assertFalse(categoryMarker1.equals((Object)categoryMarker0));
      assertNotNull(categoryMarker1);
      assertFalse(categoryMarker1.getDrawAsLine());
      assertEquals(1.0F, categoryMarker1.getAlpha(), 0.01F);
      assertNull(categoryMarker1.getLabel());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      
      combinedDomainXYPlot0.setAxisOffset(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(basicStroke0);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(basicStroke0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      assertNotNull(rectangleInsets0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      
      DateAxis dateAxis0 = new DateAxis("8");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(boolean0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(datasetRenderingOrder0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 500;
      doubleArray1[1] = 0.05;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.05;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 10;
      doubleArray3[2] = (double) 10;
      doubleArray3[3] = (double) 1.0F;
      doubleArray3[4] = 1.0E-8;
      doubleArray3[5] = (double) 10;
      doubleArray3[6] = (double) 1;
      doubleArray3[7] = (double) 10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 500;
      doubleArray4[1] = (double) 10;
      doubleArray4[2] = 1.0E-8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 3366.97145024;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.05;
      doubleArray6[3] = (double) 2.0F;
      doubleArray6[4] = (double) 1.0F;
      doubleArray6[5] = (double) 2.0F;
      doubleArray6[6] = (double) 10;
      doubleArray6[7] = (double) 0.0F;
      doubleArray6[8] = (double) 10;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 2.0F;
      doubleArray7[1] = 0.05;
      doubleArray7[2] = 3366.97145024;
      doubleArray7[3] = 1.0E-8;
      doubleArray7[4] = 2172.3912;
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 10, 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, doubleArray0.length);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(slidingCategoryDataset0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(multiplePiePlot0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(7, doubleArray0.length);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(7, doubleArray0.length);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(chartPanel0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(7, doubleArray0.length);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea(1852, 2);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(200);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      double double0 = dateAxis0.lengthToJava2D(0.0, rectangle2D_Double0, rectangleEdge0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.getUseBuffer());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-1607), 10);
      assertNotNull(seriesChangeInfo0);
      assertEquals((-1607), seriesChangeInfo0.getIndex1());
      assertEquals(10, seriesChangeInfo0.getIndex2());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent("8", seriesChangeInfo0);
      assertNotNull(seriesChangeEvent0);
      assertEquals((-1607), seriesChangeInfo0.getIndex1());
      assertEquals(10, seriesChangeInfo0.getIndex2());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      xIntervalSeriesCollection0.seriesChanged(seriesChangeEvent0);
      assertEquals((-1607), seriesChangeInfo0.getIndex1());
      assertEquals(10, seriesChangeInfo0.getIndex2());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("SeriesChangeType.ADD_AND_REMOVE", seriesChangeType0.toString());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(xYItemRenderer0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals("8", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(periodAxis0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      byte[] byteArray0 = new byte[0];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      assertNotNull(stackedAreaRenderer0);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultCategoryDataset0, (CategoryAxis) null, periodAxis0, stackedAreaRenderer0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(categoryPlot0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertNotNull(chartPanel0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 10, 10, 10, (-2480), 680, (-1706), true, 759, 10, (-929));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertNotNull(mouseWheelEvent0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10L, mouseWheelEvent0.getWhen());
      assertEquals(10, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(759, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2480), mouseWheelEvent0.getX());
      assertEquals((-9290), mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-929), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(680, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(10, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(10, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-1706), mouseWheelEvent0.getClickCount());
      
      Point point0 = mouseWheelEvent0.getPoint();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals((-2480), point0.x);
      assertEquals(680, point0.y);
      assertNotNull(point0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10L, mouseWheelEvent0.getWhen());
      assertEquals(10, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(759, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2480), mouseWheelEvent0.getX());
      assertEquals((-9290), mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-929), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(680, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(10, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(10, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-1706), mouseWheelEvent0.getClickCount());
      assertEquals(680.0, point0.getY(), 0.01);
      assertEquals((-2480.0), point0.getX(), 0.01);
      
      JViewport jViewport0 = new JViewport();
      assertNotNull(jViewport0);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      
      Point point1 = jViewport0.getViewPosition();
      assertFalse(point1.equals((Object)point0));
      assertEquals(0, point1.y);
      assertEquals(0, point1.x);
      assertNotNull(point1);
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertFalse(jViewport0.isFocusCycleRoot());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertNotSame(point1, point0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(0.05);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.05, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      combinedRangeXYPlot0.zoomDomainAxes(0.0, 0.0, plotRenderingInfo0, (Point2D) point0);
      assertFalse(point0.equals((Object)point1));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals((-2480), point0.x);
      assertEquals(680, point0.y);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.05, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertTrue(stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisible());
      assertFalse(stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertTrue(stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertFalse(categoryPlot0.isDomainPannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isRangePannable());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10L, mouseWheelEvent0.getWhen());
      assertEquals(10, mouseWheelEvent0.getModifiers());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(759, mouseWheelEvent0.getScrollType());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals((-2480), mouseWheelEvent0.getX());
      assertEquals((-9290), mouseWheelEvent0.getUnitsToScroll());
      assertEquals((-929), mouseWheelEvent0.getWheelRotation());
      assertFalse(mouseWheelEvent0.isMetaDown());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertEquals(680, mouseWheelEvent0.getY());
      assertEquals(0, mouseWheelEvent0.getYOnScreen());
      assertEquals(10, mouseWheelEvent0.getScrollAmount());
      assertFalse(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(0, mouseWheelEvent0.getXOnScreen());
      assertFalse(mouseWheelEvent0.isAltGraphDown());
      assertEquals(10, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals((-1706), mouseWheelEvent0.getClickCount());
      assertEquals(680.0, point0.getY(), 0.01);
      assertEquals((-2480.0), point0.getX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Week week0 = new Week(2025, 2025);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2025, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-23), week0.getWeek());
      assertEquals(107302L, week0.getSerialIndex());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(categoryMarker0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2025, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-23), week0.getWeek());
      assertEquals(107302L, week0.getSerialIndex());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(2025, 71);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(logarithmicAxis0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(datasetRenderingOrder0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleInsets0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(71);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      Color color0 = Color.WHITE;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.rendererChanged((RendererChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logarithmicAxis0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(datasetRenderingOrder0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleInsets0);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRenderer(1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20000.0, 2000.0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(axisChangeEvent0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNull(jFreeChart0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(periodAxis0);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals("", periodAxis0.getLabel());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertNotNull(cyclicXYItemRenderer0);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      combinedRangeXYPlot0.setRenderer(1920, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1921, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 2.0F, true);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1921, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(2.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(plotOrientation0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1921, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(2.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint((-929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-929) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertNotNull(cyclicXYItemRenderer0);
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      
      combinedRangeXYPlot0.setRangeCrosshairValue((-1.0), false);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      Paint paint0 = xYPlot0.getQuadrantPaint(2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(paint0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -246 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      
      DateAxis dateAxis0 = new DateAxis("8");
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("8", dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5, valueAxisArray0.length);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotNull(axisLocation1);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((-387), axisLocation1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(10, 10);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vidpAc.");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertNotNull(logarithmicAxis0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(multiplePiePlot0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(renderingHints0);
      assertTrue(multiplePiePlot0.isOutlineVisible());
      assertFalse(multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot0.isNotify());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(1981);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(1, axisLocation0, false);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean1 = combinedRangeXYPlot0.isDomainPannable();
      assertFalse(boolean1 == boolean0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean1);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals("vidpAc.", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(periodAxis0);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation1);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(generalPath0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, generalPath0.getWindingRule());
      
      generalPath0.lineTo((double) 2.0F, 0.0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, generalPath0.getWindingRule());
      
      Point2D.Double[] point2D_DoubleArray0 = new Point2D.Double[0];
      JList<Point2D.Double> jList0 = new JList<Point2D.Double>(point2D_DoubleArray0);
      assertNotNull(jList0);
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0, point2D_DoubleArray0.length);
      
      Rectangle rectangle0 = jList0.getCellBounds(10, 500);
      assertNull(rectangle0);
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0, point2D_DoubleArray0.length);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertNotNull(chartPanel0);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.isRangeZoomable());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.04);
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.04, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      
      intervalMarker0.setPaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.04, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      xYPlot0.addRangeMarker(8, (Marker) intervalMarker0, layer0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.04, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Null 'marker' argument.");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(numberAxis3D0);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'marker' argument.", numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isInverted());
      
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Null 'marker' argument.";
      stringArray0[1] = "Null 'marker' argument.";
      stringArray0[2] = "Null 'marker' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("I}=doH^In4)`9pan&-@", stringArray0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(symbolAxis0);
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelToolTip());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertEquals("I}=doH^In4)`9pan&-@", symbolAxis0.getLabel());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertFalse(symbolAxis0.isInverted());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAutoRange());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertEquals(3, stringArray0.length);
      
      valueAxisArray0[2] = (ValueAxis) symbolAxis0;
      LogAxis logAxis0 = new LogAxis("Null 'marker' argument.");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals("Null 'marker' argument.", logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      
      valueAxisArray0[3] = (ValueAxis) logAxis0;
      LogAxis logAxis1 = new LogAxis("'");
      assertFalse(logAxis1.equals((Object)logAxis0));
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis1);
      assertTrue(logAxis1.isVisible());
      assertEquals(0.05, logAxis1.getUpperMargin(), 0.01);
      assertNull(logAxis1.getLabelToolTip());
      assertEquals(0.0F, logAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis1.getMinorTickCount());
      assertEquals(0.0, logAxis1.getFixedDimension(), 0.01);
      assertTrue(logAxis1.isAutoTickUnitSelection());
      assertEquals("'", logAxis1.getLabel());
      assertEquals(1.0E-100, logAxis1.getSmallestValue(), 0.01);
      assertFalse(logAxis1.isMinorTickMarksVisible());
      assertTrue(logAxis1.isAxisLineVisible());
      assertEquals(1.0, logAxis1.getUpperBound(), 0.01);
      assertTrue(logAxis1.isTickLabelsVisible());
      assertEquals(0.0, logAxis1.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, logAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis1.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis1.isTickMarksVisible());
      assertFalse(logAxis1.isInverted());
      assertEquals(0.0, logAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis1.getLowerMargin(), 0.01);
      assertEquals(10.0, logAxis1.getBase(), 0.01);
      assertFalse(logAxis1.isPositiveArrowVisible());
      assertTrue(logAxis1.isAutoRange());
      assertEquals(0.0, logAxis1.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis1.getLabelURL());
      assertFalse(logAxis1.isVerticalTickLabels());
      
      valueAxisArray0[4] = (ValueAxis) logAxis1;
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("+#m4:k7{T-,Z\"'M,Z:", (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 3214.491299602382);
      assertNotNull(intervalMarker0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(3214.491299602382, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation((-3572));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertNotNull(xYShapeRenderer0);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      PaintScale paintScale0 = xYShapeRenderer0.getPaintScale();
      assertNotNull(paintScale0);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(logAxis0);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, logAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(paintScaleLegend0);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      
      AxisLocation axisLocation1 = paintScaleLegend0.getAxisLocation();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(paintScaleLegend0.visible);
      assertNotNull(axisLocation1);
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation1, axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(paintScaleLegend0.visible);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, paintScale0.getLowerBound(), 0.01);
      assertEquals(1.0, paintScale0.getUpperBound(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation1, axisLocation0);
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.getFixedRangeAxisSpace();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(axisSpace0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(xYShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(color0);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(valueMarker0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation1);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(valueAxis0);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(4, axisLocation0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      periodAxis0.setAutoRange(false);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      
      combinedRangeXYPlot0.setRangeGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getRangeAxisLocation(6);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation1);
      assertFalse(periodAxis0.isAutoRange());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotSame(axisLocation1, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1633.44098), 0.0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(range0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, false);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertNotNull(chartPanel0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertNotNull(plotOrientation0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(768);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot1.getDomainAxisEdge();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(rectangleEdge0);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot2);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      
      double double0 = combinedRangeXYPlot2.getDomainCrosshairValue();
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, double0, 0.01);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedRangeXYPlot2.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("ZOOM_IN_RANGE", logAxis0.DEFAULT_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(moduloAxis0);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(moduloAxis0);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot3);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      
      combinedRangeXYPlot3.setBackgroundImageAlpha(0.0F);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.0F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      
      combinedRangeXYPlot3.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot3));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.0F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot3);
      
      combinedRangeXYPlot3.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.0F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot3.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAutoRange());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.0F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot2.DEFAULT_OUTLINE_PAINT);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot3));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot3));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot3);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(periodAxis0);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setRangeGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(color0);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      xYStepRenderer0.clearSeriesPaints(false);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getFixedLegendItems();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(legendItemCollection0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(combinedDomainCategoryPlot0);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(10);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(axisLocation0);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(true);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotNull(axisLocation1);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      xYPlot0.setDomainAxisLocation(1, axisLocation1, true);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      PlotOrientation plotOrientation0 = xYPlot0.getOrientation();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      RectangleInsets rectangleInsets0 = xYPlot0.getAxisOffset();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(rectangleInsets0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      
      XYItemRenderer xYItemRenderer0 = xYPlot0.getRenderer(500);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(xYItemRenderer0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      xYPlot0.setDomainMinorGridlinePaint(combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      
      int int0 = xYPlot0.getRangeAxisCount();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = categoryMarker0.getLabelOffset();
      assertNotNull(rectangleInsets0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      Paint paint0 = combinedRangeXYPlot0.getQuadrantPaint(0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(paint0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(basicStroke0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 669;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 500;
      floatArray0[5] = 2.0F;
      floatArray0[6] = (float) 500;
      floatArray0[7] = 1.0F;
      combinedRangeXYPlot0.clearDomainMarkers(500);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      floatArray0[8] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 669, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 9 and should be 6690
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(periodAxis0);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6789);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getDomainAxisLocation(0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation1);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation1, axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(1, axisLocation1, true);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation1, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(logAxis0);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1633.44098), 0.0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      
      Range range0 = cyclicNumberAxis0.getRange();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(range0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(".]Mv\"/C~z??UxMue+", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot1, false);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(chartPanel0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertNotNull(plotOrientation0);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(768);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot1.getDomainAxisEdge();
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleEdge0);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot2);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      
      double double0 = combinedRangeXYPlot2.getDomainCrosshairValue();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      combinedRangeXYPlot2.setRangeCrosshairLockedOnData(true);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("ZOOM_IN_RANGE", logAxis0.DEFAULT_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(moduloAxis0);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot(moduloAxis0);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot3);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      
      combinedRangeXYPlot3.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot3));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot3);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      
      combinedRangeXYPlot3.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-1633.44098), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1633.44098), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot3.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot0));
      assertFalse(combinedRangeXYPlot3.equals((Object)combinedRangeXYPlot2));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertNull(logAxis0.getLabel());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals("ZOOM_IN_RANGE", moduloAxis0.getLabel());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertFalse(combinedRangeXYPlot3.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot3.getNoDataMessage());
      assertFalse(combinedRangeXYPlot3.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot3.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot3.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot3.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot3.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot3.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot3.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isDomainZoomable());
      assertTrue(combinedRangeXYPlot3.canSelectByRegion());
      assertTrue(combinedRangeXYPlot3.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot3.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot3.isDomainPannable());
      assertFalse(combinedRangeXYPlot3.isRangePannable());
      assertFalse(combinedRangeXYPlot3.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot3.isSubplot());
      assertFalse(combinedRangeXYPlot3.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getDatasetCount());
      assertTrue(combinedRangeXYPlot3.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot3.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot3.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot3.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot3.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot3.isNotify());
      assertEquals(1, combinedRangeXYPlot3.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot3.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot3.getWeight());
      assertTrue(combinedRangeXYPlot3.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot3.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot3.getRendererCount());
      assertFalse(combinedRangeXYPlot3.isRangeZeroBaselineVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot3, combinedRangeXYPlot2);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation0);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(axisLocation1);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation1.toString());
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotSame(axisLocation0, axisLocation1);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainPannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      
      WaferMapRenderer waferMapRenderer1 = new WaferMapRenderer((Integer) 0, (Integer) 1);
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer1);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      
      Paint paint0 = waferMapRenderer1.getLegendTextPaint(0);
      assertTrue(waferMapRenderer1.equals((Object)waferMapRenderer0));
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(paint0);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(waferMapRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(waferMapRenderer1.getBaseSeriesVisible());
      assertTrue(waferMapRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer1.getDefaultEntityRadius());
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer1.getBaseCreateEntities());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer1.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waferMapRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer1.getAutoPopulateSeriesShape());
      assertNotSame(waferMapRenderer1, waferMapRenderer0);
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertTrue(waferMapRenderer0.equals((Object)waferMapRenderer1));
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNull(drawingSupplier0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertNotSame(waferMapRenderer0, waferMapRenderer1);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-570.01), 4.0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals((-570.01), cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-570.01), cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-2070), (XYItemRenderer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      
      cyclicNumberAxis0.setAutoRangeMinimumSize(Double.NaN);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      
      ValueMarker valueMarker0 = new ValueMarker(500, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(valueMarker0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(500.0, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      
      PeriodAxis periodAxis0 = new PeriodAxis("$8s.- Ny/C3`6;4");
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertNotNull(periodAxis0);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("$8s.- Ny/C3`6;4", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("$8s.- Ny/C3`6;4", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      
      periodAxis0.resizeRange2((-1825.6585182017104), 1.0F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("$8s.- Ny/C3`6;4", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot1.getRangeAxisLocation(500);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals("$8s.- Ny/C3`6;4", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(""));
      
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getNoFallbackControl(list0);
      assertNotNull(resourceBundle_Control0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.contains(""));
      
      List<String> list1 = resourceBundle_Control0.getFormats("");
      assertNotNull(list1);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list0.contains(""));
      assertFalse(list1.contains(""));
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToDomainAxes(759, list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNotNull(valueMarker0);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean1 = combinedDomainXYPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(rectangleInsets0);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(legendItemCollection0);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, 500, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (500) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(286L, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertNotNull(dateAxis0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(collection0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4487.465308815792, 489.766220512999);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(489.766220512999, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      
      JFreeChart jFreeChart0 = new JFreeChart("ItemLabelAnchor.CENTER", combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotNull(jFreeChart0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.clearSubtitles();
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot2);
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      
      cyclicNumberAxis0.setLowerBound(3388.8236);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(3389.8236, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(489.766220512999, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(3388.8236, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(4487.465308815792, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isAutoRange());
      
      cyclicNumberAxis0.setAxisLineVisible(false);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(3389.8236, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(489.766220512999, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(3388.8236, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(4487.465308815792, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isAutoRange());
      
      cyclicNumberAxis0.setUpArrow(combinedRangeXYPlot2.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot2.equals((Object)combinedRangeXYPlot0));
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3389.8236, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(489.766220512999, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(3388.8236, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(4487.465308815792, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertFalse(combinedRangeXYPlot2.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot2.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isNotify());
      assertEquals(0.0, combinedRangeXYPlot2.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot2.canSelectByPoint());
      assertFalse(combinedRangeXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot2.isOutlineVisible());
      assertFalse(combinedRangeXYPlot2.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot2.getWeight());
      assertTrue(combinedRangeXYPlot2.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot2.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot2.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot2.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot2.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot2.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot2.getRendererCount());
      assertFalse(combinedRangeXYPlot2.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot2.isSubplot());
      assertTrue(combinedRangeXYPlot2.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot2.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot2.canSelectByRegion());
      assertFalse(combinedRangeXYPlot2.isRangePannable());
      assertFalse(combinedRangeXYPlot2.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot2.getDatasetCount());
      assertFalse(combinedRangeXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot2.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot2.isDomainZeroBaselineVisible());
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot2, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setForegroundAlpha((-2025.8839F));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals((-2025.8839F), combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(false);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot2));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot2);
      
      cyclicNumberAxis0.setAdvanceLinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot2));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(3389.8236, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(4487.465308815792, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(489.766220512999, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(3388.8236, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(4487.465308815792, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isAutoRange());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals((-2025.8839F), combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot2);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(thermometerPlot0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(numberAxis0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      
      NumberAxis numberAxis1 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(0);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(numberAxis1);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01);
      assertFalse(numberAxis1.isMinorTickMarksVisible());
      assertFalse(numberAxis1.isPositiveArrowVisible());
      assertFalse(numberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertFalse(numberAxis1.isAutoRange());
      assertTrue(numberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis1.isInverted());
      assertNull(numberAxis1.getLabelToolTip());
      assertTrue(numberAxis1.isVisible());
      assertNull(numberAxis1.getLabel());
      assertFalse(numberAxis1.isVerticalTickLabels());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis1.getAutoRangeIncludesZero());
      assertTrue(numberAxis1.isTickLabelsVisible());
      assertFalse(numberAxis1.isAxisLineVisible());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01);
      assertTrue(numberAxis1.isAutoTickUnitSelection());
      assertEquals(100.0, numberAxis1.getUpperBound(), 0.01);
      assertTrue(numberAxis1.isTickMarksVisible());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertSame(numberAxis0, numberAxis1);
      assertSame(numberAxis1, numberAxis0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(valueMarker0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(periodAxis0);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      
      combinedRangeXYPlot0.setRenderer(26, (XYItemRenderer) cyclicXYItemRenderer0, true);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0, false);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(plotOrientation0);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(27, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      Paint paint0 = xYPlot0.getQuadrantPaint(2);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(paint0);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DateAxis dateAxis0 = new DateAxis("Null 'marker' not permitted.", zoneInfo0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertNotNull(stackedXYAreaRenderer0);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(xYPlot0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      
      String string0 = null;
      stackedXYAreaRenderer0.setLegendTextFont(1244, dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      xYPlot0.setNoDataMessage((String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainZeroBaselineStroke();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(basicStroke0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      
      PlotOrientation plotOrientation0 = xYPlot0.getOrientation();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      xYPlot0.setDomainMinorGridlineStroke(stackedXYAreaRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      
      byte[][] byteArray0 = new byte[7][9];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte)57;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)120;
      byteArray2[4] = (byte)64;
      byteArray2[5] = (byte) (-67);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)57;
      byteArray3[1] = (byte)90;
      byteArray3[2] = (byte)90;
      byteArray3[3] = (byte)64;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte)57;
      byteArray5[1] = (byte)57;
      byteArray5[2] = (byte) (-67);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[2];
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray3));
      
      byteArray6[0] = (byte)120;
      byteArray6[1] = (byte)120;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray2));
      
      byteArray7[0] = (byte)12;
      byteArray7[1] = (byte) (-67);
      byteArray7[2] = (byte)120;
      byteArray0[6] = byteArray7;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(3, byteArray0);
      assertNotNull(byteLookupTable0);
      assertEquals(3, byteLookupTable0.getOffset());
      assertEquals(7, byteLookupTable0.getNumComponents());
      assertEquals(7, byteArray0.length);
      
      JFreeChart jFreeChart0 = new JFreeChart("Null 'marker' not permitted.", xYPlot0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(jFreeChart0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(renderingHints0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertNotNull(lookupOp0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals("Null 'marker' not permitted.", dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertTrue(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(3, byteLookupTable0.getOffset());
      assertEquals(7, byteLookupTable0.getNumComponents());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertEquals(7, byteArray0.length);
      
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((byte)120, 759, byteArray1, byteArray5, byteArray5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setRangeGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(axisLocation0);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation0, true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(20000.0, 2000.0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNotNull(axisChangeEvent0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      
      JFreeChart jFreeChart0 = axisChangeEvent0.getChart();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertNull(jFreeChart0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertNotNull(chartPanel0);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea();
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertNotNull(rectangle2D_Double0);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      double double0 = cyclicNumberAxis0.java2DToValue(0.0, rectangle2D_Double0, rectangleEdge0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(candlestickRenderer0);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      
      Color color0 = (Color)candlestickRenderer0.lookupSeriesFillPaint((-1605));
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotNull(color0);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(255, color0.getBlue());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(255, color0.getBlue());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(axisLocation0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.configureDomainAxes();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2000.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(20000.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(20000.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-19999.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      MockDate mockDate0 = new MockDate(500, 300, 300);
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals("Mon Oct 27 00:00:00 GMT 2425", mockDate0.toString());
      assertEquals(14384304000000L, minute0.getFirstMillisecond());
      assertEquals(14384304000000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      
      Second second0 = new Second((-1605), minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Mon Oct 27 00:00:00 GMT 2425", mockDate0.toString());
      assertEquals(14384304000000L, minute0.getFirstMillisecond());
      assertEquals(14384304000000L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-69), second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      PeriodAxis periodAxis0 = null;
      try {
        periodAxis0 = new PeriodAxis("PRINT", second0, minute0, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'timeZone' argument.
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotNull(dateAxis0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(500, layer0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNull(collection0);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      int int0 = 669;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 669;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 500;
      floatArray0[5] = 2.0F;
      floatArray0[6] = (float) 500;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 669, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 9 and should be 6690
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      
      cyclicNumberAxis0.setAutoRangeMinimumSize(Double.NaN);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      Paint paint0 = waferMapRenderer0.getLegendTextPaint(1770);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(paint0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(datasetRenderingOrder0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNull(xYItemRenderer0);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = combinedRangeXYPlot0.isRangeZoomable();
      assertTrue(boolean1 == boolean0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(boolean1);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      LogAxis logAxis0 = new LogAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertNotNull(logAxis0);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      xYStepRenderer0.clearSeriesPaints(false);
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logAxis0, logAxis0, xYStepRenderer0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(xYPlot0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      
      defaultBoxAndWhiskerXYDataset0.removeChangeListener(xYPlot0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getFixedLegendItems();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNull(legendItemCollection0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertTrue(xYStepRenderer0.getBaseSeriesVisible());
      assertFalse(xYStepRenderer0.getUseOutlinePaint());
      assertTrue(xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepRenderer0.getDrawOutlines());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01);
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepRenderer0.getUseFillPaint());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertTrue(xYStepRenderer0.getBaseShapesFilled());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepRenderer0.getBaseLinesVisible());
      assertTrue(xYStepRenderer0.getBaseCreateEntities());
      assertFalse(xYStepRenderer0.getBaseShapesVisible());
      assertTrue(xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(10);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4673.748);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-4672.748), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-4672.748), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-4672.748), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(datasetRenderingOrder0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-4672.748), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(false, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(defaultOHLCDataset0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(xYItemRenderer0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(4673.748, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4673.748, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals((-4672.748), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      cyclicNumberAxis0.setAxisLinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      cyclicNumberAxis0.setTickLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getDomainAxisEdge();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(rectangleEdge0);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(Double.POSITIVE_INFINITY, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      
      cyclicNumberAxis0.setAutoRangeMinimumSize(Double.NaN);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNotNull(waferMapRenderer0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      
      Paint paint0 = waferMapRenderer0.getLegendTextPaint(1770);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(paint0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      
      DrawingSupplier drawingSupplier0 = waferMapRenderer0.getDrawingSupplier();
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertNull(drawingSupplier0);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = combinedRangeXYPlot0.getRendererCount();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertNotNull(cyclicXYItemRenderer0);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      
      combinedRangeXYPlot0.setRenderer(0, (XYItemRenderer) cyclicXYItemRenderer0, false);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getPlotLines());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      
      combinedRangeXYPlot0.setRangeCrosshairValue(628.586, false);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(628.586, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(plotOrientation0);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(628.586, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      assertNotNull(valueMarker0);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 1.0F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(categoryMarker0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("+;", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertNotNull(dateAxis0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      boolean boolean1 = combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, (Layer) null, true);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      assertEquals(1.0, valueMarker0.getValue(), 0.01);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot1);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot1.setDomainPannable(false);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      
      combinedRangeXYPlot1.setRangeCrosshairLockedOnData(true);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("+;", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("+;", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(cyclicNumberAxis0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      
      cyclicNumberAxis0.setAutoRangeMinimumSize(Double.NaN);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertNotNull(waferMapRenderer0);
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      
      combinedRangeXYPlot0.setRangeGridlinePaint(waferMapRenderer0.DEFAULT_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(waferMapRenderer0.DEFAULT_OUTLINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, WaferMapRenderer.POSITION_INDEX);
      assertEquals(1, WaferMapRenderer.VALUE_INDEX);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(Double.NaN, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(waferMapRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(waferMapRenderer0.getBaseItemLabelsVisible());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesShape());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(waferMapRenderer0.getBaseSeriesVisible());
      assertTrue(waferMapRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waferMapRenderer0.getDefaultEntityRadius());
      assertTrue(waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(waferMapRenderer0.getBaseSeriesVisibleInLegend());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      
      JScrollPane jScrollPane0 = new JScrollPane(jSpinner0);
      assertNotNull(jScrollPane0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      
      JViewport jViewport0 = jScrollPane0.getViewport();
      assertNotNull(jViewport0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jViewport0.getIgnoreRepaint());
      assertFalse(jViewport0.isFocusTraversalPolicyProvider());
      assertTrue(jViewport0.getFocusTraversalKeysEnabled());
      assertFalse(jViewport0.isFocusTraversalPolicySet());
      assertFalse(jViewport0.isFocusCycleRoot());
      
      jScrollPane0.firePropertyChange("=mU1kr8", 0.0F, (float) 1770);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        jViewport0.toViewCoordinates((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 3214.491299602382);
      assertNotNull(intervalMarker0);
      assertEquals(3214.491299602382, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(3214.491299602382, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(color0);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(xYPlot0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotNull(valueMarker0);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1947.007956700242, valueMarker0.getValue(), 0.01);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertNotNull(periodAxis0);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(500);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertNotNull(periodAxis0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(6);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotNull(axisLocation0);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation0, true);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertEquals("Null 'axisIndex' argument.", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertNotNull(periodAxis0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelToolTip());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(6789);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (6789) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNotNull(periodAxis0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 10, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotNull(intervalMarker0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getStartValue(), 0.01);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(10.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(2.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainGridlineStroke();
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers((-1023));
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-1425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1425 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(309.0, 309.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = 666;
      combinedRangeXYPlot0.mapDatasetToRangeAxis(500, 666);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2505;
      floatArray0[1] = (float) 2505;
      floatArray0[2] = (float) 2505;
      floatArray0[3] = (float) 666;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2444.85F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 2.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(2505, 10, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 8 and should be 25050
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0, "|Ct|x%Q");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.getRangeAxisLocation();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.getOrientation();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) categoryMarker0;
      objectArray0[2] = (Object) combinedDomainXYPlot0;
      objectArray0[3] = (Object) cyclicNumberAxis0;
      objectArray0[4] = (Object) "|Ct|x%Q";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) categoryMarker0;
      objectArray0[7] = (Object) combinedRangeXYPlot1;
      objectArray0[8] = (Object) combinedRangeXYPlot0;
      JTree jTree0 = new JTree(objectArray0);
      jTree0.getRowBounds(500);
      JTree jTree1 = new JTree(objectArray0);
      jTree1.getRowBounds((-3606));
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2194.65973);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(cyclicNumberAxis0.DEFAULT_TICK_UNIT);
      categoryMarker0.removeChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 500;
      floatArray0[3] = (float) 10;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2.0F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 500, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 6 and should be 5000
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1947.007956700242, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addRangeMarker(0, (Marker) valueMarker0, layer0);
      xYPlot0.getRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.XYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getDomainAxisCount();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.3F);
      combinedRangeXYPlot0.removeRangeMarker(1789, (Marker) categoryMarker0, (Layer) null, false);
      combinedRangeXYPlot0.setDomainPannable(true);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainPannable(false);
      combinedRangeXYPlot0.setDomainAxis(759, (ValueAxis) numberAxis3D0, true);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) numberAxis3D0, false);
      combinedRangeXYPlot0.setRangeCrosshairPaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)3;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "g@iMx]IR.a");
      JToggleButton jToggleButton0 = new JToggleButton(imageIcon0, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jToggleButton0, (byte)92, 16L, (-1370), 500, (byte) (-62), 1337, true, 1337, (-1), (-736));
      Point point0 = mouseWheelEvent0.getPoint();
      combinedRangeXYPlot0.panDomainAxes((-1095.92), plotRenderingInfo0, point0);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'axisIndex' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getQuadrantPaint(0);
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(748.392527);
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.05);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(xYSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYBarRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(0);
      combinedRangeXYPlot0.setDomainAxisLocation(6, axisLocation0, true);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      int int0 = 0;
      numberAxis3D0.resizeRange((-2320.0), 0.08);
      numberAxis3D0.getRange();
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) numberAxis3D0, false);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      JFreeChart jFreeChart0 = new JFreeChart("", stackedXYAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("i+usCw{5:-o!JpbD; ");
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, logarithmicAxis0, logarithmicAxis0, xYBarRenderer0);
      xYPlot0.setRangePannable(false);
      assertFalse(xYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'stroke' argument.");
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, periodAxis0, periodAxis0, xYAreaRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(Double.POSITIVE_INFINITY);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      int int0 = 0;
      int int1 = 1143;
      int int2 = (-1);
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 500;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 10, intArray0, 5, true, 5, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.POSITIVE_INFINITY);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setAxisLinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      cyclicNumberAxis0.setTickLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      cyclicNumberAxis0.getRange();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultIntervalXYDataset0, logAxis0, logAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "b7BNi>,ntYckp";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "b7BNi>,ntYckp";
      stringArray0[1] = "b7BNi>,ntYckp";
      stringArray0[2] = "/^tyIdwWE";
      stringArray0[3] = "b7BNi>,ntYckp";
      SymbolAxis symbolAxis0 = new SymbolAxis("b7BNi>,ntYckp", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      PlotRenderingInfo plotRenderingInfo0 = null;
      JFreeChart jFreeChart0 = new JFreeChart("Z!Lx^6%\"@S`", symbolAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      try { 
        chartPanel0.getMousePosition(true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      jFreeChart0.clearSubtitles();
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      cyclicNumberAxis0.setLowerBound(10);
      cyclicNumberAxis0.setAxisLineVisible(false);
      cyclicNumberAxis0.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      xYPlot0.setForegroundAlpha(1.0F);
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(true);
      cyclicNumberAxis0.setAdvanceLinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        xYPlot0.getDomainAxisForDataset(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 6 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(regularTimePeriod0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator();
      xYShapeRenderer0.setBaseToolTipGenerator((XYToolTipGenerator) standardXYToolTipGenerator0);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, logarithmicAxis0, logarithmicAxis0, xYShapeRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYShapeRenderer", e);
      }
  }
}
