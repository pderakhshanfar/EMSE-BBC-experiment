/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:32:39 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.IllegalComponentStateException;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.TexturePaint;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferFloat;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RasterFormatException;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.border.BevelBorder;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.plaf.multi.MultiSliderUI;
import javax.swing.plaf.multi.MultiTextUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.SymbolicXYItemLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.SeriesChangeEvent;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedDomainXYPlot0.removeDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(478, 478, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(0.05, 10);
      Area area1 = area0.createTransformedArea(affineTransform0);
      Rectangle2D rectangle2D0 = area1.getBounds2D();
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 500;
      numberArray1[1] = (Number) 300;
      float float0 = Plot.DEFAULT_FOREGROUND_ALPHA;
      numberArray1[2] = (Number) 1.0F;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = (Number) 500;
      numberArray2[1] = (Number) 10;
      numberArray2[2] = (Number) 1.0E-8;
      numberArray2[3] = (Number) 0.5F;
      numberArray2[4] = (Number) 1024;
      numberArray2[5] = (Number) 300;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'paint' argument.");
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(true);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, categoryAxis0, numberAxis3D0, stackedBarRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, 1.0F, numberAxis3D0, categoryPlot0.DEFAULT_OUTLINE_STROKE, categoryPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0, "?-tL|=2u@.*RC-;dvb");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 0.0, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Following");
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(10);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 1.0F, logarithmicAxis0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = new BufferedImage(301, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, (double) stackedXYAreaRenderer2_0.ZERO, (double) stackedXYAreaRenderer2_0.ZERO);
      combinedDomainXYPlot0.getRangeAxisLocation();
      ArrayList<Color> arrayList0 = new ArrayList<Color>();
      combinedDomainXYPlot0.drawRangeGridlines((Graphics2D) null, rectangle2D_Double0, arrayList0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      xYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      xYPlot0.getDomainAxisCount();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2127.334625976236));
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberAxis.createStandardTickUnits(locale0);
      xYPlot0.setRangeAxis(1, (ValueAxis) cyclicNumberAxis0, false);
      xYPlot0.setDomainCrosshairValue((double) 1, false);
      xYPlot0.isDomainCrosshairLockedOnData();
      xYPlot0.clone();
      xYPlot0.isDomainMinorGridlinesVisible();
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("G!ucD!$yiRaeKw");
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateRange0);
      valueAxisArray0[3] = (ValueAxis) moduloAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      NumberAxis numberAxis0 = new NumberAxis("");
      valueAxisArray0[5] = (ValueAxis) numberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[8] = (ValueAxis) cyclicNumberAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Following");
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      combinedDomainXYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, (-1.0), logarithmicAxis0, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, color0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Stack<XYSplineRenderer> stack0 = new Stack<XYSplineRenderer>();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot2.setDomainAxis(2134, (ValueAxis) dateAxis0, false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRangeAxisLocation((-2183), (AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.getDomainAxisLocation((-154));
      combinedRangeXYPlot0.datasetChanged((DatasetChangeEvent) null);
      combinedRangeXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(categoryMarker0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      jFreeChart0.handleClick(151, (-330), chartRenderingInfo0);
      multiplePiePlot0.markerChanged(markerChangeEvent0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawBackground(graphics2D0, rectangle2D_Float0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N6Qr+2WP2&bQ*Mu^");
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getPlotType();
      xYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LogAxis logAxis0 = new LogAxis();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, logAxis0, numberAxis3D0, windItemRenderer0);
      logAxis0.setAutoRangeMinimumSize((double) 2.0F);
      xYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.removeRangeMarker(500, (Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(10, 10);
      AffineTransform.getRotateInstance((double) 1.0F);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(1750.109524, (double) 1.0F, (double) 0, 2.0E7);
      DateFormat dateFormat0 = DateFormat.getInstance();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((Format) dateFormat0);
      JScrollPane jScrollPane0 = new JScrollPane(jFormattedTextField0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      Point point1 = jViewport0.toViewCoordinates(point0);
      Point2D point2D0 = affineTransform0.transform((Point2D) point1, (Point2D) point0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, (double) 10, plotRenderingInfo0, point2D0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1332.2835048, 1.0F, "zr#@");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.drawRangeCrosshair((Graphics2D) null, rectangle2D_Double0, plotOrientation0, 0.0, cyclicNumberAxis0, (Stroke) null, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3, 10, 0, 2, 10, 15, false, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JViewport jViewport0 = new JViewport();
      jViewport0.getLocale();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      Point point0 = jViewport0.getViewPosition();
      combinedDomainXYPlot0.zoomDomainAxes((double) 2, plotRenderingInfo0, (Point2D) point0, true);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      // Undeclared exception!
      combinedDomainXYPlot0.setRangeAxisLocation(2143118843, axisLocation1, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xIntervalSeriesCollection0.seriesChanged((SeriesChangeEvent) null);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(0);
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, standardXYItemRenderer0);
      xYPlot0.getFixedDomainAxisSpace();
      xYPlot0.clearSelection();
      xYPlot0.setDataset(0, (XYDataset) xIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.ITALIAN;
      DateAxis dateAxis0 = new DateAxis("org.jfree.chart.plot.XYPlot", zoneInfo0, locale0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("S|9P/^x");
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      dateAxis0.setMinorTickCount(10);
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, dateAxis0, numberAxis3D0, xYStepRenderer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S|9P/^x");
      combinedRangeXYPlot0.add(xYPlot0, 1489);
      combinedRangeXYPlot0.isRangePannable();
      combinedRangeXYPlot0.getRangeGridlineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = null;
      // Undeclared exception!
      jFreeChart0.createBufferedImage(1489, 500, (double) 10, (double) 10, (ChartRenderingInfo) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = 120;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      HistogramDataset histogramDataset0 = new HistogramDataset();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, numberAxis3D0, numberAxis3D0, cyclicXYItemRenderer0);
      xYPlot0.setDataset(4, (XYDataset) histogramDataset0);
      combinedRangeXYPlot0.setDataset(4590, (XYDataset) histogramDataset0);
      xYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-711.8), false);
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, logarithmicAxis0, logarithmicAxis0, clusteredXYBarRenderer0);
      xYPlot0.getRendererForDataset(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NumberAxis numberAxis0 = new NumberAxis("T");
      numberAxis0.setUpperBound((-1.0));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getDomainAxis();
      combinedDomainXYPlot0.setBackgroundImage((Image) null);
      numberAxis0.setAxisLineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.getDomainAxisLocation();
      byte[][] byteArray0 = new byte[9][1];
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte) (-120);
      byteArray1[0] = (byte) (-120);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-120);
      byteArray2[1] = (byte) (-120);
      byteArray2[2] = (byte) (-120);
      byteArray2[3] = (byte) (-120);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-120);
      byteArray4[1] = (byte) (-120);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte) (-120);
      byteArray5[1] = (byte) (-120);
      byteArray5[2] = (byte) (-120);
      byteArray5[3] = (byte) (-120);
      byteArray5[4] = (byte) (-120);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte) (-120);
      byteArray6[1] = (byte)39;
      byte byte1 = (byte)89;
      byteArray6[2] = (byte)89;
      byteArray6[3] = (byte) (-120);
      byteArray6[4] = (byte) (-120);
      byteArray6[5] = (byte) (-120);
      byteArray6[6] = (byte) (-120);
      byteArray6[7] = (byte) (-120);
      byteArray6[8] = (byte) (-120);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byte byte2 = (byte)125;
      byteArray7[0] = (byte)125;
      byteArray7[1] = (byte)8;
      byteArray7[2] = (byte)39;
      byte byte3 = (byte)45;
      byteArray7[3] = (byte)45;
      byteArray7[4] = (byte)39;
      byteArray7[5] = (byte)39;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[5];
      byteArray8[0] = (byte)125;
      byteArray8[1] = (byte)125;
      byteArray8[2] = (byte) (-120);
      byteArray8[3] = (byte)125;
      byteArray8[4] = (byte)125;
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[5];
      byteArray9[0] = (byte)8;
      byte byte4 = (byte)103;
      byteArray9[1] = (byte)103;
      byte byte5 = (byte)4;
      byteArray9[2] = (byte)4;
      byteArray9[3] = (byte)125;
      byteArray9[4] = (byte)8;
      byteArray0[8] = byteArray9;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(500, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart("T", numberAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      AffineTransform affineTransform0 = AffineTransform.getShearInstance((-1.0), 0.0F);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (byte) (-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -120
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JTree jTree0 = new JTree();
      Rectangle rectangle0 = new Rectangle(10, 10, 10, 10);
      Stack<LogAxis> stack0 = new Stack<LogAxis>();
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle0, stack0);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      HashMap<AttributedCharacterIterator.Attribute, ModuloAxis> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, ModuloAxis>();
      Hashtable<AttributedCharacterIterator.Attribute, ModuloAxis> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, ModuloAxis>(hashMap0);
      Font font0 = new Font(hashtable0);
      JFreeChart jFreeChart0 = new JFreeChart("o", font0, combinedDomainXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("OE}\u0002~W7j9:Q`7");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      combinedDomainXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedDomainXYPlot0.clearRangeMarkers(1);
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      jFreeChart0.setTitle("`cnpp9&)|{$S");
      Rectangle2D rectangle2D0 = chartPanel0.getScreenDataArea();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.drawAnnotations(graphics2D0, rectangle2D0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X4f0f9P");
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F, "X4f0f9P");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1.0F, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = new BufferedImage(301, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, (double) stackedXYAreaRenderer2_0.ZERO, (double) stackedXYAreaRenderer2_0.ZERO);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.getRangeAxisLocation();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<CategoryAxis3D> linkedList0 = new LinkedList<CategoryAxis3D>();
      linkedList0.add((CategoryAxis3D) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D_Double0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(23.319226435219, (-491.32836131), "Cjo");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Stroke stroke0 = stackedAreaRenderer0.getBaseStroke();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("<@k)Yc}AG");
      Paint paint0 = subCategoryAxis0.getSubLabelPaint();
      combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 500, symbolAxis0, stroke0, paint0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 3, 23, 15, 28, 10, 11, false, false, false, false, false, false);
      chartPanel0.getAnchor();
      combinedRangeXYPlot0.zoomRangeAxes(90.0, 90.0, plotRenderingInfo0, (Point2D) null);
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 15, 15, 2, (-1), (-1589), true, true, true, false, false, true, true);
      chartPanel0.getVerifyInputWhenFocusTarget();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(657, 2107);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point();
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      AxisSpace axisSpace2 = combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace1);
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace2, false);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.handleClick(500, 500, plotRenderingInfo0);
      combinedRangeXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      JViewport jViewport0 = new JViewport();
      jViewport0.getLocale();
      JViewport jViewport1 = new JViewport();
      Point point0 = jViewport1.getViewPosition();
      combinedDomainXYPlot0.zoomDomainAxes((-893.853105311), plotRenderingInfo0, (Point2D) point0, false);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LinkedList<GradientPaint> linkedList0 = new LinkedList<GradientPaint>();
      combinedDomainXYPlot1.drawRangeGridlines((Graphics2D) null, (Rectangle2D) null, linkedList0);
      JPasswordField jPasswordField0 = new JPasswordField("Null 'offset' argument.", 10);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jPasswordField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getCharacterBounds(1244);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawQuadrants((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      XYPlot xYPlot0 = new XYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-680), 2158);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 1818);
      groupedStackedBarRenderer0.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("v;3'5Wzxy7", (Range) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      xIntervalSeriesCollection0.seriesChanged((SeriesChangeEvent) null);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(2);
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, valueAxis0, valueAxis0, standardXYItemRenderer0);
      xYPlot0.getFixedDomainAxisSpace();
      xYPlot0.getRangeAxisEdge(4021);
      xYPlot0.clearDomainAxes();
      xYPlot0.clearSelection();
      NumberAxis numberAxis0 = new NumberAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(numberAxis0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Number[][] numberArray0 = new Number[4][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      int int0 = Plot.MINIMUM_WIDTH_TO_DRAW;
      numberArray2[0] = (Number) 10;
      numberArray2[1] = (Number) 1;
      numberArray2[2] = (Number) 1.0F;
      numberArray2[3] = xYPlot0.ZERO;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = (Number) 10;
      numberArray3[1] = (Number) 0.0F;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMinRegularValue(8, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(1671, 0.2, (-860.55292393257));
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Point2D point2D0 = affineTransform0.deltaTransform((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes(10.0, plotRenderingInfo0, point2D_Float0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedRangeXYPlot0.zoomRangeAxes(3784.663447055516, plotRenderingInfo0, point2D0, true);
      combinedRangeXYPlot0.getRenderer();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, rectangle2D0, point2D_Float0, plotState0, plotRenderingInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.clearRangeAxes();
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)Plot.DEFAULT_LEGEND_ITEM_CIRCLE;
      Rectangle2D rectangle2D0 = ellipse2D_Double0.getBounds2D();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle2D0, (AxisSpace) null);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      combinedDomainXYPlot0.getDomainAxis();
      combinedDomainXYPlot0.canSelectByRegion();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      XYSeries xYSeries0 = new XYSeries(1.0F, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LogAxis logAxis0 = new LogAxis();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((double) windItemRenderer0.ZERO, false);
      clusteredXYBarRenderer0.setLegendTextFont(10, logAxis0.DEFAULT_AXIS_LABEL_FONT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, (-2054.673));
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, logAxis0, cyclicNumberAxis0, windItemRenderer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      xYPlot0.setBackgroundImageAlignment((-3729));
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) cyclicNumberAxis0);
      xYPlot0.setDataset(500, (XYDataset) xYSeriesCollection0);
      xYPlot0.getDomainAxisForDataset(3);
      xYPlot0.isDomainPannable();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1600, 10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D_Double0, 0.05, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.drawQuadrants(graphics2D0, rectangle2D_Double0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.setPlotArea(rectangle2D_Double0);
      combinedDomainXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 10, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      defaultWindDataset0.addChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.getRendererForDataset(defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.zoomRangeAxes(966.8172, (PlotRenderingInfo) null, (Point2D) null, true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainTickBandPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      LogAxis logAxis0 = new LogAxis();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 1.0F;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, thermometerPlot0.DEFAULT_BACKGROUND_PAINT, thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, true);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, (-952.234107023));
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Null 'paint' argument.", simpleTimeZone0);
      boolean boolean0 = true;
      timeTableXYDataset0.clone();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      xYLineAndShapeRenderer0.setSeriesURLGenerator(500, (XYURLGenerator) null, true);
      XYPlot xYPlot0 = new XYPlot(xYBarDataset0, dateAxis0, dateAxis0, xYLineAndShapeRenderer0);
      xYPlot0.isDomainGridlinesVisible();
      xYPlot0.getSeriesCount();
      int int0 = 488;
      int int1 = 4;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)108;
      byte byte1 = (byte) (-48);
      byteArray0[5] = (byte) (-48);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(488, 4, byteArray0, byteArray0, byteArray0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      Point2D.Float point2D_Float0 = new Point2D.Float(10, 10);
      combinedRangeXYPlot0.zoomRangeAxes(3.0, plotRenderingInfo0, (Point2D) point2D_Float0);
      combinedRangeXYPlot0.getRangeAxisLocation(1576);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2, 0, 1, 2);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle2D_Double0, 1.0F, 1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes(2.1002665654085813, plotRenderingInfo0, point2D0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedRangeXYPlot1.zoomRangeAxes(2.0, plotRenderingInfo0, point2D0, false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5480.879642468232);
      cyclicNumberAxis0.setAutoRangeIncludesZero(true);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      cyclicNumberAxis0.setAdvanceLineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      LogAxis logAxis0 = new LogAxis("");
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      cyclicNumberAxis0.setTickUnit(numberTickUnit0);
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0);
      combinedRangeXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2153.72592);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      NumberAxis numberAxis0 = new NumberAxis("bzr_;mXd`;}RBXPuQU");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis(Integer.MAX_VALUE, (ValueAxis) numberAxis0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JTree jTree0 = new JTree();
      Vector<LogAxis> vector0 = new Vector<LogAxis>();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.removeDomainMarker(10, (Marker) valueMarker0, layer0, true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 0.0F, 2.0F, 4.0F);
      combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, rectangle2D_Float0);
      combinedDomainXYPlot0.getDomainCrosshairPaint();
      combinedDomainXYPlot0.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 1;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisLocation();
      LogAxis logAxis0 = new LogAxis("Null 'orientation' argument.");
      logAxis0.setAutoRangeMinimumSize(1.0);
      ValueMarker valueMarker0 = new ValueMarker(2650.27, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(timePeriodValuesCollection0, logAxis0, logAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panRangeAxes((-708.8703938), plotRenderingInfo0, (Point2D) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(plotRenderingInfo0, false);
      TreeNode treeNode0 = defaultMutableTreeNode0.getRoot();
      JTree jTree0 = new JTree(treeNode0);
      jTree0.getRowBounds(2153);
      combinedRangeXYPlot0.drawZeroRangeBaseline((Graphics2D) null, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      xYPlot0.setNoDataMessage("Null 'marker' not permitted.");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 0);
      xYPlot0.equals(candlestickRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 10);
      xYPlot0.addDomainMarker(2, (Marker) intervalMarker0, layer0, true);
      xYPlot0.getRangeAxisLocation();
      xYPlot0.removeDomainMarker(2, (Marker) intervalMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(candlestickRenderer0.DEFAULT_OUTLINE_STROKE);
      JFreeChart jFreeChart0 = new JFreeChart("F;", xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2, 2, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D_Float0, 10, layer0);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setNoDataMessage("2c@N7}o4s}~Gj^");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 1.0F);
      Object object0 = combinedRangeXYPlot0.clone();
      combinedRangeXYPlot0.equals(object0);
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(2748.2839726, 10);
      combinedRangeXYPlot0.addDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      combinedRangeXYPlot0.getRangeAxisLocation();
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer1);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation0, false);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      CategoryMarker categoryMarker1 = new CategoryMarker(false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(501, 501);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2136.0, 0.0, (-621.295347953), 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot1.getSeriesRenderingOrder();
      Layer layer0 = Layer.BACKGROUND;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeXYPlot1.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, (PlotRenderingInfo) null);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Color color0 = Color.white;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, color0, combinedRangeXYPlot1.DEFAULT_OUTLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers((-720), (Layer) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      String string0 = "";
      // Undeclared exception!
      try { 
        xYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis3D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot1.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 3348, layer0);
      combinedDomainXYPlot1.setDomainCrosshairVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainMarkers((-4407), layer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 10.0, combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) intervalMarker0, layer0, true);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawQuadrants((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, 1.0F, 2347.9, 900.35798726);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("Q(9J%xKdS|I!}CwI");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot1.getDomainAxisIndex(numberAxis3D0);
      combinedRangeXYPlot1.isRangeZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      bufferedImage0.createGraphics();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes((-933.298165156197), plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Area area0 = new Area();
      Rectangle2D rectangle2D0 = area0.getBounds2D();
      Rectangle2D rectangle2D1 = combinedDomainXYPlot0.DEFAULT_INSETS.createInsetRectangle(rectangle2D0);
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D1);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ArrayList<VectorSeriesCollection> arrayList0 = new ArrayList<VectorSeriesCollection>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(86, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(501, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2136.0, (-1184.4723434496411), 1515, 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      jFreeChart0.createBufferedImage(501, 491);
      jFreeChart0.getRenderingHints();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      combinedDomainXYPlot0.getDomainAxisLocation(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2, 0, 1, (-620.0533267));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultMultiValueCategoryDataset0);
      multiplePiePlot0.getDataExtractOrder();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle2D_Double0, 1.0F, 1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.panDomainAxes(3.0, plotRenderingInfo0, point2D0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedRangeXYPlot1.indexOf(defaultXYDataset0);
      combinedRangeXYPlot1.zoomRangeAxes(2.0, plotRenderingInfo0, point2D0, true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Minute minute1 = new Minute();
      PeriodAxis periodAxis0 = new PeriodAxis("<A}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(0, "<A}LV1ze#k<");
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(2, true);
      clusteredXYBarRenderer0.setLegendTextFont(807, valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, valueAxis0, clusteredXYBarRenderer0);
      xYPlot0.setBackgroundImageAlignment((-1005));
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) periodAxis0);
      xYPlot0.setDataset(39, (XYDataset) timeSeriesCollection0);
      xYPlot0.isRangeGridlinesVisible();
      xYPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      int int0 = 19;
      int int1 = (-1618);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedDomainXYPlot0.setForegroundAlpha(19);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(90.0, 2953.4, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2934, dateTickUnitType0, 2934, dateFormat0);
      XYSeries xYSeries0 = new XYSeries(dateTickUnit0, true, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker(2934, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.addRangeMarker(37, (Marker) valueMarker0, (Layer) null, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setNoDataMessage("KDV1=C?Q");
      xYPlot0.clearAnnotations();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 1.0F);
      xYPlot0.equals("KDV1=C?Q");
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 10);
      xYPlot0.addDomainMarker(1030, (Marker) intervalMarker0, layer0, true);
      xYPlot0.getRangeAxisLocation();
      xYPlot0.removeDomainMarker(1030, (Marker) null, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, (-1823.37938255));
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(10, (Marker) intervalMarker0, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, (double) 1.0F, plotRenderingInfo0, (Point2D) null);
      xYPlot0.zoomDomainAxes((-1668.1283237276), plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setNoDataMessage("W");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.clearAnnotations();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      xYPlot1.equals(xYPlot0);
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.5F);
      intervalMarker0.setLabelFont(jFreeChart0.DEFAULT_TITLE_FONT);
      xYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0, false);
      xYPlot0.getRangeAxisLocation();
      xYPlot0.isOutlineVisible();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logAxis0);
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      combinedRangeXYPlot0.handleClick(500, 500, plotRenderingInfo0);
      Point2D point2D0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection1);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo1);
      // Undeclared exception!
      try { 
        plotRenderingInfo1.getSubplotInfo(28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      Layer layer0 = Layer.BACKGROUND;
      candlestickRenderer0.equals(renderingHints0);
      xYPlot1.removeDomainMarker(5, (Marker) null, layer0);
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      jFreeChart0.createBufferedImage(10, 3);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(4085, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 2503;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "/)'h:|On].0";
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null);
      spiderWebPlot0.getBaseSeriesPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDomainAxisEdge((-1315));
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis3D0);
      combinedRangeXYPlot0.isRangeZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 1.0F, xYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = new BufferedImage(301, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, (double) stackedXYAreaRenderer2_0.ZERO, (double) stackedXYAreaRenderer2_0.ZERO);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.getRangeAxisLocation();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<CategoryAxis3D> linkedList0 = new LinkedList<CategoryAxis3D>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D_Double0, linkedList0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      chartRenderingInfo0.getPlotInfo();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      DateAxis dateAxis0 = new DateAxis("J*i-^|");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot2.getDomainAxisIndex(dateAxis0);
      combinedRangeXYPlot0.isRangeZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'offset' argument.", combinedRangeXYPlot2);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 4, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Polygon polygon0 = new Polygon();
      Rectangle2D rectangle2D0 = polygon0.getBounds2D();
      combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle2D0, 1.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      valueAxisArray0[7] = (ValueAxis) dateAxis0;
      valueAxisArray0[8] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.getRenderingHints();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      combinedDomainXYPlot0.zoomDomainAxes(4.0, plotRenderingInfo0, (Point2D) point0, true);
      DateAxis dateAxis0 = new DateAxis("ZOOM_RESET_DOMAIN");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane(500);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("is ");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis3D0);
      combinedRangeXYPlot0.isRangeZoomable();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 10, combinedDomainXYPlot1.DEFAULT_OUTLINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      PeriodAxis periodAxis0 = new PeriodAxis("(!OY&er#&");
      PeriodAxis periodAxis1 = new PeriodAxis("(!OY&er#&");
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeMarkers((Layer) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      boolean boolean0 = false;
      Marker marker0 = null;
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(1, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      xYPlot0.setDomainGridlinePaint(paint0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) null, false);
      combinedRangeXYPlot0.setDomainCrosshairStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedDomainXYPlot0.addDomainMarker(1515, (Marker) categoryMarker0, layer0);
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getLegendTextPaint(1515);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(13, 301, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, 419.1, (double) stackedXYAreaRenderer2_0.ZERO);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render(graphics2D0, rectangle2D_Double0, 15, (PlotRenderingInfo) null, xYCrosshairState0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      JList<TexturePaint> jList0 = new JList<TexturePaint>();
      Point point0 = new Point();
      combinedDomainXYPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) point0, false);
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      combinedDomainXYPlot0.setRangeAxisLocation(13, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      candlestickRenderer0.lookupLegendTextPaint(2112);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 128.42F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(26, 10);
      // Undeclared exception!
      try { 
        bufferedImage0.getSubimage(0, 192, 192, (-413));
        fail("Expecting exception: RasterFormatException");
      
      } catch(RasterFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      xYPlot0.setNoDataMessage("Null 'marker' not permitted.");
      xYPlot0.clearAnnotations();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 0);
      xYPlot0.equals(candlestickRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 10);
      xYPlot0.addDomainMarker(2, (Marker) intervalMarker0, layer0, false);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      xYPlot0.removeDomainMarker(2, (Marker) intervalMarker0, layer0);
      xYPlot0.setDomainAxisLocation(2, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.getRangeAxisLocation();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(13, 301, chartRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, 419.1, (double) stackedXYAreaRenderer2_0.ZERO);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.getRangeAxisLocation();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LinkedList<CategoryAxis3D> linkedList0 = new LinkedList<CategoryAxis3D>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D_Double0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5480.879642468232, 5480.879642468232);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(10);
      standardXYItemRenderer0.getAnnotations();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 4, layer0);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "Null 'marker' argument.", "Null 'marker' argument.");
      standardXYItemRenderer0.setSeriesURLGenerator(2099, (XYURLGenerator) standardXYURLGenerator0);
      standardXYItemRenderer0.setGapThreshold(0.05);
      combinedDomainXYPlot0.setRenderer(2375, (XYItemRenderer) standardXYItemRenderer0);
      combinedDomainXYPlot0.clearSelection();
      int int0 = 2268;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(3, 2268, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 37
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("2/Zh~41;#6Tg],");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      int int0 = 2146634504;
      // Undeclared exception!
      combinedRangeXYPlot0.setDomainAxis(2146634504, (ValueAxis) periodAxis0, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Stack<IntervalMarker> stack0 = new Stack<IntervalMarker>();
      Color color0 = new Color(500);
      IntervalMarker intervalMarker0 = new IntervalMarker((-962.0), 0.05, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, color0, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, 1.0F);
      stack0.add(intervalMarker0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(3191, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MS`w");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xtgMLS}M-8\"|");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      int int0 = (-2496);
      String string0 = "Null 'marker' argument.";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Null 'marker' argument.";
      stringArray0[1] = "Null 'marker' argument.";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "c1Cl~*WW87=G:hp/|2");
      SymbolicXYItemLabelGenerator symbolicXYItemLabelGenerator0 = new SymbolicXYItemLabelGenerator();
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(2111, symbolicXYItemLabelGenerator0, customXYURLGenerator0);
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((-2496), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      categoryMarker0.addChangeListener(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedDomainXYPlot0.addDomainMarker(1515, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer0, true);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 10.0, Double.NaN, 1.0F);
      rectangle2D_Double0.getFrame();
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      xYPlot0.setNoDataMessage("Null 'marker' not permitted.");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) 10);
      xYPlot0.equals(defaultValueDataset0);
      // Undeclared exception!
      try { 
        xYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      xYPlot0.getRangeAxisLocation((-1346));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataRange(dateAxis0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'annotation' argument.", spiderWebPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedRangeXYPlot0.drawZeroDomainBaseline((Graphics2D) null, (Rectangle2D) null);
      combinedRangeXYPlot0.drawQuadrants((Graphics2D) null, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Minute.parseMinute("<A}LV1ze#k<");
      PeriodAxis periodAxis0 = new PeriodAxis("<A}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(1.0F);
      stackedXYBarRenderer0.setLegendTextFont(807, valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, valueAxis0, stackedXYBarRenderer0);
      xYPlot0.setBackgroundImageAlignment((-1005));
      Color color0 = Color.green;
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxis((ValueAxis) periodAxis0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYBarRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      DateAxis dateAxis0 = new DateAxis("Krzysztof Paz");
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      xYPlot0.setDomainAxisLocation(axisLocation0);
      xYPlot0.getRangeCrosshairValue();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 1.0F, renderingHints0);
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, 1.0F);
      Point2D point2D0 = rescaleOp0.getPoint2D(point2D_Float0, point2D_Float0);
      xYPlot0.zoomDomainAxes((-3640.3736), 1.0, plotRenderingInfo0, point2D0);
      xYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      DateAxis dateAxis0 = new DateAxis("Krzysztof Paz");
      byte[][] byteArray0 = new byte[4][1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-12);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte) (-57);
      byteArray1[6] = (byte) (-92);
      byteArray1[7] = (byte)4;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte) (-92);
      byteArray2[2] = (byte) (-57);
      byteArray2[3] = (byte)46;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-12);
      byteArray3[1] = (byte)2;
      byteArray3[2] = (byte)2;
      byteArray3[3] = (byte)6;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)6;
      byteArray4[1] = (byte) (-92);
      byteArray4[2] = (byte) (-57);
      byteArray0[3] = byteArray4;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(15, byteArray0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      jFreeChart0.createBufferedImage((int) (byte)2, 1693);
      int[] intArray0 = new int[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)6, mockRandom0);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((byte)4, 1, intArray0, (byte) (-12), 1693, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      DefaultKeyedValueDataset defaultKeyedValueDataset0 = new DefaultKeyedValueDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYBoxAndWhiskerRenderer0, defaultKeyedValueDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 13, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, 419.1, 2800.060831138107, 629.8280141088017);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render(graphics2D0, rectangle2D_Double0, (-1161), (PlotRenderingInfo) null, xYCrosshairState0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      JList<TexturePaint> jList0 = new JList<TexturePaint>();
      jList0.indexToLocation((-1161));
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(2800.060831138107, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Boolean boolean0 = new Boolean("(!OY&er#&");
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 0.0F, true);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeries timeSeries0 = new TimeSeries(true);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Minute.parseMinute("");
      PeriodAxis periodAxis0 = new PeriodAxis("elg");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      xYBarRenderer0.setLegendTextFont(2, valueAxis0.DEFAULT_TICK_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, periodAxis0, xYBarRenderer0);
      XYPlot xYPlot1 = new XYPlot(timeSeriesCollection0, dateAxis0, valueAxis0, xYBarRenderer0);
      xYPlot1.setBackgroundImageAlignment((-2421));
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) periodAxis0);
      combinedRangeXYPlot0.setDataset(39, (XYDataset) timeSeriesCollection0);
      xYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.getRenderingHints();
      DateAxis dateAxis0 = new DateAxis("Krzysztof Paz");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeAxis(10, (ValueAxis) dateAxis0, false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = DateAxis.DEFAULT_DATE_TICK_UNIT;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1260.6));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      combinedRangeXYPlot1.getRendererForDataset(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(3.0, 3.0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      PeriodAxis periodAxis0 = new PeriodAxis("(!OY&er#&");
      PeriodAxis periodAxis1 = new PeriodAxis("(!OY&er#&");
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      combinedRangeXYPlot0.getRendererForDataset(jDBCXYDataset0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1515, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      intervalMarker0.setOutlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      intervalMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
      JTextPane jTextPane0 = new JTextPane();
      jTextPane0.modelToView(2336);
      Stack<StandardXYItemRenderer> stack0 = new Stack<StandardXYItemRenderer>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataRange(dateAxis0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'annotation' argument.", spiderWebPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      combinedRangeXYPlot1.getRangeAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.clearRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot1.addRangeMarker((Marker) valueMarker0, layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      MockDate mockDate0 = new MockDate(10);
      Second second0 = new Second(mockDate0);
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Locale locale0 = Locale.TAIWAN;
      PeriodAxis periodAxis0 = new PeriodAxis("The number of category keys does not match the number of categories in the data.", regularTimePeriod0, regularTimePeriod0, simpleTimeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(15, axisLocation0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("The number of category keys does not match the number of categories in the data.", (DateFormat) null, (DateFormat) null);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10.0, false, standardXYToolTipGenerator0);
      candlestickRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      double double0 = 439.3;
      IntervalMarker intervalMarker0 = new IntervalMarker(636.395, 439.3);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer();
      CandlestickRenderer candlestickRenderer2 = new CandlestickRenderer((-1682.6562));
      candlestickRenderer2.getBaseStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairStroke(candlestickRenderer0.DEFAULT_STROKE);
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, true, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ComponentColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Hour hour0 = new Hour();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 23, false);
      combinedDomainXYPlot0.getDomainAxisForDataset(0);
      double double0 = (-4503.765937834142);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.isRangeZoomable();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      combinedRangeXYPlot0.getDomainAxisIndex(valueAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      thermometerPlot0.setSubrangePaint(0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X4f0f9P");
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F, "X4f0f9P");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 0.4, cyclicNumberAxis0, cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      bufferedImage0.createGraphics();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      Marker marker0 = null;
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(0, (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      combinedDomainXYPlot0.getRangeAxisLocation();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.handleClick(1016, 1016, plotRenderingInfo0);
      combinedDomainXYPlot0.getDataset(1016);
      int int0 = 4;
      combinedDomainXYPlot0.getRenderer(4);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.getSeriesOutlineStroke(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      xYPlot0.setDomainGridlinePaint(paint0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(1, 2, plotRenderingInfo0);
      xYPlot0.getDataset((-972));
      xYPlot0.getRenderer((-972));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-1600.892), 1.0F, (-1600.892));
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      int int1 = 3;
      AffineTransform affineTransform0 = new AffineTransform();
      JFreeChart jFreeChart0 = new JFreeChart("Z(vcB$0pd&p", clusteredXYBarRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      BufferedImage bufferedImage1 = affineTransformOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      VariableHeightLayoutCache variableHeightLayoutCache0 = new VariableHeightLayoutCache();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "Z(vcB$0pd&p";
      stringArray0[3] = "Z(vcB$0pd&p";
      stringArray0[4] = null;
      stringArray0[5] = "Z(vcB$0pd&p";
      stringArray0[6] = "org.jfree.chart.title.DateTitle";
      stringArray0[7] = "Z(vcB$0pd&p";
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      TreePath treePath0 = new TreePath(symbolAxis0);
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      variableHeightLayoutCache0.getBounds(treePath0, rectangle0);
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      String string0 = "";
      combinedRangeXYPlot0.setNoDataMessage("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ArrayList<VectorSeriesCollection> arrayList0 = new ArrayList<VectorSeriesCollection>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes((-1399), arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      combinedRangeXYPlot0.setDataset(10, (XYDataset) defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.configureRangeAxes();
      AffineTransform.getQuadrantRotateInstance(10, (double) 1.0F, (double) 1.0F);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.setAntiAlias(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 1, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeZeroBaselineVisible(false);
      xYPlot0.getRangeAxisLocation(855);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.equals(standardEntityCollection0);
      xYPlot0.handleClick(855, 3732, plotRenderingInfo0);
      xYPlot0.getDataset(3732);
      xYPlot0.getRenderer(855);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      areaRenderer0.findRangeBounds(defaultCategoryDataset0);
      Font font0 = areaRenderer0.getBaseItemLabelFont();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JFreeChart jFreeChart0 = new JFreeChart("ItemLabelAnchor.INSIDE2", font0, combinedDomainXYPlot0, false);
      combinedDomainXYPlot0.removeChangeListener(jFreeChart0);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      combinedDomainXYPlot0.setBackgroundAlpha(2);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(2, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getWeight();
      combinedDomainXYPlot0.getDomainTickBandPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.01, 4403.0380708637, 2882.158, 10);
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle2D_Double0, 4403.0380708637, 8000000.0);
      Point2D point2D1 = colorConvertOp0.getPoint2D(point2D0, point2D0);
      combinedRangeXYPlot0.panDomainAxes(0.75, (PlotRenderingInfo) null, point2D1);
      NumberAxis numberAxis0 = new NumberAxis();
      combinedRangeXYPlot0.setDomainAxis(13, (ValueAxis) numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("o0{fCs-}8:@)bUduDX", spiderWebPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      xYPlot0.handleClick(3, 1, plotRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.panRangeAxes(15, plotRenderingInfo0, (Point2D) null);
      LogAxis logAxis0 = new LogAxis();
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(2751.190784185, (double) 2.0F, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2888.7503233942502) <= upper (2.1).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYSeries xYSeries0 = new XYSeries(false, false, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LogAxis logAxis0 = new LogAxis();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      DateAxis dateAxis0 = new DateAxis();
      XYPlot xYPlot1 = new XYPlot(xYSeriesCollection0, logAxis0, dateAxis0, candlestickRenderer0);
      xYPlot0.getLegendItems();
      logAxis0.setAutoRangeMinimumSize((double) 500);
      ValueMarker valueMarker0 = new ValueMarker((-32.0), xYPlot1.DEFAULT_CROSSHAIR_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE);
      xYPlot0.removeDomainMarker((Marker) valueMarker0);
      xYPlot0.getRangeCrosshairValue();
      xYPlot1.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'axisIndex' argument.");
      Locale locale0 = Locale.CANADA;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.05);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer2_0);
      xYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) stackedAreaRenderer0.ZERO, 0.0F, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = null;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart("omb|", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 0.0F, plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Icon icon0 = minMaxCategoryRenderer0.getObjectIcon();
      JMenuItem jMenuItem0 = new JMenuItem("Chuanhao Chiu", icon0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[2] = (MenuElement) jPopupMenu0;
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jMenuItem0, 3091, 5879L, 10, 3091, 3091, (-4250), false, menuElementArray0, menuSelectionManager0);
      JFreeChart jFreeChart0 = new JFreeChart("Chuanhao Chiu", combinedDomainXYPlot0);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.0, true);
      xYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "/";
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findDomainBounds((XYDataset) null);
      xYShapeRenderer0.getLegendTextPaint(1240);
      ModuloAxis moduloAxis0 = new ModuloAxis("/", (Range) null);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot((XYDataset) null, moduloAxis0, moduloAxis0, xYShapeRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 0.0, 10, (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getSeriesRenderingOrder();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, (PlotRenderingInfo) null);
      combinedRangeXYPlot1.setDomainZeroBaselinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getDrawingSupplier();
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.configureDomainAxes();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0E-4);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(10.0, false, standardXYToolTipGenerator0);
      candlestickRenderer0.getURLGenerator(3, 10, false);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer(0, (XYItemRenderer) candlestickRenderer0, false);
      ValueMarker valueMarker0 = new ValueMarker(0.0, candlestickRenderer1.DEFAULT_OUTLINE_PAINT, candlestickRenderer1.DEFAULT_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot1.removeRangeMarker(0, (Marker) valueMarker0, layer1, false);
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      EvoSuiteFile evoSuiteFile0 = null;
      xYPlot0.setNoDataMessage("");
      // Undeclared exception!
      try { 
        xYPlot0.calculateAxisSpace((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.AxisSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2705.881F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 3359;
      floatArray0[3] = 2.0F;
      floatArray0[4] = (float) 500;
      floatArray0[5] = 2705.881F;
      floatArray0[6] = 2.0F;
      floatArray0[7] = 333.5F;
      floatArray0[8] = (float) 3359;
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getMaxCharBounds(fontRenderContext0);
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D0, 0.05, symbolAxis0.DEFAULT_AXIS_LINE_STROKE, paint0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("xmZA%9ur+$HIa8Nz`*?");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      PeriodAxis periodAxis1 = new PeriodAxis("WM-k!~H@YmjB");
      valueAxisArray0[1] = (ValueAxis) periodAxis1;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.setRangeTickBandPaint(periodAxis1.DEFAULT_TICK_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) stackedAreaRenderer0.ZERO, 0.0F, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      JInternalFrame jInternalFrame0 = new JInternalFrame(" HZAi*4}l&Bn", false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jInternalFrame0.getDesktopPane();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedDomainXYPlot0.calculateDomainAxisSpace((Graphics2D) null, rectangle0, axisSpace0);
      LogAxis logAxis0 = new LogAxis();
      combinedDomainXYPlot0.getRangeAxisIndex(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(0.05, true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.data.general.DefaultKeyedValues2DDataset");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getIndexOf((XYItemRenderer) null);
      combinedRangeXYPlot0.getFixedLegendItems();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.general.DefaultKeyedValues2DDataset", xYPlot0);
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) numberAxis0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.handleClick(10, 200, plotRenderingInfo0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      Stroke stroke0 = fastScatterPlot0.getDomainGridlineStroke();
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(8.0, 8.0, numberAxis0.DEFAULT_AXIS_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, stroke0, 256.54F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.data.general.DefaultKeyedValues2DDataset");
      numberAxis0.removeChangeListener(xYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.clearRangeMarkers((-568));
      Rectangle rectangle0 = new Rectangle(10, 3638, 500, (-891));
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.getRenderingSource();
      xYPlot0.select(2500.0, 2798.0547502, (Rectangle2D) rectangle0, (RenderingSource) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setDomainCrosshairPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.isDomainZoomable();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.SECOND;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2934, dateTickUnitType0, 2934, dateFormat0);
      XYSeries xYSeries0 = new XYSeries(dateTickUnit0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LogAxis logAxis0 = new LogAxis();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, logAxis0, logAxis0, windItemRenderer0);
      xYPlot0.getLegendItems();
      logAxis0.setAutoRangeMinimumSize((double) 1.0F);
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT, windItemRenderer0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.removeDomainMarker((Marker) valueMarker0);
      xYPlot0.getRangeCrosshairValue();
      xYPlot0.getDomainZeroBaselinePaint();
      xYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.getDomainAxisLocation(10);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeGridlinePaint(stackedAreaRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot1.setDomainAxis(18, (ValueAxis) null, false);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedDomainXYPlot0.getRangeAxisEdge();
      IntervalMarker intervalMarker0 = new IntervalMarker(20, (-3662.6175));
      combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getAxisOffset();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, (-2000.36963384631), 0.0, 200.0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-4.0), true, highLowItemLabelGenerator0);
      candlestickRenderer0.getURLGenerator(121, (-413), true);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(highLowItemLabelGenerator0, (XYURLGenerator) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, symbolAxis0, symbolAxis0, candlestickRenderer0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer((-3816), highLowItemLabelGenerator0, (XYURLGenerator) null);
      xYPlot0.setRenderer(0, (XYItemRenderer) standardXYItemRenderer0, true);
      ValueMarker valueMarker0 = new ValueMarker((-1478.13594306), xYAreaRenderer2_0.DEFAULT_PAINT, standardXYItemRenderer0.DEFAULT_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-3347), (Marker) valueMarker0, layer1, false);
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("FWq>>$-'@5BEKH.7upj");
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      xYPlot0.getDataRange((ValueAxis) null);
      ModuloAxis moduloAxis0 = new ModuloAxis("{0}: ({1}, {2})", numberAxis3D0.DEFAULT_RANGE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.configureDomainAxes();
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = new Locale("FWq>>$-'@5BEKH.7upj");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(1338.747308, false, standardXYToolTipGenerator0);
      boolean boolean0 = true;
      candlestickRenderer0.getURLGenerator(2, (-1), true);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedDomainXYPlot0.setRenderer(948, (XYItemRenderer) null, true);
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(1, candlestickRenderer1.DEFAULT_PAINT, (Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-137), "");
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setLowerMargin(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((-1349), (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.getDatasetCount();
      int int0 = (-2247);
      combinedDomainXYPlot0.addRangeMarker((-2247), (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.getRangeAxisEdge();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot2.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearSelection();
      Color color0 = (Color)WaferMapPlot.DEFAULT_GRIDLINE_PAINT;
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(color0);
      JFreeChart jFreeChart0 = new JFreeChart("", periodAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-4250), 0, 59, (-3098), 72, false, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4341, 1, (-1889.6840085623), 1.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Vector<SystemColor> vector0 = new Vector<SystemColor>();
      combinedDomainXYPlot0.drawDomainGridlines(graphics2D0, defaultCaret0, vector0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.getRangeAxisLocation();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      int int0 = 13;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(13, 301, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(629.8280141088017, 1.0F, 419.1, (double) stackedXYAreaRenderer2_0.ZERO);
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render(graphics2D0, rectangle2D_Double0, 15, (PlotRenderingInfo) null, xYCrosshairState0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      JList<TexturePaint> jList0 = new JList<TexturePaint>();
      jList0.indexToLocation(10);
      combinedDomainXYPlot0.zoomDomainAxes(0.0, (PlotRenderingInfo) null, (Point2D) null, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeMarkers();
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 1339;
      combinedRangeXYPlot0.configureDomainAxes();
      Marker marker0 = null;
      Layer layer0 = Layer.FOREGROUND;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(1339, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(symbolAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(500000.0, false);
      combinedRangeXYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ZQOI7E$");
      NumberAxis numberAxis0 = new NumberAxis("ZQOI7E$");
      numberAxis0.setLowerMargin(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer1 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(0, (Marker) categoryMarker0, layer1);
      xYPlot0.getDatasetCount();
      combinedDomainXYPlot0.addRangeMarker((-413), (Marker) categoryMarker0, layer1, false);
      combinedDomainXYPlot0.getRangeAxisEdge();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -413 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1475.98), 45.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot1.clearRangeMarkers();
      combinedDomainXYPlot1.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.getLegendItems();
      ValueMarker valueMarker0 = new ValueMarker((-997.20010137), combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(10, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4.0, 0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      combinedDomainXYPlot0.axisChanged(axisChangeEvent0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-841.00619), 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      Font.getFont(" $?=e&2", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      intervalMarker0.setLabelFont(cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT);
      intervalMarker0.setAlpha(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-1457), (XYItemRenderer) vectorRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_RIGHT;
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      double double0 = new Integer(10);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0, true);
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.YEAR;
      int int0 = 2934;
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2934, dateTickUnitType0, 2934, dateFormat0);
      XYSeries xYSeries0 = new XYSeries(dateTickUnit0, true, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      LogAxis logAxis0 = new LogAxis();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, logAxis0, logAxis0, windItemRenderer0);
      xYPlot0.getLegendItems();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT, windItemRenderer0.DEFAULT_OUTLINE_STROKE);
      xYPlot0.removeDomainMarker((Marker) valueMarker0);
      byte[] byteArray0 = null;
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable(10, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ByteLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'location' for index 0 not permitted.");
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultWindDataset0, logarithmicAxis0, logarithmicAxis0, xYLineAndShapeRenderer0);
      xYPlot0.clearDomainMarkers();
      xYPlot0.configureDomainAxes();
      xYPlot0.getDomainMinorGridlinePaint();
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(500, 33, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot2.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearSelection();
      Color color0 = (Color)WaferMapPlot.DEFAULT_GRIDLINE_PAINT;
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.getDomainCrosshairPaint();
      combinedDomainXYPlot2.getDomainCrosshairPaint();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot2.zoomRangeAxes(3546.0, plotRenderingInfo0, (Point2D) point2D_Float0, false);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 0.0F, 0, 0);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDomainAxisEdge(40);
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("cI");
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      AxisSpace axisSpace1 = combinedDomainCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Float0, axisSpace0);
      categoryAxis3D0.reserveSpace(graphics2D0, combinedDomainCategoryPlot0, rectangle2D0, rectangleEdge0, axisSpace1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace1, true);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      ValueMarker valueMarker0 = new ValueMarker(153.8554209822054, stackedXYAreaRenderer2_0.DEFAULT_VALUE_LABEL_PAINT, stackedXYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker(3, (Marker) valueMarker0, layer0, true);
      combinedDomainXYPlot0.clearRangeMarkers(3);
      combinedDomainXYPlot0.setDomainAxisLocation(3, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("b;j7@oApumB[OU", true, true, false, true);
      jInternalFrame0.getNormalBounds();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) xYDifferenceRenderer0, true);
      ValueMarker valueMarker0 = new ValueMarker(10.0, symbolAxis0.DEFAULT_AXIS_LINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      symbolAxis0.setAutoRange(false);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(499, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      combinedRangeXYPlot0.setRangeGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      Locale locale0 = Locale.TAIWAN;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(1.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      RectangleInsets rectangleInsets0 = jFreeChart0.getPadding();
      defaultValueDataset0.hasListener(jFreeChart0);
      thermometerPlot0.setPadding(rectangleInsets0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.getRangeAxis();
      combinedRangeXYPlot0.setDomainCrosshairValue(578.6458875, false);
      combinedRangeXYPlot0.clearDomainMarkers(10);
      combinedRangeXYPlot0.getOrientation();
      int int0 = (-1);
      jFreeChart0.getLegend();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1), 0, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) stackedAreaRenderer0.ZERO, 0.0F, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      PeriodAxis periodAxis0 = new PeriodAxis("RVb]^|");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      valueAxisArray0[1] = (ValueAxis) periodAxis0;
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      valueAxisArray0[3] = (ValueAxis) periodAxis0;
      valueAxisArray0[4] = (ValueAxis) periodAxis0;
      valueAxisArray0[5] = (ValueAxis) periodAxis0;
      valueAxisArray0[6] = (ValueAxis) periodAxis0;
      valueAxisArray0[7] = (ValueAxis) periodAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      combinedDomainXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(3320.9390215, Double.POSITIVE_INFINITY);
      Layer layer0 = Layer.BACKGROUND;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot(defaultValueDataset0);
      Range range0 = meterPlot0.getRange();
      ModuloAxis moduloAxis0 = new ModuloAxis("b;j7@oApumB[OU", range0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      combinedDomainXYPlot0.getRangeAxisIndex(symbolAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(moduloAxis0);
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot1);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1400, 10, (double) (-1), 2.0, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D.Float rectangle2D_Float1 = new Rectangle2D.Float(0.9F, 224.8F, 0.0F, 1.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.createIntersection(rectangle2D_Float1);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge(270);
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D0, rectangleEdge0, axisSpace0);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace1, false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      NumberAxis numberAxis0 = new NumberAxis("!H6$&L=e~");
      numberAxis0.setLowerMargin(2.0F);
      periodAxis0.resizeRange(0.0, (-820.7904244));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getRangeAxisIndex(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedDomainXYPlot0.setDomainCrosshairValue(10.0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(periodAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRendererCount();
      combinedRangeXYPlot0.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Hour hour0 = new Hour();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      Minute.parseMinute("<}LV1ze#k<");
      PeriodAxis periodAxis0 = new PeriodAxis("<}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SAVE");
      xYBarRenderer0.setLegendTextFont(807, valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getWeight();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot1.getDomainAxisLocation((-137));
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 10, true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.getLegendItems();
      combinedRangeXYPlot2.setRangeGridlinePaint(valueAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot1.setRangeAxis(2, valueAxis0, false);
      combinedRangeXYPlot1.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.getRenderingHints();
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      combinedRangeXYPlot0.setDomainCrosshairStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("xmZA%9ur+$HIa8Nz`*?");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      PeriodAxis periodAxis1 = new PeriodAxis("WM-k!~H@YmjB");
      valueAxisArray0[1] = (ValueAxis) periodAxis1;
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.clearDomainAxes();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addDomainMarker((-1467), (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("xmZA%9ur+$HIa8Nz`*?");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      PeriodAxis periodAxis1 = new PeriodAxis("WM-k!~H@YmjB");
      valueAxisArray0[1] = (ValueAxis) periodAxis1;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setBackgroundImageAlignment((-2043));
      combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      combinedDomainXYPlot0.indexOf(timePeriodValuesCollection0);
      combinedDomainXYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      PeriodAxis periodAxis0 = new PeriodAxis("xmZA%9ur+$HIa8Nz`*?");
      PeriodAxis periodAxis1 = new PeriodAxis("rkfk_e;_aB\b");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.getRenderingHints();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      xYPlot0.getDomainAxisLocation(2);
      xYPlot0.setDomainCrosshairValue(3.0, true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getLegendItems();
      combinedRangeXYPlot0.setRangeGridlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      combinedRangeXYPlot1.setRangeAxis(2, valueAxis0, true);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(valueAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, (-2311.5675171), combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((-1932735283), (Marker) intervalMarker0, layer0, true);
      combinedDomainXYPlot1.getAnnotations();
      combinedDomainXYPlot1.getQuadrantPaint(3);
      boolean boolean0 = false;
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setInverted(true);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("!H6$&L=e~");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      combinedRangeXYPlot0.setDomainCrosshairStroke(basicStroke0);
      combinedRangeXYPlot0.getDataset(500);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.handleClick((-1211), (-2760), plotRenderingInfo0);
      combinedRangeXYPlot0.getRangeAxisIndex(periodAxis0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(3.0, false, standardXYToolTipGenerator0);
      candlestickRenderer1.getURLGenerator(121, 948, false);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedDomainXYPlot0.setRenderer(2, (XYItemRenderer) xYAreaRenderer2_0, true);
      ValueMarker valueMarker0 = new ValueMarker((double) candlestickRenderer0.ZERO, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, xYAreaRenderer2_0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(0, (Marker) valueMarker0, layer0, true);
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      PeriodAxis periodAxis0 = new PeriodAxis("<A}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      PeriodAxis periodAxis1 = new PeriodAxis("<A}LV1ze#k<");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis1);
      PeriodAxis periodAxis2 = new PeriodAxis("<A}LV1ze#k<");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(periodAxis2);
      combinedRangeXYPlot1.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      combinedRangeXYPlot0.clearRangeAxes();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1643));
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1643), (ValueAxis) cyclicNumberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      PeriodAxis periodAxis0 = new PeriodAxis("xmZA%9ur+$HIa8Nz`*?");
      valueAxisArray0[0] = (ValueAxis) periodAxis0;
      PeriodAxis periodAxis1 = new PeriodAxis("WM-k!~H@YmjB");
      valueAxisArray0[1] = (ValueAxis) periodAxis1;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      combinedDomainXYPlot0.configureDomainAxes();
      Stroke stroke0 = combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 606.671678744, stackedAreaRenderer0.DEFAULT_OUTLINE_PAINT, stroke0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1.0);
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      valueAxisArray0[2] = null;
      valueAxisArray0[3] = null;
      valueAxisArray0[4] = null;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      JFreeChart jFreeChart0 = new JFreeChart("i =n2h`%", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, combinedDomainXYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 49, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.axisChanged(axisChangeEvent0);
      logAxis0.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      PeriodAxis periodAxis0 = new PeriodAxis("Indices must be Integer instances.");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-324), (ValueAxis) logAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDataset(96, (XYDataset) vectorSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxis(500);
      combinedDomainXYPlot0.indexOf(vectorSeriesCollection0);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.isRangeCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0);
      ArrayList<Point2D.Double> arrayList0 = new ArrayList<Point2D.Double>();
      ValueAxis valueAxis0 = null;
      DateFormat dateFormat0 = DateFormat.getTimeInstance(2);
      DateFormat dateFormat1 = MockDateFormat.getTimeInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", dateFormat0, dateFormat1, dateFormat1);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setBackgroundImageAlignment((-3736));
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      combinedRangeCategoryPlot0.getDatasetRenderingOrder();
      xYPlot0.getDomainCrosshairStroke();
      combinedDomainXYPlot0.setWeight(5);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(500000.0);
      int int0 = 36;
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 36
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.axisChanged(axisChangeEvent0);
      logAxis0.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      Font font0 = Font.getFont(" $?=e&2", logAxis0.DEFAULT_TICK_LABEL_FONT);
      intervalMarker0.setLabelFont(font0);
      intervalMarker0.setAlpha(0.0F);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.removeDomainMarker(5, (Marker) intervalMarker0, layer0, true);
      combinedRangeXYPlot0.getAnnotations();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (5) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      statisticalLineAndShapeRenderer0.getErrorIndicatorStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Font font0 = extendedCategoryAxis0.getLabelFont();
      combinedRangeXYPlot0.setNoDataMessageFont(font0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1480.0, 255.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      numberAxis3D0.pan((-1762.9256528463902));
      numberAxis3D0.setMinorTickMarkOutsideLength(0.0F);
      NumberAxis3D numberAxis3D1 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot2.getDomainCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      NumberAxis numberAxis0 = new NumberAxis("");
      NumberAxis numberAxis1 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis1);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.setDomainAxis(10, (ValueAxis) symbolAxis0, true);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker((double) stackedAreaRenderer0.ZERO, 0.0F, stackedAreaRenderer0.DEFAULT_VALUE_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation((-3152));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      Second second0 = new Second();
      PeriodAxis periodAxis0 = new PeriodAxis("", second0, second0);
      second0.getMiddleMillisecond();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearSelection();
      combinedRangeXYPlot1.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?@y(}vjQs");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      Locale locale0 = Locale.ENGLISH;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.isRangeGridlinesVisible();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      Paint paint0 = combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedDomainXYPlot0.clone();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(9.647F, 1.0F, renderingHints0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1.0F);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1280.112);
      candlestickRenderer0.getURLGenerator(10, 2130, true);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer(2130, (XYItemRenderer) candlestickRenderer0, true);
      combinedRangeXYPlot0.setDomainCrosshairVisible(false);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      stackedAreaRenderer0.getDrawingSupplier();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      ArrayList<XYSeriesCollection> arrayList0 = new ArrayList<XYSeriesCollection>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(1486, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      JTree jTree0 = new JTree();
      jTree0.getPathBounds((TreePath) null);
      combinedDomainXYPlot0.drawDomainTickBands((Graphics2D) null, (Rectangle2D) null, stack0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot0.setRangeCrosshairStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot1.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ZQOI7E$");
      NumberAxis numberAxis0 = new NumberAxis("ZQOI7E$");
      numberAxis0.setLowerMargin(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getRangeAxisIndex(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.clearRangeMarkers(1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-982.373125842), 1.0F, 1831.5, 0.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      UnitType unitType0 = UnitType.RELATIVE;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      MultiListUI multiListUI0 = new MultiListUI();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes((Graphics2D) null, rectangle2D0, rectangle2D_Float0, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-982.373125842), 1.0F, 3.0, 0.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYBoxAnnotation0.setURL(") should be in the range 0 to 3.");
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      UnitType unitType0 = UnitType.RELATIVE;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      MultiListUI multiListUI0 = new MultiListUI();
      combinedRangeXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDataset(96, (XYDataset) vectorSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxis(500);
      combinedDomainXYPlot0.indexOf(vectorSeriesCollection0);
      combinedDomainXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(0);
      combinedRangeXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot2.getRangeMarkers(10, layer1);
      combinedDomainXYPlot2.clearDomainAxes();
      combinedDomainXYPlot0.indexOf((XYDataset) null);
      combinedDomainXYPlot2.getPlotType();
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      LinkedList<XYBarRenderer> linkedList0 = new LinkedList<XYBarRenderer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-1), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?X@:74)jds");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisLocation(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      combinedDomainXYPlot0.getPlotType();
      combinedRangeXYPlot0.setDomainTickBandPaint(logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(275, layer0);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
      combinedDomainXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleInsets rectangleInsets0 = categoryAxis0.getTickLabelInsets();
      combinedDomainXYPlot0.setInsets(rectangleInsets0);
      int int0 = (-1069);
      combinedDomainXYPlot0.getRangeAxisLocation((-1069));
      combinedDomainXYPlot0.canSelectByPoint();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jfree.chart.renderer.xy.XYDotRenderer");
      combinedDomainXYPlot0.getRangeGridlineStroke();
      int int1 = (-2102);
      int int2 = 30;
      int int3 = 22;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(30, "org.jfree.chart.entity.TickLabelEntity", 10, 10, 10, 30, (-2102), 25, (-1811), (-1069), 309, 25, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 10
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      LabelBlock labelBlock0 = new LabelBlock("I}T?-<]MNE!+?){exF");
      labelBlock0.getTextAnchor();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      combinedDomainXYPlot0.addRangeMarker(5, (Marker) categoryMarker0, layer0, false);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.getDomainAxisEdge(1);
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(72.58F, 5, 0.0F, 1.0F);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 3;
      Kernel kernel0 = new Kernel(1, 1, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0);
      Point point0 = new Point(2, 2);
      // Undeclared exception!
      try { 
        Raster.createPackedRaster(2621, 1, 6, (int[]) null, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported data type 2621
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, cyclicNumberAxis0);
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      IntervalMarker intervalMarker0 = new IntervalMarker(3.0, 315.6749161173, color0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      combinedRangeXYPlot0.addDomainMarker(1, (Marker) categoryMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer1 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.getRangeMarkers(layer0);
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot3 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot4 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot4.clearSelection();
      combinedRangeXYPlot1.setDomainMinorGridlinePaint(combinedRangeXYPlot3.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot4.setRangeCrosshairStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0F);
      candlestickRenderer0.getURLGenerator(121, 10, false);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer(0, (XYItemRenderer) candlestickRenderer0, false);
      combinedRangeXYPlot0.setDataset((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$|U{lP(mp{";
      stringArray0[1] = "Null 'stroke' argument.";
      stringArray0[2] = "$|U{lP(mp{";
      stringArray0[3] = "Null 'stroke' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("$|U{lP(mp{", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot1.getSeriesCount();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      combinedRangeXYPlot1.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation();
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(10, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedDomainXYPlot0.getDatasetCount();
      combinedDomainXYPlot0.setQuadrantPaint(1, (Paint) null);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(1311, 1707);
      JFreeChart jFreeChart0 = new JFreeChart("9fUN0-I8s]Wy7", combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.getDataset((-932));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairPaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1271.0);
      candlestickRenderer0.getURLGenerator(121, 2130, true);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer(6272, (XYItemRenderer) xYAreaRenderer2_0, false);
      combinedRangeXYPlot0.setDomainCrosshairVisible(true);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      String string0 = "";
      NumberAxis numberAxis0 = new NumberAxis("");
      String string1 = null;
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-1600.892), 1.0F, 1850.7203);
      xYPlot0.setAxisOffset(rectangleInsets0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker(10, (Marker) null, layer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((-982.373125842), 1.0F, 1831.5, 0.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYBoxAnnotation0, false);
      UnitType unitType0 = UnitType.RELATIVE;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(1679);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation1, false);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ck)uIN_ YP0=QdM|t";
      stringArray0[1] = "=83K)u|!H";
      stringArray0[2] = "=83K)u|!H";
      stringArray0[3] = "=83K)u|!H";
      stringArray0[4] = "=83K)u|!H";
      stringArray0[5] = "";
      stringArray0[6] = "TeHIDT?,_%zu";
      stringArray0[7] = "=83K)u|!H";
      stringArray0[8] = "=83K)u|!H";
      SymbolAxis symbolAxis0 = new SymbolAxis("=83K)u|!H", stringArray0);
      combinedRangeXYPlot0.setDomainAxis(2510, (ValueAxis) symbolAxis0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.setRangeAxis(6, (ValueAxis) numberAxis0);
      combinedDomainXYPlot0.canSelectByPoint();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Font font0 = extendedCategoryAxis0.getLabelFont();
      combinedRangeXYPlot0.setNoDataMessageFont(font0);
      combinedRangeXYPlot0.getDomainAxis((-4250));
      combinedRangeXYPlot0.clone();
      Point point0 = new Point((-4250), 500);
      combinedRangeXYPlot0.zoomRangeAxes(2.0, (PlotRenderingInfo) null, (Point2D) point0);
      combinedRangeXYPlot0.configureDomainAxes();
      int int0 = (-2147);
      double double0 = 2884.348318;
      boolean boolean0 = true;
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        DateFormat.getDateTimeInstance(10, (-4250), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -4250
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2558.5530377);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, cyclicNumberAxis0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10);
      cyclicNumberAxis0.equals(cyclicXYItemRenderer0);
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1733.013565), 0.0, paint0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((-2), (Marker) intervalMarker0, layer0);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer1);
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Area area0 = new Area();
      area0.getBounds2D();
      LogAxis logAxis0 = new LogAxis();
      area0.clone();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(4);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis3D0, numberAxis3D0, xYStepRenderer0);
      Graphics2D graphics2D0 = null;
      JFreeChart jFreeChart0 = new JFreeChart("_v(H 0(WEb^umh", xYPlot0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-1600.892), 1.0F, (-1600.892));
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      combinedRangeXYPlot0.mapDatasetToDomainAxis(3, (-31));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-1600.892), 1.0F, 1850.7203);
      xYPlot0.setAxisOffset(rectangleInsets0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      Stroke stroke0 = combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1600.892), 1241.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, stroke0, xYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, 0.0F);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      valueAxisArray0[2] = null;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 1.0F, false);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-3308.004622098), 1.0F, Double.POSITIVE_INFINITY);
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Paint paint0 = categoryAxis3D0.getTickLabelPaint((Comparable) 1.0F);
      categoryMarker0.setPaint(paint0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3816, "ZQOI7E$");
      NumberAxis numberAxis0 = new NumberAxis("e:aI>Uh3,l@q|Gwd#Wy");
      numberAxis0.setLowerMargin(493.8614);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot1.getRangeAxisIndex(numberAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      xYPlot0.setRangeCrosshairVisible(false);
      combinedRangeXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      Locale locale0 = Locale.GERMAN;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0F);
      candlestickRenderer0.getURLGenerator(121, 10, false);
      combinedRangeXYPlot0.setDataset(1, (XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      TimeZone timeZone0 = TimeZone.getTimeZone("9cp.RDh16?F$");
      DateAxis dateAxis0 = new DateAxis("LTm%dyg,m", timeZone0);
      combinedDomainXYPlot0.getDataRange(dateAxis0);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setDataset(1016, (XYDataset) null);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 2.0F, "");
      AffineTransform affineTransform0 = new AffineTransform(0.0F, Float.NEGATIVE_INFINITY, 2.0F, (float) 10, (float) 10, 1.0F);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2031.4583F;
      floatArray0[2] = (float) 10;
      floatArray0[3] = 0.5F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      AffineTransform affineTransform1 = new AffineTransform(floatArray0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform1, true, true);
      Rectangle2D rectangle2D0 = subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      fontRenderContext0.getTransformType();
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, (-816.4), combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2558.5530377);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, cyclicNumberAxis0);
      Paint paint0 = paintScaleLegend0.getBackgroundPaint();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1733.013565), 0.0, paint0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((-2), (Marker) intervalMarker0, layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot1.getRangeMarkers(layer1);
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.clearSelection();
      combinedRangeXYPlot2.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tooltip = ");
      Object[][] objectArray0 = new Object[8][6];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) null;
      objectArray1[1] = (Object) "tooltip = ";
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) "tooltip = ";
      objectArray1[4] = (Object) "tooltip = ";
      objectArray1[5] = (Object) "tooltip = ";
      objectArray1[6] = (Object) "tooltip = ";
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) "tooltip = ";
      Object object0 = new Object();
      objectArray2[1] = object0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[7];
      objectArray3[0] = object0;
      objectArray3[1] = (Object) "tooltip = ";
      objectArray3[2] = object0;
      objectArray3[3] = object0;
      objectArray3[4] = (Object) defaultWindDataset0;
      objectArray3[5] = (Object) "tooltip = ";
      objectArray3[6] = (Object) null;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = object0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = (Object) null;
      objectArray5[1] = (Object) "tooltip = ";
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) defaultWindDataset0;
      objectArray5[4] = object0;
      objectArray5[5] = (Object) defaultWindDataset0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[9];
      objectArray6[0] = (Object) defaultWindDataset0;
      objectArray6[1] = object0;
      objectArray6[2] = (Object) defaultWindDataset0;
      objectArray6[3] = (Object) defaultWindDataset0;
      objectArray6[4] = object0;
      objectArray6[5] = (Object) "tooltip = ";
      objectArray6[6] = (Object) "tooltip = ";
      objectArray6[7] = (Object) defaultWindDataset0;
      objectArray6[8] = (Object) null;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[0];
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[5];
      objectArray8[0] = (Object) "tooltip = ";
      objectArray8[1] = (Object) defaultWindDataset0;
      objectArray8[2] = (Object) defaultWindDataset0;
      objectArray8[3] = (Object) defaultWindDataset0;
      objectArray8[4] = (Object) defaultWindDataset0;
      objectArray0[7] = objectArray8;
      DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1575.0), Double.POSITIVE_INFINITY, "8");
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.setAutoPopulateSeriesOutlinePaint(false);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultWindDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYShapeRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.xy.XYShapeRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MS`w");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xtgMLS}M-8\"|");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(false, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Null 'marker' argument.";
      stringArray0[1] = "Null 'marker' argument.";
      stringArray0[2] = "Null 'marker' argument.";
      stringArray0[3] = "Null 'marker' argument.";
      stringArray0[4] = "Null 'marker' argument.";
      stringArray0[5] = "Null 'marker' argument.";
      stringArray0[6] = "Null 'marker' argument.";
      stringArray0[7] = "Null 'marker' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'marker' argument.", stringArray0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-2496), (ValueAxis) symbolAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-593), 0, (-1171));
      Quarter quarter0 = new Quarter(mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'dividerStroke' argument.", quarter0, quarter0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.clearSelection();
      combinedRangeXYPlot0.getRangeAxis();
      combinedRangeXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Minute.parseMinute("<A}LV1ze#k<");
      PeriodAxis periodAxis0 = new PeriodAxis("<A}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      xYBarRenderer0.setLegendTextFont(807, valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, valueAxis0, xYBarRenderer0);
      xYPlot0.setBackgroundImageAlignment((-1005));
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) periodAxis0);
      xYPlot0.setDataset(39, (XYDataset) timeSeriesCollection0);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(51);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      xYPlot0.setDomainAxisLocation(528, axisLocation1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-459.971), 10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((-1058), (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      LabelBlock labelBlock0 = new LabelBlock("I}T?-<]MNE!+?){exF");
      labelBlock0.getTextAnchor();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      combinedDomainXYPlot0.addRangeMarker(5, (Marker) categoryMarker0, layer0, false);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0);
      xYItemRendererArray0[1] = (XYItemRenderer) candlestickRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      ValueMarker valueMarker0 = new ValueMarker(0.0F);
      valueMarker0.setOutlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      numberAxis0.setLabelAngle(10);
      valueMarker0.equals(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker(500, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      combinedDomainXYPlot0.getIndexOf(deviationRenderer0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      AxisLocation.getOpposite(axisLocation0);
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation1);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0F);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.addRangeMarker(0, (Marker) intervalMarker0, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getDomainMarkers(10, layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      combinedDomainXYPlot3.setRangeAxisLocation(4, axisLocation1, true);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, (-2000.36963384631), 0.0, 200.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYPlot xYPlot0 = new XYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1223.441, 1.0F, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500);
      xYPlot0.getDataRange(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      xYPlot0.setBackgroundPaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0, false);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDataset(96, (XYDataset) vectorSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxis(500);
      numberAxis3D0.setMinorTickMarkOutsideLength(10);
      combinedRangeXYPlot0.getRangeAxisForDataset(81);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, (-855.5286384130841), periodAxis0.DEFAULT_AXIS_LABEL_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_MARK_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE, 0.0F);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(200, (Marker) intervalMarker0, layer0, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainMarkers((-1963), layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(200, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1733.013565), 1.0F, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(10, (Marker) intervalMarker0, layer0);
      Collection collection0 = new ArrayList<Point2D.Double>();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DateFormat dateFormat0 = DateFormat.getTimeInstance(2);
      DateFormat dateFormat1 = MockDateFormat.getTimeInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("", dateFormat0, dateFormat1, dateFormat1);
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(4, standardXYZToolTipGenerator0, (XYURLGenerator) null);
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setBackgroundImageAlignment((-3736));
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeCategoryPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) periodAxis0, false);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(symbolAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(500000.0, false);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3359, 3359, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(symbolAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(500000.0, false);
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(symbolAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.getRangeMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot2.removeRangeMarker((-204), (Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(1.0E-8);
      combinedRangeXYPlot0.getRangeAxis(3732);
      combinedRangeXYPlot0.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart(ringPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 0.0F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2564);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      bufferedImage1.createGraphics();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      combinedRangeXYPlot0.getIndexOf(clusteredXYBarRenderer0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 265, 10, 10, 10, 4, 2564, false, true, false, true, true, false);
      MenuElement[] menuElementArray0 = new MenuElement[6];
      JMenuItem jMenuItem0 = new JMenuItem("PROPERTIES");
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("ZOOM_RESET_BOTH", fileSystemView0);
      MockFile mockFile0 = new MockFile("Null 'location' for index 0 not permitted.", "");
      Icon icon0 = mockJFileChooser0.getIcon(mockFile0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(icon0);
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("ZOOM_DOMAIN_BOTH", true);
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem1;
      JMenu jMenu0 = new JMenu();
      menuElementArray0[3] = (MenuElement) jMenu0;
      JMenuItem jMenuItem1 = new JMenuItem("");
      menuElementArray0[4] = (MenuElement) jMenuItem1;
      JMenuItem jMenuItem2 = new JMenuItem("ZOOM_DOMAIN_BOTH", icon0);
      menuElementArray0[5] = (MenuElement) jMenuItem2;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(chartPanel0, 200, 0L, 4, 54, 3591, 54, true, menuElementArray0, menuSelectionManager0);
      chartPanel0.getPopupLocation(menuDragMouseEvent0);
      combinedDomainXYPlot0.zoomDomainAxes(0.0, (double) 1.0F, plotRenderingInfo1, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      int int0 = 3;
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(0.5F, numberFormat0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setDataset(10, (XYDataset) null);
      combinedRangeXYPlot0.getDomainAxis(0);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 0.0, 3, (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.removeDomainMarker((Marker) intervalMarker0);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot1.getSeriesRenderingOrder();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.addDomainMarker((-588), (Marker) intervalMarker0, layer0, false);
      combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, (PlotRenderingInfo) null);
      double double0 = 1066.555761266;
      double double1 = 1.0;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clone();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      combinedDomainXYPlot0.setBackgroundImageAlignment(500);
      combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainCrosshairValue((-2952.5437946), true);
      combinedDomainXYPlot0.setRangeCrosshairValue(10.0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairValue(169.90404729195);
      NumberAxis numberAxis0 = new NumberAxis("");
      combinedRangeXYPlot0.setDomainAxis(275, (ValueAxis) numberAxis0, true);
      Graphics2D graphics2D0 = null;
      JTextArea jTextArea0 = new JTextArea("RN/xqdTH9HP1", 10, 500);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(10, 17);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-447.58882226519995));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.getRangeAxisLocation((-1));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.equals(combinedRangeXYPlot0);
      combinedRangeXYPlot0.handleClick(2526, 2, plotRenderingInfo0);
      combinedRangeXYPlot0.getDataset((-3796));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (-844), (-2537), 0, (-2537), 10, true, true, true, true, true, true);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) defaultCaret0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      combinedRangeXYPlot0.setDomainGridlineStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Dataset dataset0 = null;
      JFreeChart jFreeChart0 = new JFreeChart(") should be in the range 0 to 3.", combinedDomainXYPlot0);
      int int0 = 481;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(481, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      chartPanel0.getZoomRectangle();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1435), (-1963), 1.0F);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(waferMapDataset0, waferMapDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setFixedDomainAxisSpace((AxisSpace) null, false);
      combinedDomainXYPlot1.isRangeZoomable();
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0F, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.getAnnotations();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getQuadrantPaint(0);
      LogAxis logAxis0 = new LogAxis("4D");
      logAxis0.setInverted(false);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot1);
      combinedRangeXYPlot0.isRangeZoomable();
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.getTextAnchor();
      combinedRangeXYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      Locale locale0 = Locale.GERMAN;
      Locale locale1 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale1);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator(" out of bounds.", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(586.957518339655, false, standardXYToolTipGenerator0);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer();
      candlestickRenderer1.getURLGenerator((-234), 159, false);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-1963), (XYItemRenderer) xYAreaRenderer2_0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1.0F, 10.0F, renderingHints0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(2);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = valueAxis0;
      valueAxisArray0[2] = valueAxis0;
      valueAxisArray0[3] = valueAxis0;
      valueAxisArray0[4] = valueAxis0;
      valueAxisArray0[5] = valueAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String string0 = "b;j7@oApumB[OU";
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      symbolAxis0.getGridBandPaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(259, (Marker) categoryMarker0, layer0, false);
      combinedRangeXYPlot0.getAnnotations();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(1122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1122) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.axisChanged(axisChangeEvent0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setRangeCrosshairPaint(logAxis0.DEFAULT_TICK_LABEL_PAINT);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      spiderWebPlot0.getSeriesOutlineStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getDomainAxisEdge();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getDrawingSupplier();
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.9098186978857368, 10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, stackedAreaRenderer0.DEFAULT_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      valueAxisArray0[2] = null;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      Float float0 = new Float(1.0F);
      IntervalMarker intervalMarker0 = new IntervalMarker(1061.33026, 1061.33026);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRangeAxisEdge();
      NumberAxis numberAxis0 = new NumberAxis("b]9i$");
      numberAxis0.setLowerMargin((-3.5412380440201));
      combinedDomainXYPlot1.getRangeAxisIndex(numberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bi(M.g4M8RC";
      SymbolAxis symbolAxis0 = new SymbolAxis("bi(M.g4M8RC", stringArray0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(symbolAxis0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent("bi(M.g4M8RC", xIntervalSeriesCollection0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.setBackgroundImageAlignment((-2972));
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer(0.0025, true);
      xYItemRendererArray0[0] = (XYItemRenderer) clusteredXYBarRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.2);
      candlestickRenderer0.getSeriesURLGenerator(500);
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer((XYToolTipGenerator) null, (XYURLGenerator) null);
      xYItemRendererArray0[2] = (XYItemRenderer) xYStepRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 500, true);
      xYPlot0.getRangeTickBandPaint();
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation((-2972), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'stroke' argument.");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 1.0F, "Indices must be Integer instances.");
      AffineTransform affineTransform0 = new AffineTransform(Float.POSITIVE_INFINITY, 2834.367F, 1.0F, 1.0F, 0.0F, (-2887.2446F));
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 10;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2705.881F;
      floatArray0[6] = (float) 10;
      floatArray0[7] = (-276.37213F);
      AffineTransform affineTransform1 = new AffineTransform(floatArray0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform1, true, false);
      Rectangle2D rectangle2D0 = subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 1.0, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?X@:74)jds");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getRangeAxisLocation();
      logarithmicAxis0.hasListener(combinedRangeXYPlot0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[7];
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[3] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[5] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[6] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      combinedDomainXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDatasetRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?@y(}vjQs");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      combinedRangeXYPlot0.setRangeGridlineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      double double0 = 2.0;
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2.0, numberFormat0);
      combinedRangeXYPlot0.setDataset(62, (XYDataset) null);
      combinedRangeXYPlot0.getDomainAxis(77);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.getDomainCrosshairStroke();
      double double1 = Double.NaN;
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 0.0, 3, (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0, 1.0F);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(39, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      AxisLocation.getOpposite(axisLocation0);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      IntervalMarker intervalMarker0 = new IntervalMarker(1061.33026, 1061.33026);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getDomainMarkers(10, layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeAxisLocation((-4349), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&e#");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.getRangeCrosshairValue();
      axisLocation0.getOpposite();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation1, false);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisIndex((ValueAxis) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setDomainAxisLocation(2345, axisLocation0, false);
      combinedRangeXYPlot1.getDatasetCount();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint((-2473), combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2473) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      Layer layer0 = Layer.BACKGROUND;
      candlestickRenderer0.equals(renderingHints0);
      xYPlot1.removeDomainMarker(5, (Marker) null, layer0);
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      jFreeChart0.createBufferedImage(10, 3);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeAxisEdge(500);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      double double0 = new Float(1.0F);
      IntervalMarker intervalMarker0 = new IntervalMarker(1061.33026, 1061.33026);
      intervalMarker0.setLabel("");
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, layer0, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRangeAxisEdge();
      NumberAxis numberAxis0 = new NumberAxis("b]9i$");
      numberAxis0.setLowerMargin((-3.5412380440201));
      combinedDomainXYPlot1.getRangeAxisIndex(numberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(symbolAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.equals(paint0);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(0.05, 2.0F, 500, 10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, paint0, symbolAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      combinedRangeXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L11WN|tkzP&5\"-s";
      stringArray0[2] = "L11WN|tkzP&5\"-s";
      stringArray0[3] = "L11WN|tkzP&5\"-s";
      stringArray0[4] = "L11WN|tkzP&5\"-s";
      stringArray0[5] = "L11WN|tkzP&5\"-s";
      stringArray0[6] = "tDG_FB&u^Vr72/FQtJQ";
      stringArray0[7] = "L11WN|tkzP&5\"-s";
      SymbolAxis symbolAxis0 = new SymbolAxis("L11WN|tkzP&5\"-s", stringArray0);
      symbolAxis0.getGridBandPaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-2032), layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("#");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) symbolAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.handleClick(500, 3177, plotRenderingInfo0);
      combinedRangeXYPlot0.panRangeAxes(10.0, plotRenderingInfo0, (Point2D) null);
      logAxis0.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.drawZeroDomainBaseline((Graphics2D) null, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.getDomainAxisEdge();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      stackedAreaRenderer0.getDrawingSupplier();
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(3.0, 10, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, stackedAreaRenderer0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, stackedAreaRenderer0.DEFAULT_STROKE, 0.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      int int0 = (-538);
      Hour hour0 = new Hour();
      Minute minute0 = new Minute((-538), hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Minute.parseMinute("<A}LV1ze#k<");
      PeriodAxis periodAxis0 = new PeriodAxis("<A}LV1ze#k<");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      simpleTimeZone0.clone();
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer();
      xYBarRenderer0.setLegendTextFont(807, valueAxis0.DEFAULT_AXIS_LABEL_FONT);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, periodAxis0, valueAxis0, xYBarRenderer0);
      xYPlot0.setBackgroundImageAlignment((-1005));
      xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.setRangeAxis((ValueAxis) periodAxis0);
      // Undeclared exception!
      try { 
        xYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker(1515, (Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.getDatasetCount();
      combinedDomainXYPlot0.setQuadrantPaint(3, (Paint) null);
      int int0 = 181;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-1077), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.isRangeZoomable();
      combinedDomainXYPlot0.canSelectByRegion();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeAxisLocation();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, (-2000.36963384631), 0.0, 200.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.clearDomainAxes();
      IntervalMarker intervalMarker0 = new IntervalMarker(79, (-1.0), combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      XYPlot xYPlot0 = new XYPlot();
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation("h:x<", Double.POSITIVE_INFINITY, (-1260.8188094835837));
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500);
      xYPlot0.getDataRange(cyclicNumberAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      xYPlot0.setBackgroundPaint(numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      xYPlot0.setDataset(10, (XYDataset) xIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      axisLocation1.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      combinedDomainCategoryPlot0.getDataRange(dateAxis0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      combinedRangeXYPlot0.setDataset(66, (XYDataset) vectorSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainAxis(500);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.isDomainPannable();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(3121.8215F, 10.0F, renderingHints0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot1.getRangeMarkers(layer0);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(2);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(true);
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = valueAxis0;
      valueAxisArray0[1] = valueAxis0;
      valueAxisArray0[2] = valueAxis0;
      valueAxisArray0[3] = valueAxis0;
      valueAxisArray0[4] = valueAxis0;
      valueAxisArray0[5] = valueAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("FWq>>$-'@5BEKH.7upj", numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-3384.2626752429205), false, standardXYToolTipGenerator0);
      candlestickRenderer0.getURLGenerator(121, 10, false);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      combinedRangeXYPlot0.setRenderer(0, (XYItemRenderer) candlestickRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?X@:74)jds");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      logarithmicAxis0.centerRange(1.0F);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      combinedRangeXYPlot0.setDomainPannable(true);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker((-1271.7287027450095), 943.48190556, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 10, (-1600.892), 1.0F, 1850.7203);
      xYPlot0.setAxisOffset(rectangleInsets0);
      CategoryMarker categoryMarker0 = new CategoryMarker(false, xYPlot0.DEFAULT_BACKGROUND_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "ZQOI7E$");
      Locale locale0 = Locale.PRC;
      DateAxis dateAxis0 = new DateAxis("ZQOI7E$", simpleTimeZone0, locale0);
      xYPlot0.setRangeAxis(3117, (ValueAxis) dateAxis0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.ABSOLUTE;
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset((-1669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1669 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue((-5356.0), false);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "~EY?@y(}vjQs";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?@y(}vjQs");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      combinedRangeXYPlot0.removeDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      combinedRangeXYPlot0.getAnnotations();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getQuadrantPaint(2307);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (2307) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      combinedRangeXYPlot0.clearRangeAxes();
      combinedRangeXYPlot0.clearDomainMarkers(500);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) standardXYItemRenderer0;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) deviationRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.setDomainCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot0.getIndexOf(clusteredXYBarRenderer0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeZeroBaselineVisible(false);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(855);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.equals(standardEntityCollection0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      xYPlot0.setDomainZeroBaselineVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.ThermometerPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-2032), layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.getRangeAxisEdge((-2032));
      combinedRangeXYPlot0.clearDomainMarkers((-2032));
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(443.545755941169);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-2032), layer0);
      combinedRangeXYPlot0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.getRangeAxisEdge((-2032));
      combinedRangeXYPlot0.isDomainGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("_W~?");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(logAxis0);
      xYPlot0.axisChanged(axisChangeEvent0);
      int int0 = (-3070);
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0, 1.0E10);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker((-3070), (Marker) intervalMarker0, layer0, true);
      xYPlot0.getAnnotations();
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint((-2929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2929) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (-844), (-2537), 0, (-2537), 10, true, true, true, false, true, true);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) defaultCaret0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      combinedRangeXYPlot0.setDomainGridlineStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1.0F, 1.0F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 10, 10.0, 0.0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) yIntervalRenderer0;
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYErrorRenderer0;
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) xYLineAndShapeRenderer0;
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) standardXYItemRenderer0;
      MeterPlot meterPlot0 = new MeterPlot();
      NumberFormat numberFormat0 = meterPlot0.getTickLabelFormat();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Null 'offset' argument.", numberFormat0, numberFormat0);
      StandardXYItemRenderer standardXYItemRenderer1 = new StandardXYItemRenderer(2, standardXYToolTipGenerator0);
      xYItemRendererArray0[4] = (XYItemRenderer) standardXYItemRenderer1;
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(2195);
      xYItemRendererArray0[5] = (XYItemRenderer) xYAreaRenderer0;
      xYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.clearAnnotations();
      xYPlot0.getDomainAxisLocation(906);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      xYPlot0.draw(graphics2D0, rectangle2D_Double0, point2D_Float0, (PlotState) null, plotRenderingInfo1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      Paint paint0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      bufferedImage0.getAlphaRaster();
      JInternalFrame jInternalFrame0 = new JInternalFrame("");
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis0);
      chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      combinedRangeXYPlot0.getDomainTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, (Dataset) null);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.setBackgroundImageAlignment(1016);
      combinedDomainXYPlot0.getRangeAxisLocation();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      combinedDomainXYPlot0.setDomainCrosshairValue(2276.26, true);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 0.0, 3, (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0E8, 10.0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      xYPlot0.getDataRange(numberAxis3D0);
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = null;
      try {
        combinedRangeXYPlot1 = new CombinedRangeXYPlot(moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("PEV(]a'q");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getOrientation();
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      Millisecond millisecond0 = new Millisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("nL\"rAx2r\rk$O8");
      combinedRangeXYPlot0.getDomainAxisIndex((ValueAxis) null);
      UnitType unitType0 = UnitType.RELATIVE;
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(unitType0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panRangeAxes(293.9466905, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation0, true);
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      combinedRangeXYPlot0.setDataset(66, (XYDataset) vectorSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.addDomainMarker(2827, (Marker) valueMarker0, layer0);
      combinedRangeXYPlot1.removeRangeMarker(1164, (Marker) valueMarker0, layer0);
      combinedRangeXYPlot1.getDomainAxis(500);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint((-844), jFreeChart0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-844) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation((-3167));
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      LegendItemCollection legendItemCollection0 = combinedDomainCategoryPlot0.getLegendItems();
      combinedRangeXYPlot0.setFixedLegendItems(legendItemCollection0);
      combinedRangeXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getRangeGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisEdge(24);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      combinedRangeXYPlot0.configureDomainAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      combinedRangeXYPlot0.getDatasetCount();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker((-1594.2), 1822.78, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker(45, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot1.removeRangeMarker(1385, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot1.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      combinedRangeXYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace0);
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panRangeAxes(293.9466905, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.NaN, 10, "");
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1.0F, (float) 10, 1.0F, 0.0F, 2726.3F);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      numberAxis3D0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      JFreeChart jFreeChart0 = new JFreeChart("", numberAxis3D0.DEFAULT_AXIS_LABEL_FONT, combinedRangeXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 10, 15, 10, 15, 10, true, false, false, true, false, true);
      chartPanel0.getVisibleRect();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", mockSimpleDateFormat0, choiceFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0, false, standardXYToolTipGenerator0);
      candlestickRenderer0.getURLGenerator(0, 10, true);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      xYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, true);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      Millisecond millisecond0 = new Millisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("$!", millisecond0, millisecond0);
      combinedRangeXYPlot0.getDomainAxisIndex(periodAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot1.getIndexOf(clusteredXYBarRenderer0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      UnitType unitType0 = UnitType.RELATIVE;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      UnitType unitType1 = UnitType.RELATIVE;
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(unitType1);
      combinedRangeXYPlot1.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(1.0F);
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      combinedRangeXYPlot0.setDomainGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.configureDomainAxes();
      Paint paint1 = combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO, paint1, cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE, paint0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 813.7F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String[] stringArray0 = new String[7];
      SymbolAxis symbolAxis0 = new SymbolAxis("b;j7@oApumB[OU", stringArray0);
      Paint paint0 = symbolAxis0.getGridBandPaint();
      combinedRangeXYPlot0.setRangeCrosshairPaint(paint0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(symbolAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getPlotType();
      combinedRangeXYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DateAxis dateAxis0 = new DateAxis();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(xIntervalSeriesCollection0, dateAxis0, dateAxis0, stackedXYAreaRenderer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XIntervalSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Area area0 = new Area();
      area0.getBounds2D();
      Layer layer0 = Layer.BACKGROUND;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      combinedRangeXYPlot0.getIndexOf(xYStepAreaRenderer0);
      combinedRangeXYPlot0.getDomainMarkers((-1908874353), layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(855);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 855 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(443.545755941169);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers((-2032), layer0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedRangeXYPlot0.getRangeAxisEdge((-2032));
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      axisLocation1.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      combinedRangeXYPlot0.setDataset(66, (XYDataset) vectorSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeAxis(10);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedRangeXYPlot0.clearDomainAxes();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.rendererChanged((RendererChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("z");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("sBBku2<4_zw", decimalFormatSymbols0);
      LogarithmicAxis logarithmicAxis1 = new LogarithmicAxis("iSLz00;");
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) windItemRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYAreaRenderer0;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) deviationRenderer0;
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(5.0E8);
      xYItemRendererArray0[3] = (XYItemRenderer) xYBarRenderer0;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      xYItemRendererArray0[4] = (XYItemRenderer) cyclicXYItemRenderer0;
      combinedRangeXYPlot1.setRenderers(xYItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      XYPlot xYPlot1 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 0, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0F, 0.0, 3, (-1.0));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0E8, 10.0, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot0.getSeriesRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("~EY?@y(}vjQs");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      combinedRangeXYPlot0.setRangeGridlineStroke(logarithmicAxis0.DEFAULT_TICK_MARK_STROKE);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      NumberTickUnit numberTickUnit0 = new NumberTickUnit(2.0, numberFormat0);
      logarithmicAxis0.setTickUnit(numberTickUnit0);
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation();
      DateAxis dateAxis0 = new DateAxis("org.jfree.data.xy.IntervalXYDelegate");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(152, (Layer) null);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(false);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      xYPlot0.setDomainGridlinePaint(paint0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.removeCategoryLabelToolTip(1.0F);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(false);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(2, axisLocation0, true);
      combinedRangeXYPlot0.isRangeZoomable();
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer();
      waferMapRenderer0.getDrawingSupplier();
      combinedRangeXYPlot0.setDrawingSupplier((DrawingSupplier) null, true);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1698);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      combinedRangeXYPlot0.setDataset(0, (XYDataset) vectorSeriesCollection0);
      ValueMarker valueMarker0 = new ValueMarker(10.0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.removeRangeMarker(1, (Marker) valueMarker0, layer0);
      xYPlot0.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Color color0 = Color.green;
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(3121.8215F, 10.0F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 2.0E8, 1.0F, 0.0);
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
      xYPlot0.setRangePannable(true);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(10);
      combinedRangeXYPlot0.getRangeAxis((-1));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-1491));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 10.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      standardEntityCollection0.equals(intervalMarker0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.equals(axisLocation0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.handleClick((-435), 855, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedRangeXYPlot0.getRangeCrosshairValue();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      Millisecond millisecond0 = new Millisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("", millisecond0, millisecond0);
      combinedRangeXYPlot0.getDomainAxisIndex(periodAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      MultiListUI multiListUI0 = new MultiListUI();
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 1383, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      axisLocation1.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      AffineTransform.getRotateInstance(0.2, (double) 1.0F, (double) 10, 0.05);
      combinedRangeXYPlot0.getFixedLegendItems();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getRangeMarkers(layer0);
      combinedRangeXYPlot1.setRangeAxisLocation(axisLocation1);
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "org.jfree.chart.axis.NumberAxis";
      SerialDate serialDate0 = SerialDate.createInstance(174);
      Day day0 = new Day(serialDate0);
      RegularTimePeriod regularTimePeriod0 = day0.previous();
      regularTimePeriod0.getEnd();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.NumberAxis", regularTimePeriod0, regularTimePeriod0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) null);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(500);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.NumberAxis", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      short[][] shortArray0 = new short[0][0];
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable(0, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of components must  be at least 1
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Area area0 = new Area();
      area0.getBounds2D();
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.clear();
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, 3047, 0, 420, 200, 10, 192, false, false, false, false, false, false);
      chartRenderingInfo0.setRenderingSource(chartPanel1);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      area0.clone();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Color color0 = Color.blue;
      xYPlot0.setDomainGridlinePaint(color0);
      xYPlot0.configureDomainAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeAxisLocation(1);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxisLocation((-3152));
      combinedRangeXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlinePaint();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(3121.8215F, 10.0F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10);
      BufferedImage bufferedImage1 = rescaleOp0.createCompatibleDestImage(bufferedImage0, (ColorModel) null);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 2.0E8, 1.0F, 0.0);
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      AxisLocation.getOpposite(axisLocation1);
      AxisLocation axisLocation2 = axisLocation0.getOpposite();
      axisLocation2.getOpposite();
      combinedRangeXYPlot0.setOutlinePaint(combinedDomainCategoryPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(16, 27, (double) 10, 0.0, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      JInternalFrame jInternalFrame1 = new JInternalFrame("h=R", true, true, true);
      jInternalFrame1.getNormalBounds();
      MultiSliderUI multiSliderUI0 = new MultiSliderUI();
      // Undeclared exception!
      try { 
        multiSliderUI0.getPreferredSize(jInternalFrame1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, numberAxis0, numberAxis0, xYSplineRenderer0);
      xYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(0);
      combinedRangeXYPlot0.setDomainAxisLocation(2538, axisLocation0, false);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis0);
      AffineTransform affineTransform0 = new AffineTransform(0.0F, (float) 0, 1.0F, 0.0F, (float) 2538, 1.0F);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, false);
      Rectangle2D rectangle2D0 = xYSplineRenderer0.DEFAULT_VALUE_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D0, 1300.1547F, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeZeroBaselineVisible(false);
      xYPlot0.getRangeAxisLocation(855);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.equals(standardEntityCollection0);
      xYPlot0.handleClick(855, 3732, plotRenderingInfo0);
      xYPlot0.getDomainZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("(!OY&er#&");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      combinedRangeXYPlot0.isRangeZoomable();
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainAxisLocation((-1), axisLocation2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer((-844));
      combinedRangeXYPlot0.getIndexOf(cyclicXYItemRenderer0);
      combinedRangeXYPlot0.getFixedLegendItems();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.isRangeZoomable();
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(subCategoryAxis0);
      axisChangeEvent0.getChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      GeneralPath generalPath0 = new GeneralPath(rectangle2D0);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle2D_Float0, (RenderingSource) chartPanel0);
      AffineTransform affineTransform0 = new AffineTransform(420, 0.0F, Double.POSITIVE_INFINITY, 0.05, 500, 1.0);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getEndPoint();
      Point2D point2D1 = affineTransform0.transform(point2D0, point2D0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(1199.964334739646, (PlotRenderingInfo) null, point2D1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNotNull(dateAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedRangeXYPlot0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertNotNull(subCategoryAxis0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeZoomable();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(boolean0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      
      int int0 = combinedRangeXYPlot0.getIndexOf(cyclicXYItemRenderer0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals((-1), int0);
      
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getFixedLegendItems();
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(legendItemCollection0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation1);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNotNull(logarithmicAxis0);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      logarithmicAxis0.setNumberFormatOverride(decimalFormat0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      combinedRangeXYPlot0.getDomainAxisIndex(logarithmicAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNotNull(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertNotNull(subCategoryAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      subCategoryAxis0.removeCategoryLabelToolTip(500);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertTrue(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeZoomable();
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      combinedRangeXYPlot0.setDataset(66, (XYDataset) vectorSeriesCollection0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals("h=R", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(67, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(0.0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertNotNull(combinedRangeXYPlot1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      boolean boolean1 = combinedRangeXYPlot1.removeRangeMarker(1164, (Marker) valueMarker0, layer0);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertNotNull(logarithmicAxis0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      MultiListUI multiListUI0 = new MultiListUI();
      assertNotNull(multiListUI0);
      
      logarithmicAxis0.setMinorTickMarkInsideLength((-1870.2668F));
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-1870.2668F), logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int0 = combinedRangeXYPlot0.getDomainAxisIndex(logarithmicAxis0);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-1870.2668F), logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals((-1), int0);
      
      int int1 = combinedRangeXYPlot0.getSeriesCount();
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-1870.2668F), logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(int1 == int0);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, int1);
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-1870.2668F), logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertNotNull(jList0);
      
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals((-1870.2668F), logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double double0 = (-481.1503428176695);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-481.1503428176695));
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals((-481.1503428176695), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertNotNull(candlestickRenderer0);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(1, (Marker) categoryMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertNotNull(candlestickRenderer0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      Color color0 = (Color)candlestickRenderer0.getBaseOutlinePaint();
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      xYPlot0.configureDomainAxes();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      int int0 = combinedRangeXYPlot0.getDatasetCount();
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      
      combinedRangeXYPlot0.setQuadrantPaint(0, candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNotNull(dateAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(subCategoryAxis0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotNull(axisLocation1);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      AxisLocation axisLocation2 = axisLocation1.getOpposite();
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertNotNull(axisLocation2);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeZoomable();
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      
      int int0 = combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals((-1), int0);
      
      AffineTransform affineTransform0 = new AffineTransform(1.0F, (float) 10, (-16.883663F), 5821.5347F, (-2072.6328F), 1300.1547F);
      assertEquals(5821.53466796875, affineTransform0.getScaleY(), 0.01);
      assertEquals(1300.1546630859375, affineTransform0.getTranslateY(), 0.01);
      assertEquals(10.0, affineTransform0.getShearY(), 0.01);
      assertEquals(5990.371299743652, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-16.883663177490234), affineTransform0.getShearX(), 0.01);
      assertEquals((-2072.6328125), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertNotNull(affineTransform0);
      
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, false, true);
      assertEquals(5821.53466796875, affineTransform0.getScaleY(), 0.01);
      assertEquals(1300.1546630859375, affineTransform0.getTranslateY(), 0.01);
      assertEquals(10.0, affineTransform0.getShearY(), 0.01);
      assertEquals(5990.371299743652, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-16.883663177490234), affineTransform0.getShearX(), 0.01);
      assertEquals((-2072.6328125), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertFalse(fontRenderContext0.isAntiAliased());
      assertNotNull(fontRenderContext0);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT.getMaxCharBounds(fontRenderContext0);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(5821.53466796875, affineTransform0.getScaleY(), 0.01);
      assertEquals(1300.1546630859375, affineTransform0.getTranslateY(), 0.01);
      assertEquals(10.0, affineTransform0.getShearY(), 0.01);
      assertEquals(5990.371299743652, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-16.883663177490234), affineTransform0.getShearX(), 0.01);
      assertEquals((-2072.6328125), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertFalse(fontRenderContext0.isAntiAliased());
      assertEquals(15.649731636047363, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.214611053466797), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(31.299463272094727, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.853456497192383, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-4.180577278137207), rectangle2D_Float0.getCenterY(), 0.01);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(31.299463F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214611F), rectangle2D_Float0.y, 0.01F);
      assertEquals(14.068068F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, rectangle2D_Float0, 7.0, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals("h=R", dateAxis0.getLabel());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelURL());
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01);
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01);
      assertEquals("", subCategoryAxis0.getLabel());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertFalse(combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainPannable());
      assertFalse(combinedDomainCategoryPlot0.isDomainZoomable());
      assertTrue(combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.isNotify());
      assertFalse(combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainCategoryPlot0.getRendererCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(5821.53466796875, affineTransform0.getScaleY(), 0.01);
      assertEquals(1300.1546630859375, affineTransform0.getTranslateY(), 0.01);
      assertEquals(10.0, affineTransform0.getShearY(), 0.01);
      assertEquals(5990.371299743652, affineTransform0.getDeterminant(), 0.01);
      assertEquals((-16.883663177490234), affineTransform0.getShearX(), 0.01);
      assertEquals((-2072.6328125), affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertTrue(fontRenderContext0.isTransformed());
      assertFalse(fontRenderContext0.isAntiAliased());
      assertEquals(15.649731636047363, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals((-11.214611053466797), rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(31.299463272094727, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(2.853456497192383, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals((-4.180577278137207), rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.2, CategoryAxis.DEFAULT_CATEGORY_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, CategoryAxis.DEFAULT_AXIS_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(31.299463F, rectangle2D_Float0.width, 0.01F);
      assertEquals((-11.214611F), rectangle2D_Float0.y, 0.01F);
      assertEquals(14.068068F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(candlestickRenderer0);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      Color color0 = (Color)candlestickRenderer0.getBaseOutlinePaint();
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertNotNull(color0);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      xYPlot0.setDomainGridlinePaint(color0);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      xYPlot0.configureDomainAxes();
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(3732);
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      
      xYPlot0.setRangeZeroBaselineVisible(true);
      assertTrue(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      xYPlot0.setParent(combinedDomainXYPlot0);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(10, (-478.8245246702));
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-478.8245246702), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      intervalMarker0.setLabelOffsetType(lengthAdjustmentType0);
      assertEquals(10.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals((-478.8245246702), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker(10, (Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.5E8);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      GeneralPath generalPath0 = new GeneralPath(0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = (-2537);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, (-844), (-2537), 0, (-2537), 10, true, true, true, false, true, true);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) defaultCaret0, (RenderingSource) chartPanel0);
      combinedRangeXYPlot0.zoomDomainAxes(1.0E-8, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-844), (XYDataset) histogramDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      combinedRangeXYPlot0.getDomainAxisIndex(logarithmicAxis0);
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      JList<DeviationRenderer> jList0 = new JList<DeviationRenderer>(stack0);
      // Undeclared exception!
      try { 
        multiListUI0.getCellBounds(jList0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      MultiListUI multiListUI0 = new MultiListUI();
      Stack<DeviationRenderer> stack0 = new Stack<DeviationRenderer>();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisIndex(logarithmicAxis0);
      XYTaskDataset xYTaskDataset0 = null;
      try {
        xYTaskDataset0 = new XYTaskDataset((TaskSeriesCollection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'tasks' argument.
         //
         verifyException("org.jfree.data.gantt.XYTaskDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setRange(Double.NaN, Double.NaN);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      XYPlot xYPlot0 = new XYPlot(histogramDataset0, numberAxis0, numberAxis0, xYSplineRenderer0);
      xYPlot0.setDomainZeroBaselinePaint(xYSplineRenderer0.DEFAULT_PAINT);
      xYPlot0.setOutlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      xYPlot0.setRangeGridlinesVisible(false);
      xYPlot0.getRangeAxisEdge();
      xYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 0, 0.05, (double) 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (500) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      xYPlot0.setDomainGridlinePaint(paint0);
      xYPlot0.configureDomainAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(0, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, candlestickRenderer0.DEFAULT_OUTLINE_PAINT, candlestickRenderer0.DEFAULT_OUTLINE_STROKE, 0);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker(1, (Marker) categoryMarker0, layer0);
      xYPlot0.getDatasetCount();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint(4, candlestickRenderer0.DEFAULT_VALUE_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (4) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("h=R");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedDomainCategoryPlot0.setDomainCrosshairVisible(true);
      axisLocation1.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(500, axisLocation1, true);
      combinedRangeXYPlot0.isRangeZoomable();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0);
      combinedRangeXYPlot0.getIndexOf(cyclicXYItemRenderer0);
      combinedRangeXYPlot0.getFixedLegendItems();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (-2960.2), "");
      cyclicNumberAxis0.setUpperBound(0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      int[] intArray0 = new int[5];
      intArray0[0] = 500;
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 10;
      int int0 = 2762;
      boolean boolean0 = false;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 500, intArray0, 2762, false, 10, 2762);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Area area0 = new Area();
      area0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset(855);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 855 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-3349.6035F), (-674.0606F), (-2164.207F), 351.1F);
      MultiTextUI multiTextUI0 = new MultiTextUI();
      // Undeclared exception!
      try { 
        multiTextUI0.modelToView((JTextComponent) null, 1802);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureRangeAxes();
      double double0 = (-1.0);
      ChartRenderingInfo chartRenderingInfo0 = null;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-593), 0, (-1171));
      Quarter quarter0 = new Quarter(mockDate0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      PeriodAxis periodAxis0 = new PeriodAxis("Null 'dividerStroke' argument.", quarter0, quarter0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getFixedLegendItems();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      xYPlot0.setParent(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      xYPlot0.setRangeZeroBaselineVisible(false);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      ValueMarker valueMarker0 = null;
      try {
        valueMarker0 = new ValueMarker(4472.349317800209, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      double double0 = 566.0977320948092;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(false);
      AffineTransform affineTransform0 = arrowNeedle0.getTransform();
      Font font0 = MeterPlot.DEFAULT_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, combinedRangeXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      combinedRangeXYPlot0.getAnnotations();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 958, 0, 10, 0, 0, 10, true, false, true, true, false, true, false);
      // Undeclared exception!
      try { 
        chartPanel0.getLocationOnScreen();
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8Zw!R\"";
      stringArray0[1] = "`l-o,I[nX%:dT";
      stringArray0[2] = "@<Ipi@]y/";
      stringArray0[3] = "F/<F);'}F9t*i";
      stringArray0[4] = "?";
      stringArray0[5] = "org.jfree.chart.plot.XYPlot";
      stringArray0[6] = "9a2\"D[P|r]p%ncqV#";
      Object[][][] objectArray0 = new Object[9][4][7];
      Object[][] objectArray1 = new Object[7][3];
      objectArray1[0] = (Object[]) stringArray0;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) "org.jfree.chart.plot.XYPlot";
      objectArray2[1] = (Object) "org.jfree.chart.plot.XYPlot";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8Zw!R\"");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      Object object0 = combinedDomainXYPlot0.clone();
      objectArray2[2] = object0;
      objectArray2[3] = (Object) "`l-o,I[nX%:dT";
      objectArray2[4] = (Object) "9a2\"D[P|r]p%ncqV#";
      objectArray2[5] = (Object) "`l-o,I[nX%:dT";
      objectArray2[6] = (Object) "8Zw!R\"";
      Object object1 = combinedDomainXYPlot0.clone();
      objectArray2[7] = object1;
      Object object2 = new Object();
      objectArray2[8] = object2;
      objectArray1[1] = objectArray2;
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) logarithmicAxis0;
      objectArray3[1] = (Object) "org.jfree.chart.plot.XYPlot";
      objectArray3[2] = (Object) "8Zw!R\"";
      objectArray3[3] = (Object) "?";
      objectArray3[4] = object1;
      objectArray1[2] = objectArray3;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[4] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray1[6] = (Object[]) stringArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray4 = new Object[9][0];
      objectArray4[0] = objectArray3;
      objectArray4[1] = (Object[]) stringArray0;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = object0;
      objectArray5[1] = (Object) "8Zw!R\"";
      objectArray5[2] = (Object) "org.jfree.chart.plot.XYPlot";
      Object object3 = new Object();
      objectArray5[3] = object3;
      objectArray5[4] = (Object) "8Zw!R\"";
      objectArray5[5] = (Object) "`l-o,I[nX%:dT";
      objectArray4[2] = objectArray5;
      Object[] objectArray6 = new Object[6];
      objectArray6[0] = (Object) "9a2\"D[P|r]p%ncqV#";
      objectArray6[1] = (Object) "F/<F);'}F9t*i";
      objectArray6[2] = (Object) "F/<F);'}F9t*i";
      objectArray6[3] = (Object) logarithmicAxis0;
      objectArray6[4] = object0;
      objectArray6[5] = (Object) "?";
      objectArray4[3] = objectArray6;
      objectArray4[4] = objectArray2;
      objectArray4[5] = objectArray2;
      objectArray4[6] = (Object[]) stringArray0;
      objectArray4[7] = (Object[]) stringArray0;
      Object[] objectArray7 = new Object[9];
      objectArray7[0] = (Object) "9a2\"D[P|r]p%ncqV#";
      Object object4 = combinedDomainXYPlot0.clone();
      objectArray7[1] = object4;
      Object object5 = combinedDomainXYPlot0.clone();
      objectArray7[2] = object5;
      objectArray7[3] = (Object) "?";
      objectArray7[4] = (Object) "`l-o,I[nX%:dT";
      objectArray7[5] = (Object) "8Zw!R\"";
      objectArray7[6] = (Object) "org.jfree.chart.plot.XYPlot";
      objectArray7[7] = (Object) "9a2\"D[P|r]p%ncqV#";
      objectArray7[8] = (Object) "`l-o,I[nX%:dT";
      objectArray4[8] = objectArray7;
      objectArray0[1] = objectArray4;
      Object[][] objectArray8 = new Object[1][8];
      objectArray8[0] = objectArray3;
      objectArray0[2] = objectArray8;
      Object[][] objectArray9 = new Object[3][3];
      objectArray9[0] = objectArray6;
      objectArray9[1] = objectArray2;
      Object[] objectArray10 = new Object[3];
      objectArray10[0] = (Object) "@<Ipi@]y/";
      objectArray10[1] = (Object) "8Zw!R\"";
      objectArray10[2] = (Object) "`l-o,I[nX%:dT";
      objectArray9[2] = objectArray10;
      objectArray0[3] = objectArray9;
      Object[][] objectArray11 = new Object[8][3];
      objectArray11[0] = objectArray2;
      objectArray11[1] = objectArray7;
      objectArray11[2] = objectArray5;
      objectArray11[3] = objectArray3;
      objectArray11[4] = objectArray10;
      objectArray11[5] = (Object[]) stringArray0;
      objectArray11[6] = objectArray2;
      objectArray11[7] = objectArray3;
      objectArray0[4] = objectArray11;
      Object[][] objectArray12 = new Object[3][6];
      Object[] objectArray13 = new Object[2];
      objectArray13[0] = (Object) "F/<F);'}F9t*i";
      objectArray13[1] = (Object) logarithmicAxis0;
      objectArray12[0] = objectArray13;
      Object[] objectArray14 = new Object[1];
      objectArray14[0] = (Object) combinedDomainXYPlot0;
      objectArray12[1] = objectArray14;
      objectArray12[2] = objectArray7;
      objectArray0[5] = objectArray12;
      Object[][] objectArray15 = new Object[9][2];
      objectArray15[0] = objectArray3;
      objectArray15[1] = objectArray13;
      objectArray15[2] = objectArray6;
      objectArray15[3] = objectArray5;
      Object[] objectArray16 = new Object[2];
      objectArray16[0] = (Object) "9a2\"D[P|r]p%ncqV#";
      objectArray16[1] = (Object) "@<Ipi@]y/";
      objectArray15[4] = objectArray16;
      objectArray15[5] = objectArray5;
      objectArray15[6] = objectArray13;
      objectArray15[7] = objectArray6;
      objectArray15[8] = objectArray14;
      objectArray0[6] = objectArray15;
      Object[][] objectArray17 = new Object[6][1];
      objectArray17[0] = objectArray5;
      objectArray17[1] = objectArray6;
      objectArray17[2] = objectArray14;
      objectArray17[3] = objectArray7;
      objectArray17[4] = objectArray16;
      objectArray17[5] = objectArray6;
      objectArray0[7] = objectArray17;
      Object[][] objectArray18 = new Object[2][1];
      objectArray18[0] = objectArray2;
      objectArray18[1] = objectArray14;
      objectArray0[8] = objectArray18;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 6, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(6, (Marker) intervalMarker0, layer0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(1811);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1811, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(10, 10, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 100
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }
}
