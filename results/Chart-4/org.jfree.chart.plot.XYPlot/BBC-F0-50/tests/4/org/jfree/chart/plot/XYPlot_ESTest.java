/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 27 15:43:00 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.LinearGradientPaint;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.DataBufferUShort;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeSelectionModel;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import javax.swing.tree.VariableHeightLayoutCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getRangeAxis(244);
      Layer layer1 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(500, (Marker) null, layer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point point0 = new Point();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("!;fWn'mI>?vD");
      extendedCategoryAxis0.getAxisLineStroke();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, defaultCaret0, 0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, valueAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point point0 = new Point(10, 10);
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, true);
      BufferedImage bufferedImage0 = new BufferedImage(2464, 10, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawAnnotations(graphics2D0, (Rectangle2D) null, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      DefaultValueDataset defaultValueDataset1 = new DefaultValueDataset((double) 1.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset1);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, valueAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(500, 0.5F, renderingHints0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(6, 3, (-1803.6173536), 1813.905410367146, (ChartRenderingInfo) null);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo1.getDataArea();
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, (PlotOrientation) null, 0.5F, valueAxis0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, valueAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jfree.data.category.DefaultIntervalCategoryDataset");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawZeroDomainBaseline((Graphics2D) null, (Rectangle2D) null);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("s.oN\"dA7O=b2:dr6");
      extendedCategoryAxis0.getAxisLineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setNoDataMessage("rwq$I'OA<+ICtG+");
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot0.getDomainAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot1);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearDomainAxes();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      xYPlot0.getDomainAxis();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jfree.data.category.DefaultIntervalCategoryDataset");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawZeroDomainBaseline((Graphics2D) null, (Rectangle2D) null);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("s.oN\"dA7O=b2:dr6");
      Stroke stroke0 = extendedCategoryAxis0.getAxisLineStroke();
      combinedRangeXYPlot0.drawHorizontalLine((Graphics2D) null, (Rectangle2D) null, 100.0, stroke0, extendedCategoryAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      JFreeChart jFreeChart0 = new JFreeChart(".19iKQD~izo", combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(5, 13);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 5, 1.0F, 88.0F);
      combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Float0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      standardXYItemRenderer0.removeAnnotations();
      // Undeclared exception!
      combinedDomainXYPlot0.setRenderer(2090970920, (XYItemRenderer) standardXYItemRenderer0, true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultBoxAndWhiskerCategoryDataset0);
      spiderWebPlot0.getSeriesPaint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F);
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stack<LinearGradientPaint> stack0 = new Stack<LinearGradientPaint>();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = xYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, (AxisSpace) null);
      xYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle rectangle0 = generalPath0.getBounds();
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis numberAxis0 = new NumberAxis("");
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-4.0), Double.NaN, Double.NaN, 1989.6);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(2099.007345752, Double.NaN, 3.0, Double.NaN);
      Rectangle2D rectangle2D0 = rectangle2D_Double1.getFrame();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.drawVerticalLine((Graphics2D) null, rectangle2D0, Double.NaN, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, rectangle2D0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.setRangePannable(true);
      combinedDomainXYPlot0.panRangeAxes(2158.088, plotRenderingInfo0, point2D_Float0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CrosshairState crosshairState0 = new CrosshairState();
      crosshairState0.getAnchor();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = combinedRangeXYPlot0.DEFAULT_INSETS.createInsetRectangle((Rectangle2D) rectangle2D_Double0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateAxisSpace((Graphics2D) null, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = true;
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.addSubplotInfo(plotRenderingInfo1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedRangeXYPlot0.add(xYPlot0, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomRangeAxes(2467.04881, 10.0, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2590.4012505) <= upper (10.5).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-2055));
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      Paint paint0 = ringPlot0.lookupSectionPaint(10, false);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(paint0);
      JFreeChart jFreeChart0 = new JFreeChart("> b,dKlY.>rm:Z-*9|V", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-2055), (-2498), 10, 15, 10, false, false, false, true, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.08, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("ZOOM_RESET_RANGE");
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(ringPlot0.DEFAULT_OUTLINE_PAINT, paint0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, extendedCategoryAxis0.DEFAULT_AXIS_LINE_PAINT);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, extendedCategoryAxis0, (ValueAxis) null, waterfallBarRenderer0);
      categoryPlot0.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h|0Mj!T&Gei1/i");
      NumberAxis numberAxis0 = new NumberAxis();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(500);
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis0, numberAxis0, xYStepAreaRenderer0);
      xYPlot0.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-681.45288), (-281.8419));
      RingPlot ringPlot0 = new RingPlot();
      cyclicNumberAxis0.setPlot(ringPlot0);
      cyclicNumberAxis0.setRangeAboutValue(2000000.0, 216.0);
      CyclicNumberAxis.DEFAULT_ADVANCE_LINE_STROKE = cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE;
      cyclicNumberAxis0.pan(216.0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(3);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, standardXYItemRenderer0);
      xYPlot0.getDataRange(cyclicNumberAxis0);
      xYPlot0.getFixedDomainAxisSpace();
      xYPlot0.getRangeAxis();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 2.0F;
      doubleArray1[3] = 0.08;
      doubleArray1[4] = 90.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 500;
      doubleArray2[1] = 90.0;
      doubleArray2[2] = 0.05;
      doubleArray2[3] = (-281.8419);
      doubleArray2[4] = (double) 10;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultIntervalCategoryDataset0);
      spiderWebPlot0.getSeriesOutlineStroke();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      xYPlot0.zoomRangeAxes((double) vectorRenderer0.ZERO, (double) vectorRenderer0.ZERO, (PlotRenderingInfo) null, (Point2D) point2D_Double0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      combinedRangeXYPlot0.getRendererForDataset(defaultTableXYDataset0);
      xYPlot0.getDomainGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(593);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(53, 53, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      PlotOrientation plotOrientation1 = PlotOrientation.VERTICAL;
      BasicStroke basicStroke0 = (BasicStroke)PeriodAxisLabelInfo.DEFAULT_DIVIDER_STROKE;
      combinedDomainXYPlot1.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation1, 0.0F, numberAxis0, basicStroke0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      GeneralPath generalPath0 = new GeneralPath(0, 10);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1, 10, 0, 0, false, false, false, false, false, false);
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) defaultCaret0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle rectangle0 = new Rectangle();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2014;
      shortArray0[1] = (short)1905;
      shortArray0[2] = (short) (-286);
      shortArray0[3] = (short)661;
      shortArray0[4] = (short)41;
      shortArray0[5] = (short) (-1749);
      shortArray0[6] = (short)2214;
      shortArray0[7] = (short)12;
      shortArray0[8] = (short)0;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(10, shortArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, renderingHints0);
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Point2D point2D0 = lookupOp0.getPoint2D(point1, point0);
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, rectangle0, point2D0, plotState0, plotRenderingInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      combinedRangeXYPlot0.getRendererForDataset((XYDataset) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 15, 969, 1822, 2, 1305, false, false, false, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 1822, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearSelection();
      NumberAxis numberAxis0 = new NumberAxis("");
      combinedRangeXYPlot2.getDomainAxisIndex(numberAxis0);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(500.0, 10, 171.354819, 454.64857);
      Rectangle2D rectangle2D0 = rectangle2D_Double1.getFrame();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D0, 1.0, numberAxis0.DEFAULT_TICK_MARK_STROKE, numberAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearSelection();
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis3D0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(171.354819, 500, 0.01, 10);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getFrame();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D0, 5, stackedXYAreaRenderer0.DEFAULT_STROKE, stackedXYAreaRenderer0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point point0 = new Point();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      rectangle2D_Double0.setFrameFromDiagonal((double) 0, (double) 0, 4.0, (double) 0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes((double) 0, 4.0, plotRenderingInfo0, (Point2D) point0);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(121.89, 842.04909);
      cyclicNumberAxis0.setPlot(combinedRangeXYPlot1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      combinedRangeXYPlot0.setDomainCrosshairValue(4126.0, true);
      Rectangle rectangle0 = new Rectangle();
      combinedRangeXYPlot0.drawZeroRangeBaseline((Graphics2D) null, rectangle0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      double double0 = 1582.0;
      JFreeChart jFreeChart1 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo((-2396));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.getPlotType();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.clearDomainAxes();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ArrayList<LogAxis> arrayList0 = new ArrayList<LogAxis>();
      LinkedList<LogAxis> linkedList0 = new LinkedList<LogAxis>(arrayList0);
      combinedDomainXYPlot0.drawRangeTickBands(graphics2D0, rectangle2D_Double0, linkedList0);
      combinedRangeXYPlot0.getRendererCount();
      ValueMarker valueMarker0 = new ValueMarker(1787.4);
      combinedDomainXYPlot0.removeRangeMarker(4, (Marker) valueMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Null 'axisIndex' argument.";
      stringArray0[1] = "Null 'axisIndex' argument.";
      stringArray0[2] = "Null 'axisIndex' argument.";
      stringArray0[3] = "Null 'axisIndex' argument.";
      stringArray0[4] = "Null 'axisIndex' argument.";
      stringArray0[8] = "QJpbj`.-EdBBMH&V";
      stringArray0[6] = "Null 'axisIndex' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'axisIndex' argument.", stringArray0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, symbolAxis0, symbolAxis0, stackedXYAreaRenderer0);
      xYPlot0.getIndexOf(stackedXYAreaRenderer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      categoryCrosshairState0.getAnchor();
      xYPlot0.zoomRangeAxes((-3129.7092314142), (double) 5, plotRenderingInfo0, (Point2D) null);
      xYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation(0, (AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      combinedDomainXYPlot0.setBackgroundPaint(color0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-1536), (-1795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Rectangle rectangle0 = new Rectangle();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0, 422.3127422);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, numberAxis3D0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      xYPlot0.drawDomainCrosshair((Graphics2D) null, rectangle0, plotOrientation0, 1318.0, cyclicNumberAxis0, xYLineAndShapeRenderer0.DEFAULT_OUTLINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cl=p9t);s_xPni(tR");
      JFreeChart jFreeChart0 = new JFreeChart("Null 'axisIndex' argument.", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 10, chartRenderingInfo0);
      jFreeChart0.getSubtitles();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, (double) stackedXYAreaRenderer0.ZERO, numberAxis3D0, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, stackedXYAreaRenderer0.DEFAULT_PAINT);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Rectangle rectangle0 = new Rectangle();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(4126.0, 0);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      XYPlot xYPlot0 = new XYPlot(xYIntervalSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, xYLineAndShapeRenderer0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      // Undeclared exception!
      try { 
        xYPlot0.drawDomainCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 0.0F, cyclicNumberAxis0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.CyclicNumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XYIntervalDataItem", combinedRangeXYPlot0);
      JFreeChart jFreeChart1 = new JFreeChart("org.jfree.data.xy.XYIntervalDataItem", valueAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(500, 82, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Double double0 = AbstractRenderer.ZERO;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) integer0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis1 = thermometerPlot0.getRangeAxis();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 696.0, valueAxis1, valueAxis1.DEFAULT_AXIS_LINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setRenderer(2, (XYItemRenderer) null, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XYIntervalDataItem", combinedRangeXYPlot0);
      JFreeChart jFreeChart1 = new JFreeChart("org.jfree.data.xy.XYIntervalDataItem", jFreeChart0.DEFAULT_TITLE_FONT, combinedRangeXYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(500, 45, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Double double0 = AbstractRenderer.ZERO;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 2, valueAxis0, thermometerPlot0.DEFAULT_OUTLINE_STROKE, valueAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(10, 1.0, (-2231.351359491633), 0.0, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Point2D.Float point2D_Float0 = new Point2D.Float(0.5F, 0.5F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.xy.XYIntervalDataItem", xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 10);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      xYPlot0.drawRangeCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, 1884.422437, valueAxis0, valueAxis0.DEFAULT_AXIS_LINE_STROKE, jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Vector<WaferMapDataset> vector0 = new Vector<WaferMapDataset>();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Double0, vector0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((-2839.25390581278), 5000.0, (PlotRenderingInfo) null, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("2b]'I6J\"u9_]");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      deviationRenderer0.setAutoPopulateSeriesShape(false);
      numberAxis3D0.setUpperMargin(1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      xYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stack<LinearGradientPaint> stack0 = new Stack<LinearGradientPaint>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.drawRangeTickBands(graphics2D0, rectangle2D_Double0, stack0);
      combinedRangeXYPlot0.getRendererCount();
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateAxisSpace(graphics2D1, rectangle2D_Double0);
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D1, rectangle2D_Double0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(912);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderer(Integer.MAX_VALUE, (XYItemRenderer) stackedXYAreaRenderer0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stack<LinearGradientPaint> stack0 = new Stack<LinearGradientPaint>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addDomainMarker(1600, (Marker) null, layer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-663), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.red;
      combinedRangeXYPlot0.setQuadrantPaint(0, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      combinedRangeXYPlot0.getDomainCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Save_as...", dateFormat0, dateFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYToolTipGenerator0);
      Stroke stroke0 = candlestickRenderer0.getBaseOutlineStroke();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(stroke0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "+gO");
      DateAxis dateAxis0 = new DateAxis("+gO", simpleTimeZone0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 1.0F);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      Layer layer0 = Layer.BACKGROUND;
      int int0 = 4;
      combinedRangeXYPlot0.getDomainMarkers(4, layer0);
      combinedRangeXYPlot0.getDomainCrosshairValue();
      AffineTransform affineTransform0 = new AffineTransform(1.0F, 10.0, 1.0F, (-2322.9813855), 1366.625930915, 2.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 0
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      chartRenderingInfo0.clone();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("gW");
      chartRenderingInfo0.getEntityCollection();
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("gW", 500.0, 500, (-45.0));
      plotRenderingInfo0.equals(xYPointerAnnotation0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.handleClick(4, 0, plotRenderingInfo0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, "56Cje]EA%F");
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.add(xYPlot0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.darkGray;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxisEdge(10);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      TimeSeries timeSeries0 = new TimeSeries(1.0F, "^htMLc)Y", "Cm");
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      timeSeriesCollection1.removeChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.setDataset(500, (XYDataset) timeSeriesCollection0);
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot1);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 2, 1, 10, 10, 500, false, true, false, true, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 2.0F);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.handleClick(4, 2147483621, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot0.setDataset(0, (XYDataset) timeSeriesCollection0);
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1, 10, 0, 0, false, false, true, false, false, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) defaultCaret0, (RenderingSource) chartPanel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.darkGray;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.setOutlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.setDrawingSupplier((DrawingSupplier) null, false);
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(color0);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Stack<LinearGradientPaint> stack0 = new Stack<LinearGradientPaint>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getDomainMarkers(6, layer0);
      combinedRangeXYPlot0.getDomainCrosshairValue();
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.lookupSeriesOutlineStroke((-2726));
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer(Double.POSITIVE_INFINITY, true, (XYToolTipGenerator) null);
      Paint paint0 = candlestickRenderer1.getDownPaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine(graphics2D0, rectangle2D_Double0, 0.0, stroke0, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getBaseStroke();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addRangeMarker(1225, (Marker) null, layer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      NumberAxis numberAxis0 = new NumberAxis("series");
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, numberAxis0, numberAxis3D0, deviationRenderer0);
      xYPlot0.clearSelection();
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Stack<CyclicXYItemRenderer> stack0 = new Stack<CyclicXYItemRenderer>();
      LinkedList<XYErrorRenderer> linkedList0 = new LinkedList<XYErrorRenderer>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(968, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      Rectangle2D.intersect(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedRangeXYPlot0.clearRangeMarkers();
      chartRenderingInfo0.getRenderingSource();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(1.0F, 10, 1182.57, 10, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYLineAnnotation0);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.removeRangeMarker(1, (Marker) categoryMarker0, (Layer) null);
      combinedRangeXYPlot0.getRangeAxisLocation(1);
      Color color0 = (Color)SpiderWebPlot.DEFAULT_LABEL_BACKGROUND_PAINT;
      combinedRangeXYPlot0.setQuadrantPaint(1, color0);
      PeriodAxis periodAxis0 = new PeriodAxis("?c");
      combinedRangeXYPlot0.getDomainAxisIndex(periodAxis0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(numberAxis3D0.DEFAULT_TICK_MARK_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      AxisSpace axisSpace0 = new AxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.getRenderer(10);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(696, 696);
      bufferedImage1.createGraphics();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2087);
      intArray0[1] = 696;
      intArray0[2] = 1473;
      intArray0[3] = 500;
      int[] intArray1 = new int[6];
      intArray1[0] = 10;
      intArray1[3] = 15;
      intArray1[2] = 15;
      intArray1[3] = 15;
      intArray1[4] = 100;
      intArray1[5] = (-1710);
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray1, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // npoints > xpoints.length || npoints > ypoints.length
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      combinedDomainXYPlot0.getRangeAxis((-10));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.clearDomainMarkers();
      combinedRangeXYPlot0.setRangeCrosshairValue(1.0E-8, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      axisLocation0.getOpposite();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      numberAxis3D0.setUpperMargin(1506.16148);
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      xYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      DebugGraphics.flashColor();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawBackground(graphics2D0, rectangle2D_Double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2087));
      linkedList0.addLast(integer0);
      combinedRangeXYPlot0.drawDomainGridlines(graphics2D0, rectangle2D_Double0, linkedList0);
      combinedRangeXYPlot0.mapDatasetToRangeAxes(10, linkedList0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      xYPlot0.setDataset((XYDataset) yIntervalSeriesCollection0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      numberAxis3D0.setUpperMargin(1506.16148);
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker("http://www.jfree.org/jfreechart/index.html", combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Layer layer1 = Layer.FOREGROUND;
      Layer layer2 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(5, (Marker) categoryMarker0, layer2);
      DateAxis dateAxis0 = new DateAxis("XY_Plot");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.getDomainMarkers((-598), layer1);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      LogAxis logAxis0 = new LogAxis();
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      combinedRangeXYPlot0.getRangeAxisEdge();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.drawRangeMarkers(graphics2D0, rectangle2D_Double0, (-637), layer0);
      LinkedList<CyclicNumberAxis> linkedList0 = new LinkedList<CyclicNumberAxis>();
      combinedDomainXYPlot0.drawRangeTickBands((Graphics2D) null, rectangle2D_Double0, linkedList0);
      combinedRangeXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.clone();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      xYPlot0.clone();
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      numberAxis3D0.setUpperMargin(1506.16148);
      xYPlot0.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      combinedDomainXYPlot0.setQuadrantPaint(3, color0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      xYPlot0.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Vector<WaferMapDataset> vector0 = new Vector<WaferMapDataset>();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D_Double0, vector0);
      xYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYPlot0, defaultKeyedValues2DDataset0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      spiderWebPlot1.setSeriesPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("5r>^38", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker(10, (Marker) null, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryMarker categoryMarker0 = new CategoryMarker(numberAxis0.DEFAULT_TICK_UNIT, vectorRenderer0.DEFAULT_OUTLINE_PAINT, vectorRenderer0.DEFAULT_OUTLINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.addRangeMarker((Marker) categoryMarker0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultKeyedValues2DDataset0);
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(10, 1267);
      combinedDomainXYPlot0.getRendererForDataset(dynamicTimeSeriesCollection0);
      combinedDomainXYPlot0.clearRangeMarkers(1267);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      xYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 1.0F, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, false);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      point0.setLocation((double) 10, (double) 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 2355.73363, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(1, (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.isDomainPannable();
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-890), (ValueAxis) dateAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYPlot0, defaultKeyedValues2DDataset0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      spiderWebPlot1.setSeriesPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYPlot0.setRangeZeroBaselineStroke(spiderWebPlot1.DEFAULT_OUTLINE_STROKE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.handleClick(10, 10, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D point2D0 = RectangleAnchor.coordinates(defaultCaret0, rectangleAnchor0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.zoomDomainAxes((-920.4), plotRenderingInfo0, point2D0, false);
      EmptyBlock emptyBlock0 = new EmptyBlock(1131.0, 1.0F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis(10);
      combinedRangeXYPlot0.setDomainGridlinePaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedRangeXYPlot0.clearDomainMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.addRangeMarker((Marker) categoryMarker0);
      combinedRangeXYPlot2.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "|zjHXUE";
      PeriodAxis periodAxis0 = new PeriodAxis("|zjHXUE");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, periodAxis0.DEFAULT_TICK_LABEL_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
      categoryMarker0.setStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.removeRangeMarker(500, (Marker) categoryMarker0, (Layer) null, false);
      combinedRangeXYPlot0.getQuadrantOrigin();
      int int0 = (-903);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-903), "");
      simpleTimeZone0.setStartYear((-903));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, (Layer) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis(10);
      combinedRangeXYPlot0.clearDomainMarkers();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(10);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker((-1574), (Marker) valueMarker0, layer1);
      combinedRangeXYPlot0.isDomainPannable();
      combinedRangeXYPlot0.setRangeAxis(8, (ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      String string0 = "Q\"I!T<&Q5OIJcp";
      DateAxis dateAxis0 = new DateAxis("Q\"I!T<&Q5OIJcp", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(1272, 1272, 10);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogAxis logAxis0 = new LogAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(periodAxis0, true);
      combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Color color0 = Color.darkGray;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getSeriesCount();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawBackground(graphics2D0, rectangle2D_Double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(933.908);
      Stroke stroke0 = candlestickRenderer0.lookupSeriesStroke(1761);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawVerticalLine(graphics2D0, rectangle2D_Double0, 1.0F, stroke0, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("|zjHXUE");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, periodAxis0.DEFAULT_TICK_LABEL_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
      categoryMarker0.setStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) clusteredXYBarRenderer0, true);
      Point2D.Float point2D_Float0 = new Point2D.Float((-510.679F), 2.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.panDomainAxes((-510.679F), plotRenderingInfo0, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      numberAxis3D0.setUpperMargin(1506.16148);
      xYPlot0.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Color color0 = (Color)XYPlot.DEFAULT_CROSSHAIR_PAINT;
      combinedDomainXYPlot0.setQuadrantPaint(3, color0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      Rectangle rectangle0 = new Rectangle(10, 10);
      rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0, false, false);
      combinedRangeXYPlot0.setInsets(rectangleInsets0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_OUTLINE_PAINT);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DateAxis dateAxis0 = new DateAxis();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2490.746126223421), 135.0);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(2238.47605);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0, true);
      combinedRangeXYPlot0.getQuadrantOrigin();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-1001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis(10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      rectangle2D_Double0.createUnion(rectangle2D_Double1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.isDomainPannable();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-2411), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      xYPlot0.setRenderer(1132, (XYItemRenderer) candlestickRenderer0, false);
      candlestickRenderer0.setBaseLegendShape(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Point2D.Float point2D_Float0 = new Point2D.Float(1132, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeGridlineStroke(candlestickRenderer0.DEFAULT_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(1761);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      xYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D_Double0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      xYPlot0.setDomainAxes(valueAxisArray0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      GridBagLayout gridBagLayout1 = new GridBagLayout();
      Point point0 = gridBagLayout1.getLayoutOrigin();
      point0.setLocation(3.0, 1131.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, true);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) vectorRenderer0.ZERO, 1.0F);
      combinedRangeXYPlot0.getDataRange(valueAxis0);
      xYPlot0.setRangeZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("|zjHXUE");
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, periodAxis0.DEFAULT_TICK_LABEL_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Layer layer0 = Layer.BACKGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("^Qh=FDW[u+1");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainGridlineStroke(logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedRangeXYPlot0.setDataset(1132, (XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      numberAxis3D0.setUpperMargin(1506.16148);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "nl{(P8R:0^aoy(", "jR^{57Lmwe7");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1, customXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot1 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, standardXYItemRenderer0);
      GeneralPath generalPath0 = new GeneralPath();
      xYPlot1.setParent(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      chartRenderingInfo0.getRenderingSource();
      // Undeclared exception!
      try { 
        xYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      combinedRangeXYPlot1.setDomainGridlinesVisible(false);
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot1);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(" `LJv$KP/SDw;D]qYv");
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, deviationRenderer0);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "nl{(P8R:0^aoy(", "jR^{57Lmwe7");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(1, customXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot1 = new XYPlot(yIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, standardXYItemRenderer0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      xYPlot0.setRenderer(1646, (XYItemRenderer) standardXYItemRenderer0, false);
      Point2D.Float point2D_Float0 = new Point2D.Float(1933.22F, (-1474.068F));
      xYPlot0.panDomainAxes((-1474.068F), (PlotRenderingInfo) null, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      WaferMapPlot waferMapPlot0 = new WaferMapPlot((WaferMapDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("index.html", waferMapPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1209, (double) 1, (double) 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(1, 10, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 15);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setAutoRangeMinimumSize(348.22, false);
      Point point0 = new Point(500, 1573);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point1, dimension0);
      dimension1.clone();
      Rectangle2D rectangle2D0 = moduloAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, false, false);
      AxisSpace axisSpace0 = new AxisSpace();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisSpace axisSpace1 = categoryPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle2D0, axisSpace0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      combinedDomainXYPlot0.getDomainAxis(0);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "={UHvm&(");
      cyclicNumberAxis0.setPlot(xYPlot0);
      xYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      xYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setAxisLineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      logAxis0.setMinorTickMarkInsideLength(15);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.getRangeAxisEdge((-3038));
      combinedRangeXYPlot0.equals(xYPlot0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ArrayList<PeriodAxis> arrayList0 = new ArrayList<PeriodAxis>();
      xYPlot0.clearDomainMarkers();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setInsets(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clone();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainCrosshairPaint();
      combinedRangeXYPlot1.isDomainCrosshairVisible();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedRangeXYPlot1);
      combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ArrayList<PeriodAxis> arrayList0 = new ArrayList<PeriodAxis>();
      xYPlot0.clearRangeMarkers();
      xYPlot0.clearDomainMarkers();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bot#om=";
      SymbolAxis symbolAxis0 = new SymbolAxis("bot#om=", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setInsets(symbolAxis0.DEFAULT_AXIS_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DateAxis dateAxis0 = new DateAxis();
      RectangleEdge rectangleEdge0 = xYPlot0.getRangeAxisEdge(500);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle((-730), 500);
      CategoryAxis categoryAxis0 = new CategoryAxis("ItemLabelAnchor.INSIDE1");
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisSpace axisSpace0 = categoryPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      AxisSpace axisSpace1 = categoryAxis0.reserveSpace(graphics2D0, xYPlot0, rectangle0, rectangleEdge0, axisSpace0);
      combinedRangeXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle0, axisSpace1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0.0, 10, 0.0, 0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      xYPlot0.setRenderer(4, (XYItemRenderer) candlestickRenderer0, false);
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, (-1474.068F));
      xYPlot0.panDomainAxes(0.0, (PlotRenderingInfo) null, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      xYPlot0.drawQuadrants(graphics2D0, rectangle2D_Double2);
      xYPlot0.getDataset();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float(0.95F, (-2087));
      combinedRangeXYPlot0.panDomainAxes(0.95F, (PlotRenderingInfo) null, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      combinedRangeXYPlot0.drawQuadrants(graphics2D0, (Rectangle2D) null);
      combinedRangeXYPlot0.getDomainTickBandPaint();
      combinedRangeXYPlot0.getDomainMarkers(1668, (Layer) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Color color0 = Color.darkGray;
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(vectorRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.isDomainPannable();
      combinedDomainXYPlot0.getDomainAxis();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{/_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getDomainAxisEdge(10);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2.0F, 1.0F, 0.0F, 10);
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      Rectangle2D rectangle2D0 = combinedDomainXYPlot0.DEFAULT_INSETS.createAdjustedRectangle(rectangle2D_Float0, lengthAdjustmentType0, lengthAdjustmentType0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      combinedRangeXYPlot0.setFixedDomainAxisSpaceForSubplots(axisSpace0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ModuloAxis moduloAxis0 = new ModuloAxis("k{/_=iO", dateAxis0.DEFAULT_RANGE);
      combinedRangeXYPlot0.setRangeCrosshairValue(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      xYPlot0.setRangeGridlinesVisible(false);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedDomainXYPlot0.canSelectByRegion();
      xYPlot0.getDomainAxis(500);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.removeAnnotation((XYAnnotation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.0);
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      Layer layer0 = Layer.BACKGROUND;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      xYPlot0.drawDomainMarkers((Graphics2D) null, rectangle2D_Float0, 865, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getRenderingSource();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(6, 10);
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("", "", "");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(87, customXYToolTipGenerator0, standardXYURLGenerator0);
      XYPlot xYPlot1 = new XYPlot(dynamicTimeSeriesCollection0, (ValueAxis) null, valueAxis0, standardXYItemRenderer0);
      // Undeclared exception!
      try { 
        xYPlot1.select((GeneralPath) null, (Rectangle2D) null, (RenderingSource) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = new PriorityQueue<SymbolAxis>();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes((-811.1), plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 1.0F, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, false);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      point0.setLocation((double) 10, (double) 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRangeMarkers(78, (Layer) null);
      LinkedList<MatrixSeriesCollection> linkedList0 = new LinkedList<MatrixSeriesCollection>();
      int int0 = (-2004318071);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.mapDatasetToDomainAxes((-2004318071), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[2] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[3] = (ValueAxis) numberAxis3D0;
      valueAxisArray0[5] = (ValueAxis) numberAxis3D0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1678.0499, 1.0F);
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.getBackgroundPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(0.05, 15.0);
      xYPlot0.isRangeZeroBaselineVisible();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      // Undeclared exception!
      try { 
        xYPlot0.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("");
      xYDifferenceRenderer0.setBaseURLGenerator((XYURLGenerator) standardXYURLGenerator0, true);
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, xYDifferenceRenderer0);
      xYPlot0.setNoDataMessage((String) null);
      xYDifferenceRenderer0.hasListener(xYPlot0);
      xYPlot0.getDomainZeroBaselinePaint();
      xYPlot0.setRangeZeroBaselinePaint(xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      xYPlot0.clearRangeMarkers();
      xYPlot0.setRenderer((XYItemRenderer) xYDifferenceRenderer0);
      xYPlot0.getRangeAxisIndex((ValueAxis) null);
      xYPlot0.clearDomainMarkers();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      LogAxis logAxis0 = new LogAxis("Null 'layer' not permitted.");
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot1.getRangeAxis();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0.0, 10, 0.0, 0.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, (-1474.068F));
      xYPlot0.panDomainAxes(0.0, (PlotRenderingInfo) null, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      xYPlot0.drawQuadrants(graphics2D0, (Rectangle2D) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{/_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDomainAxisEdge(10);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisEdge(1);
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-8;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      combinedRangeCategoryPlot0.setDomainCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 10;
      AffineTransform affineTransform0 = new AffineTransform(doubleArray0);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform1, 2);
      Point point0 = new Point(1, 4);
      // Undeclared exception!
      try { 
        Raster.createInterleavedRaster(500, (-117), 10, 1196, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported data type 500
         //
         verifyException("java.awt.image.Raster", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      IntervalMarker intervalMarker0 = new IntervalMarker((-3585.21), 862.9169308);
      // Undeclared exception!
      try { 
        xYPlot0.addDomainMarker((Marker) intervalMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3024), "rD/C)Q?!HxDSQ<");
      DateAxis dateAxis0 = new DateAxis("rD/C)Q?!HxDSQ<", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.setDomainZeroBaselineVisible(false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setDomainCrosshairValue(0.05);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      simpleTimeZone0.setStartYear((-1287));
      combinedDomainXYPlot0.addDomainMarker(1954, (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot0.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      xYPlot0.setRangeGridlinesVisible(false);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedDomainXYPlot0.canSelectByRegion();
      ValueAxis valueAxis1 = xYPlot0.getDomainAxis(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT, valueAxis0.DEFAULT_TICK_MARK_STROKE, color0, valueAxis1.DEFAULT_AXIS_LINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addRangeMarker(124, (Marker) categoryMarker0, (Layer) null, false);
      combinedDomainXYPlot1.getRangeZeroBaselineStroke();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-4, 1.0F, 10, 500.0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      plotRenderingInfo0.setPlotArea(rectangle2D0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(343, 680, 256, 256);
      Rectangle2D rectangle2D1 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D1);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-358.09568), 10, "~Ano!UCS,_");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder1 = DatasetRenderingOrder.REVERSE;
      combinedRangeXYPlot1.setDatasetRenderingOrder(datasetRenderingOrder1);
      combinedRangeXYPlot1.zoomDomainAxes((double) 10, plotRenderingInfo0, point2D0, true);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 343);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, (-2));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot1.isDomainZoomable();
      combinedRangeXYPlot0.getDomainAxisEdge((-2927));
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      scatterRenderer0.findRangeBounds(defaultCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("J)yq", (Range) null);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(10);
      XYPlot xYPlot1 = null;
      try {
        xYPlot1 = new XYPlot(yIntervalSeriesCollection0, moduloAxis0, moduloAxis0, xYSplineRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0.0, 10, 0.0, 0.0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 1131, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, (-1474.068F));
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(15);
      combinedRangeXYPlot0.setDomainAxisLocation(10, axisLocation0);
      combinedRangeXYPlot0.getDomainCrosshairValue();
      xYPlot0.setDomainCrosshairValue((double) 0, false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, periodAxis0.DEFAULT_TICK_LABEL_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
      categoryMarker0.setDrawAsLine(true);
      categoryMarker0.setStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setMinorTickMarkInsideLength(1.0F);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.getRangeAxisEdge(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.mapDatasetToDomainAxis(10, 10);
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset((-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -20 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.setRangeGridlinePaint(combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setRangeAboutValue(2101.2, 3464.54506);
      logAxis0.setMinorTickMarkInsideLength(15);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers((-2004318071), layer0);
      xYPlot0.getWeight();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0.0, 10, 0.0, 0.0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.createBufferedImage(10, 1131, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float(1.0F, (-1474.068F));
      xYPlot0.panDomainAxes(0.0, (PlotRenderingInfo) null, point2D_Float0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = new Rectangle();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(15);
      combinedRangeXYPlot0.setDomainAxisLocation(10, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.configureDomainAxes();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setMinorTickMarkInsideLength(10);
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.getRangeAxisEdge(15);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      xYPlot0.getRangeAxis();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Color color0 = Color.darkGray;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis(",2}C4;_(|:&>", simpleTimeZone0);
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((AxisLocation) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      bufferedImage0.getGraphics();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Double1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 1131, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(2945, 10, (-4.0), 10.0, chartRenderingInfo1);
      bufferedImage0.createGraphics();
      Locale locale0 = Locale.GERMAN;
      DateAxis dateAxis0 = null;
      try {
        dateAxis0 = new DateAxis("org.jfree.data.DefaultKeyedValue", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.chart.axis.DateAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(10, 10, 300, 768);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.addSubplotInfo(plotRenderingInfo1);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, point2D0, true);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 1.0);
      combinedDomainXYPlot0.getSeriesCount();
      XYCrosshairState xYCrosshairState0 = new XYCrosshairState();
      combinedDomainXYPlot0.render((Graphics2D) null, rectangle0, 10, plotRenderingInfo1, xYCrosshairState0);
      int int0 = 4;
      SymbolAxis symbolAxis0 = null;
      try {
        symbolAxis0 = new SymbolAxis("org.jfree.chart.plot.LocalizationBundle", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      MockDate mockDate0 = new MockDate(64, 35, 64, 21, 0);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Index ");
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) treeSet0, locale_FilteringMode0);
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", minute0, minute0, timeZone0, locale0);
      CategoryMarker categoryMarker0 = new CategoryMarker(minute0, periodAxis0.DEFAULT_AXIS_LINE_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainPannable(true);
      combinedRangeXYPlot0.getRangeCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.addChangeListener(combinedRangeXYPlot0);
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot1);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedRangeXYPlot0.getDomainAxis(10);
      combinedRangeXYPlot1.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("http://www.jfree.org/jfreechart/index.html");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1131, 500, 4, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      DateAxis.createStandardDateTickUnits();
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      combinedRangeXYPlot0.zoomRangeAxes(1322.0, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.getRangeMarkers(91, layer0);
      LinkedList<MatrixSeriesCollection> linkedList0 = new LinkedList<MatrixSeriesCollection>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes(500, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0F, 0.0);
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.getBackgroundPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(10.0, 3.0);
      xYPlot0.isRangeZeroBaselineVisible();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addRangeMarker((-5042), (Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.setQuadrantPaint(3, xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("Null 'stroke' argument.", dateFormat0, dateFormat0, dateFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getURLGenerator(2535, 1487, false);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10, standardXYZToolTipGenerator0, (XYURLGenerator) null);
      xYPlot0.setRenderer((XYItemRenderer) cyclicXYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      combinedRangeXYPlot0.getDomainAxisLocation((-676));
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 1405.46281663, 1680.5925, (-2376.8959078757825), 0.0, emptyBlock0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.mapDatasetToDomainAxis(180, 1542);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      combinedRangeXYPlot0.setDataset(3, (XYDataset) xYTaskDataset0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-596.0));
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      combinedDomainXYPlot0.getRangeTickBandPaint();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      fixedHeightLayoutCache0.getPathForRow(10);
      DebugGraphics debugGraphics0 = new DebugGraphics(graphics2D0);
      debugGraphics0.getClipBounds();
      fixedHeightLayoutCache0.getBounds((TreePath) null, (Rectangle) null);
      Vector<DefaultValueDataset> vector0 = new Vector<DefaultValueDataset>();
      combinedDomainXYPlot0.drawDomainTickBands(graphics2D0, (Rectangle2D) null, vector0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(0, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      String string0 = null;
      LogAxis logAxis0 = new LogAxis((String) null);
      logAxis0.setMinorTickMarkInsideLength(10);
      NumberAxis numberAxis0 = new NumberAxis();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(timeSeriesCollection0, numberAxis0, periodAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot1.setDomainMinorGridlinePaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      xYPlot0.setDomainCrosshairValue(14.0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.05, 1);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("{0}: ({1}, {2})", "{0}: ({1}, {2})", "");
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYZToolTipGenerator0, standardXYURLGenerator0);
      combinedDomainXYPlot0.equals(stackedXYAreaRenderer2_0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setForegroundAlpha(1.0F);
      combinedDomainXYPlot1.setRangeZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      GeneralPath generalPath0 = new GeneralPath();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, true);
      combinedDomainXYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, (ValueAxis) null, (ValueAxis) null, xYDifferenceRenderer0);
      xYPlot0.setNoDataMessage((String) null);
      xYDifferenceRenderer0.hasListener(xYPlot0);
      xYPlot0.getDomainZeroBaselinePaint();
      xYPlot0.setRangeZeroBaselinePaint(xYDifferenceRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      xYPlot0.clearRangeMarkers();
      xYPlot0.getRangeAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      Color color0 = Color.darkGray;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis(",2}C4;_(|:&>", simpleTimeZone0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, ",2}C4;_(|:&>");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(15, 500);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      standardEntityCollection0.equals(combinedDomainXYPlot0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.panRangeAxes(0.0, plotRenderingInfo0, point2D_Double0);
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      highLowRenderer0.getCloseTickPaint();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      ValueAxis valueAxis0 = null;
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) null);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        xYPlot0.addRangeMarker(0, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot1.clearRangeMarkers();
      Color color0 = Color.darkGray;
      combinedDomainXYPlot1.setDomainZeroBaselinePaint(color0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      xYPlot0.getRangeAxisEdge(486);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRangeAxisIndex((ValueAxis) null);
      ValueMarker valueMarker0 = new ValueMarker(0.05, combinedDomainXYPlot2.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot2.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot1.addRangeMarker(10, (Marker) valueMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      xYPlot0.getRangeAxis();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Color color0 = Color.darkGray;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis(",2}C4;_(|:&>", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot2.setRangeGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.setRangeCrosshairPaint(combinedDomainXYPlot2.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot1.mapDatasetToRangeAxis(34, 1989);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Collection collection0 = standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      standardEntityCollection0.equals(collection0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.panRangeAxes(0.05, plotRenderingInfo0, point2D_Double0);
      xYPlot0.setDomainGridlinePaint(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot3.setRangeZeroBaselineVisible(true);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot3);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(219, 2218, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, vector0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      combinedDomainXYPlot1.setOrientation(plotOrientation0);
      combinedDomainXYPlot1.setRangeAxis((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      xYPlot0.setRangeGridlinesVisible(false);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedDomainXYPlot0.canSelectByRegion();
      combinedDomainXYPlot0.getDomainAxis(1393);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "8D=(91L$M|");
      cyclicNumberAxis0.setTickMarksVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot1.canSelectByPoint();
      NumberAxis numberAxis0 = new NumberAxis("+X_Rb)wx");
      combinedDomainXYPlot2.getDataRange((ValueAxis) null);
      combinedRangeXYPlot0.isDomainCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-751.4334692193352), (-751.4334692193352), 10, 3.4028234663852886E38, 10, jFreeChart0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0);
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-596.0));
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      SynthListUI synthListUI0 = new SynthListUI();
      JList<XYTextAnnotation> jList0 = new JList<XYTextAnnotation>();
      // Undeclared exception!
      try { 
        synthListUI0.getCellBounds(jList0, (-1611), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicListUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      LogAxis logAxis0 = new LogAxis("Null 'layer' not permitted.");
      logAxis0.setMinorTickMarkInsideLength(0.0F);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot1.getRangeAxisEdge(3);
      combinedRangeXYPlot0.isRangeGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      EmptyBlock emptyBlock0 = new EmptyBlock(1.0F, 1300.596532);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      fixedMillisecond0.previous();
      fixedMillisecond0.getStart();
      PeriodAxis periodAxis0 = new PeriodAxis("|MN2Cz^:p\"{VNo|%C");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo((ChartRenderingInfo) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setTickMarkInsideLength(548.1F);
      combinedRangeXYPlot0.zoomRangeAxes(0.0, plotRenderingInfo1, (Point2D) point2D_Double0);
      combinedRangeXYPlot0.clearDomainMarkers((-1));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(0);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(1542, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      MockDate mockDate0 = new MockDate(64, 35, 64, 21, 0);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Index ");
      Locale locale0 = Locale.FRENCH;
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(minute0, periodAxis0.DEFAULT_AXIS_LINE_PAINT, periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      combinedRangeXYPlot0.configureRangeAxes();
      combinedRangeXYPlot0.setRangeGridlinePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.setRangeMinorGridlineStroke(periodAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.rendererChanged((RendererChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue(2775.721200828762);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1305.09993017788), "={UHvm&(");
      MockDate mockDate0 = new MockDate(1393, 10, 10);
      Year year0 = new Year(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(500, 10, year0);
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(dynamicTimeSeriesCollection0, cyclicNumberAxis0, cyclicNumberAxis0, stackedXYAreaRenderer2_0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.DynamicTimeSeriesCollection cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{v/h_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 1.0F, true);
      combinedRangeXYPlot0.setRangeCrosshairVisible(true);
      combinedRangeXYPlot0.setRangeCrosshairStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDomainAxisEdge(10);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ModuloAxis moduloAxis0 = new ModuloAxis("k{v/h_=iO", dateAxis0.DEFAULT_RANGE);
      moduloAxis0.setNumberFormatOverride(numberFormat0);
      combinedRangeXYPlot0.setRangeCrosshairValue(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{v/h_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point(10, 500);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point1, dimension1);
      dimension0.width = (-283);
      dimension1.clone();
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = combinedRangeCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      dateAxis0.configure();
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      Boolean boolean0 = new Boolean("k{v/h_=iO");
      combinedDomainXYPlot0.getDataRange(dateAxis0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      simpleTimeZone0.toZoneId();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, false);
      combinedDomainXYPlot0.select((-45.0), 2.0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      combinedDomainXYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(10, 10, 300, 768);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, point2D0, true);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 1.0);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, (-2));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      LogAxis logAxis0 = new LogAxis((String) null);
      logAxis0.setMinorTickMarkInsideLength((-1353.4165F));
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.getRangeAxisEdge(10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
      xYPlot0.addRangeMarker((-2), (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      valueAxisArray0[7] = (ValueAxis) dateAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0E-8);
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Paint paint0 = xYPlot0.getBackgroundPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(416.382751, 1.0E-8);
      xYPlot0.isRangeZeroBaselineVisible();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.clearSelection();
      xYPlot0.setQuadrantPaint(3, paint0);
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator();
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(2, highLowItemLabelGenerator0, timeSeriesURLGenerator0);
      xYPlot0.getIndexOf(stackedXYAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      multiplePiePlot0.getPieChart();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      line2D_Double0.getBounds();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(1);
      axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(1542, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Double1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 1131, layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1322.0);
      xYPlot0.clearDomainAxes();
      xYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedRangeXYPlot0.setRenderer(99, (XYItemRenderer) vectorRenderer0);
      Color color0 = Color.green;
      combinedRangeXYPlot0.setRangeCrosshairValue((double) vectorRenderer0.ZERO);
      combinedRangeXYPlot0.setOutlinePaint(vectorRenderer0.DEFAULT_PAINT);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(99, (Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 1405.46281663, 1680.5925, (-2376.8959078757825), 0.0, emptyBlock0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDataRange(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedRangeXYPlot0.configureDomainAxes();
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      Color color0 = Color.darkGray;
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LINE_PAINT);
      jFreeChart0.clone();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDotRenderer0;
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(15);
      xYItemRendererArray0[1] = (XYItemRenderer) standardXYItemRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(10, 10, 300, 768);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.zoomDomainAxes((double) 10, plotRenderingInfo0, point2D0, true);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 1.0);
      xYPlot0.isRangeZeroBaselineVisible();
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(4.0, 1160.9, (-172.572209134), Double.POSITIVE_INFINITY, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      xYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Minute minute0 = new Minute();
      TimeZone.getTimeZone("Indices must be Integer instances.");
      xYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setDomainAxis(2, (ValueAxis) cyclicNumberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-1.0));
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer(flowArrangement0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(10, 1.0F, 0.05, 0.0F, Double.POSITIVE_INFINITY, blockContainer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setRangeZeroBaselineVisible(true);
      xYPlot0.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "";
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05, periodAxis0.DEFAULT_TICK_LABEL_PAINT, periodAxis0.DEFAULT_TICK_MARK_STROKE);
      categoryMarker0.setDrawAsLine(false);
      categoryMarker0.setStroke(periodAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.removeRangeMarker((-692), (Marker) categoryMarker0, (Layer) null, false);
      combinedRangeXYPlot0.getQuadrantOrigin();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      int int0 = (-1684);
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance((-1684));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      bufferedImage0.createGraphics();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.drawBackground(graphics2D0, rectangle2D_Double0);
      xYPlot0.setRangeZeroBaselineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      combinedRangeXYPlot1.drawDomainGridlines(graphics2D0, rectangle2D_Double0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedRangeXYPlot0.setRenderer(99, (XYItemRenderer) vectorRenderer0);
      Color color0 = Color.green;
      combinedRangeXYPlot0.setRangeCrosshairValue((double) vectorRenderer0.ZERO);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 1405.46281663, 1680.5925, (-2376.8959078757825), 0.0, emptyBlock0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.setDomainGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot1.getSeriesCount();
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, (-2));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      xYPlot0.isNotify();
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      combinedRangeXYPlot0.getDomainAxisEdge((-1670));
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ModuloAxis moduloAxis0 = new ModuloAxis("={UHvm&(", numberAxis0.DEFAULT_RANGE);
      moduloAxis0.setNumberFormatOverride(numberFormat0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(92, 92, 500);
      DatasetChangeEvent datasetChangeEvent0 = null;
      try {
        datasetChangeEvent0 = new DatasetChangeEvent((Object) null, waferMapDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      xYPlot0.getRangeAxis();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Color color0 = Color.darkGray;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis(",2}C4;_(|:&>", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot2.setRangeGridlineStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.setRangeCrosshairPaint(combinedDomainXYPlot2.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot1.mapDatasetToRangeAxis(34, 1989);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Collection collection0 = standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      standardEntityCollection0.equals(collection0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.panRangeAxes(0.05, plotRenderingInfo0, point2D_Double0);
      xYPlot0.setDomainGridlinePaint(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot3);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(219, 2218, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawRangeGridlines(graphics2D0, (Rectangle2D) null, vector0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.handleClick(2, 0, chartRenderingInfo0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      xYItemRendererArray0[0] = null;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot2.getSeriesCount();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{v/h_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      bufferedImage0.createGraphics();
      Point point0 = new Point(500, 10);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point1, dimension1);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(666);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2101.2);
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) cyclicNumberAxis0);
      Color color0 = Color.darkGray;
      TextBox textBox0 = new TextBox((TextBlock) null);
      Point2D.Double point2D_Double0 = new Point2D.Double((-2251.37888), (-9.0));
      vector0.add(point2D_Double0);
      Paint paint0 = textBox0.getShadowPaint();
      combinedDomainXYPlot1.setDomainZeroBaselinePaint(paint0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot2.setAxisOffset(xYPlot0.DEFAULT_INSETS);
      xYPlot0.setRangeGridlinesVisible(true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.canSelectByRegion();
      combinedDomainXYPlot0.getDomainAxis(500);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot2.getRangeMarkers(75, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot3.mapDatasetToDomainAxes(10, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "+gO");
      DateAxis dateAxis0 = new DateAxis("+gO", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      xYPlot0.setDomainCrosshairValue(1.0E-8);
      combinedRangeXYPlot0.setDomainCrosshairValue(4367.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.FOREGROUND;
      simpleTimeZone0.setStartYear(10);
      combinedDomainXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Color color0 = Color.darkGray;
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis(",2}C4;_(|:&>", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setRangeCrosshairPaint(combinedDomainXYPlot2.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot1.mapDatasetToRangeAxis(34, 1989);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Collection collection0 = standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      standardEntityCollection0.equals(collection0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.panRangeAxes(0.05, plotRenderingInfo0, point2D_Double0);
      xYPlot0.setDomainGridlinePaint(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getDomainAxisForDataset(0);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.handleClick(2, 0, chartRenderingInfo0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(Double.NaN);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getSeriesCount();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      combinedDomainXYPlot0.indexOf(xYSeriesCollection0);
      combinedDomainXYPlot0.getRangeAxisLocation(60);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double2 = new Rectangle2D.Double(0.0, 10, 8.0, 0.0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 1131, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation(15);
      combinedRangeXYPlot0.setDomainAxisLocation(10, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(10, 10, 10);
      Minute minute0 = new Minute();
      TimeZone.getTimeZone("Indices must be Integer instances.");
      minute0.previous();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Color color0 = (Color)JFreeChart.DEFAULT_BACKGROUND_PAINT;
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) dateAxis0, false);
      xYPlot0.getRangeAxisLocation(0);
      JFreeChart jFreeChart0 = new JFreeChart("ItemLabelAnchor.OUTSIDE7", dateAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, false);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 64, 2101.2, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground(graphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Path2D$Float", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(500, 52, (-203), (-4472), 3);
      Minute minute0 = new Minute(mockDate0);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(1643, axisLocation0, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, taskSeriesCollection0);
      combinedDomainXYPlot0.getQuadrantPaint(0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, (-2));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      xYPlot0.isNotify();
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      xYPlot0.addRangeMarker(274, (Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 2909);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      xYPlot0.isNotify();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer1 = Layer.FOREGROUND;
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0, layer1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.LocalizationBundle", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(500, layer0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToDomainAxes(10, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = numberAxis0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle2D_Double1, true, true);
      rectangle2D_Double1.createUnion(rectangle2D0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDataset(10, (XYDataset) timeSeriesCollection0);
      combinedRangeXYPlot1.getDomainAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, (-2));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, false, false, false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 10, 0, (-2), 10, 6, 680, 420, (-2), true, 10, (-1122), 10);
      chartPanel0.getPopupLocation(mouseWheelEvent0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes((double) 9976, (double) 1024, plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (10474.800000000001) <= upper (1075.2).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setAutoRangeMinimumSize(348.22, false);
      Range.expandToInclude(range0, 72.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(1131.0, false);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      combinedRangeXYPlot0.setRangeCrosshairStroke(moduloAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDomainAxisEdge(500);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      moduloAxis0.setNumberFormatOverride(numberFormat0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(moduloAxis0, yIntervalSeriesCollection0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedRangeXYPlot0.clearRangeAxes();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{v/h_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point(500, 10);
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point1, dimension1);
      dimension0.width = (-283);
      dimension1.clone();
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      AxisSpace axisSpace0 = new AxisSpace();
      AxisSpace axisSpace1 = combinedRangeCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
      axisSpace1.setTop(10);
      dateAxis0.configure();
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace1);
      combinedDomainXYPlot0.clearRangeAxes();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRangeMarkers(10, (Layer) null);
      Stack<XYPointerAnnotation> stack0 = new Stack<XYPointerAnnotation>();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxes((-1632), stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Range range0 = ValueAxis.DEFAULT_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("", range0);
      moduloAxis0.setAutoRangeMinimumSize(348.22, false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      combinedRangeXYPlot0.setRangeCrosshairValue(1131.0, false);
      combinedRangeXYPlot0.setRangeCrosshairVisible(false);
      combinedRangeXYPlot0.setRangeCrosshairStroke(moduloAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDomainAxisEdge(500);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      moduloAxis0.setNumberFormatOverride(numberFormat0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(moduloAxis0, yIntervalSeriesCollection0);
      combinedRangeXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedRangeXYPlot0.getAxisOffset();
      combinedRangeXYPlot0.getRangeAxisLocation();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(2, axisLocation0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      combinedDomainXYPlot0.getDomainAxis((-1067));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(500);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setRangeCrosshairPaint(combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot1);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      LegendTitle legendTitle0 = new LegendTitle(cyclicXYItemRenderer0);
      RectangleAnchor rectangleAnchor0 = legendTitle0.getLegendItemGraphicLocation();
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(10, 1.0F, textTitle0, rectangleAnchor0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYTitleAnnotation0, timeSeriesCollection0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.getQuadrantPaint(1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("http://www.jfree.org/jfreechart/index.html");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logAxis0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainZeroBaselinePaint(logAxis0.DEFAULT_AXIS_LABEL_PAINT);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(true);
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[3];
      xYItemRendererArray0[0] = (XYItemRenderer) xYAreaRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) vectorRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) vectorRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYItemRendererArray0[2], defaultIntervalXYDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.isDomainGridlinesVisible();
      combinedDomainXYPlot2.getRangeAxisIndex(logAxis0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo1.getPlotArea();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 0, layer0);
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot1.setDomainCrosshairValue((-262.60250186));
      EmptyBlock emptyBlock0 = new EmptyBlock(10, Double.POSITIVE_INFINITY);
      xYPlot0.isRangeZeroBaselineVisible();
      combinedDomainXYPlot0.equals(emptyBlock0);
      combinedDomainXYPlot1.setRangeZeroBaselineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      GeneralPath generalPath0 = new GeneralPath();
      chartRenderingInfo0.getRenderingSource();
      xYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) null);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0, true);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(9);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxisLocation((-1846), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1564.8803781397));
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      CategoryMarker categoryMarker0 = new CategoryMarker(0.05);
      combinedDomainXYPlot0.addDomainMarker(500, (Marker) categoryMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 0, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      AxisLocation axisLocation2 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      axisLocation2.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation1, true);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      EmptyBlock emptyBlock0 = new EmptyBlock(1.0E10, 0.0);
      combinedDomainXYPlot0.setDomainPannable(true);
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Quarter quarter0 = new Quarter();
      PeriodAxis periodAxis0 = new PeriodAxis("PG4f>wr/IK;\"nON", quarter0, quarter0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      MockDate mockDate0 = new MockDate(500, 2434, 807, 3, 1464);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("E)UHS~");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      xYPlot0.getRangeAxisLocation();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1084.97));
      MatrixSeries matrixSeries0 = new MatrixSeries("NO_CHANGE", 807, 2434);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      valueAxisArray0[7] = (ValueAxis) dateAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0E-8);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.getDomainTickBandPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(416.382751, 1.0E-8);
      xYPlot0.isRangeZeroBaselineVisible();
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.clearSelection();
      xYPlot0.setQuadrantPaint(3, (Paint) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      ModuloAxis moduloAxis0 = new ModuloAxis("Indices must be Integer instances.", numberAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      combinedRangeXYPlot0.setRangeGridlineStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      combinedRangeXYPlot0.getDomainGridlineStroke();
      combinedRangeXYPlot0.setAxisOffset(numberAxis0.DEFAULT_AXIS_LABEL_INSETS);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer1);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground((Graphics2D) null, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot1.setDomainZeroBaselinePaint(paint0);
      combinedDomainXYPlot1.setRangeCrosshairLockedOnData(true);
      xYPlot0.setRangeGridlinesVisible(false);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      xYItemRendererArray0[0] = (XYItemRenderer) xYDotRenderer0;
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) xYAreaRenderer0;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) xYBlockRenderer0;
      XYAreaRenderer xYAreaRenderer1 = new XYAreaRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) xYAreaRenderer1;
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(false, true);
      xYItemRendererArray0[4] = (XYItemRenderer) xYLineAndShapeRenderer0;
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      xYItemRendererArray0[5] = (XYItemRenderer) vectorRenderer0;
      combinedDomainXYPlot1.setRenderers(xYItemRendererArray0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot1, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) numberAxis0);
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedRangeXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(numberAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot2.getRangeAxisLocation(10);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      vectorRenderer0.setBaseURLGenerator((XYURLGenerator) standardXYZURLGenerator0, true);
      combinedRangeXYPlot1.setRenderer(10, (XYItemRenderer) vectorRenderer0);
      Color color0 = Color.green;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      combinedRangeXYPlot2.setDomainAxisLocation(10, axisLocation0, false);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      rectangle2D_Double0.createUnion(rectangle2D_Double1);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 1131, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawBackground(graphics2D0, rectangle2D_Double1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot1.setDomainZeroBaselinePaint(paint0);
      combinedDomainXYPlot1.setRangeCrosshairLockedOnData(false);
      xYPlot0.setRangeGridlinesVisible(false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot1, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot1.getQuadrantPaint(3);
      combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue(422.2468);
      combinedRangeXYPlot0.setDomainCrosshairValue(25.5);
      LogAxis logAxis0 = new LogAxis("Xm7");
      logAxis0.setMinorTickMarkInsideLength((-690.5459F));
      combinedRangeXYPlot0.setDomainAxis(3, (ValueAxis) logAxis0);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis(1, valueAxis0, true);
      combinedRangeXYPlot0.getRangeAxisEdge(178);
      combinedRangeXYPlot0.getOrientation();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setRangeAxisLocation(795, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      PeriodAxis periodAxis0 = new PeriodAxis("={UHvm&(");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRangeAxisLocation(500);
      xYPlot0.getRangeAxis();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      Rectangle rectangle0 = new Rectangle(10, (-2566), 6, 90);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_RIGHT;
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle0, rectangleAnchor0);
      Point2D point2D1 = convolveOp0.getPoint2D(point2D0, point2D0);
      combinedDomainXYPlot1.zoomDomainAxes(1322.0, plotRenderingInfo0, point2D1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(1393);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LogAxis logAxis0 = new LogAxis("http://www.jfree.org/jfreechart/index.html");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(3, 1322);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.setRangeAxis(12, (ValueAxis) dateAxis0, true);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-8;
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 500;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, xYPlot1.DEFAULT_OUTLINE_STROKE, xYPlot1.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      xYPlot1.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      ModuloAxis moduloAxis0 = new ModuloAxis("Indices must be Integer instances.", numberAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      LogAxis logAxis0 = new LogAxis("1?,'-/G S4y");
      logAxis0.setMinorTickMarkInsideLength(0);
      combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) numberAxis0);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection0, dateAxis0, numberAxis0, standardXYItemRenderer0);
      xYPlot0.getRangeAxisEdge(0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getOrientation();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      int int0 = 80;
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      MockDate mockDate0 = new MockDate(2725, (-2618), (-2618), 52, 80);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("E)UHS~");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((-848), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) dateAxis0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      valueAxisArray0[7] = (ValueAxis) dateAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10, 1.0E-8);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      JList<CyclicXYItemRenderer> jList0 = new JList<CyclicXYItemRenderer>();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      xYPlot0.getDomainTickBandPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(416.382751, 1.0E-8);
      xYPlot0.isRangeZeroBaselineVisible();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(10);
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      xYPlot0.setDomainAxisLocation(500, axisLocation1, false);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("k{v/h_=iO", simpleTimeZone0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      BufferedImage bufferedImage0 = new BufferedImage(500, 500, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point point0 = new Point();
      Point point1 = new Point(point0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(point1, dimension1);
      dimension0.width = (-283);
      dimension1.clone();
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_AXIS_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.calculateRangeAxisSpace(graphics2D0, rectangle2D0, (AxisSpace) null);
      dateAxis0.configure();
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      combinedDomainXYPlot0.clearRangeAxes();
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot0.canSelectByPoint();
      combinedDomainXYPlot0.getDataRange(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, false);
      xYItemRendererArray0[0] = (XYItemRenderer) xYLineAndShapeRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      xYItemRendererArray0[2] = (XYItemRenderer) xYBoxAndWhiskerRenderer0;
      String string0 = "";
      // Undeclared exception!
      try { 
        DateFormat.getDateInstance(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 10
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "s";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      combinedRangeXYPlot0.setInsets(symbolAxis0.DEFAULT_TICK_LABEL_INSETS);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(symbolAxis0.DEFAULT_AXIS_LABEL_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 743, 10, 15, 15, 2997, 10, true, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      byte[][] byteArray0 = new byte[3][8];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte)83;
      byteArray1[7] = (byte) (-5);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)83;
      byteArray3[1] = (byte)107;
      byteArray0[2] = byteArray3;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(420, byteArray0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, (RenderingHints) null);
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(chartPanel0, 214, 0L, (-3260), (byte) (-40), (byte)3, 2, (byte) (-11), (byte) (-5), false, 10);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      List list0 = xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.mapDatasetToRangeAxes(678, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis(1901, (ValueAxis) dateAxis0, true);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = 1369.5046901402;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 10;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      LinkedList<XYTitleAnnotation> linkedList0 = new LinkedList<XYTitleAnnotation>();
      // Undeclared exception!
      try { 
        xYPlot0.mapDatasetToRangeAxes((-2087), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      TimeZone.getTimeZone("Indices must be Integer instances.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) dateAxis0, true);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getGroupPaint();
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer(true, true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-337), (XYItemRenderer) xYLineAndShapeRenderer0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(550.187389662397, "");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      MockDate mockDate0 = new MockDate((-4031), 500, 500, 1760, 10);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.TAIWAN;
      locale1.getDisplayCountry();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[4] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[5] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[6] = (ValueAxis) cyclicNumberAxis0;
      valueAxisArray0[7] = (ValueAxis) cyclicNumberAxis0;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(valueAxisArray0[0]);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("", 1.0E-8, 500, 550.187389662397);
      Stroke stroke0 = categoryPointerAnnotation0.getArrowStroke();
      combinedRangeXYPlot2.setDomainCrosshairStroke(stroke0);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.getGroupPaint();
      xYPlot0.setDomainZeroBaselinePaint(combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      ModuloAxis moduloAxis0 = new ModuloAxis("Indices must be Integer instances.", numberAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = new XYPlot(xYTaskDataset0, moduloAxis0, numberAxis0, standardXYItemRenderer0);
      LogAxis logAxis1 = new LogAxis();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logAxis0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(10);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 500);
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation1, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(axisLocation0, defaultIntervalXYDataset0);
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.clearSelection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantPaint(1008, numberAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1008) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      int int0 = 1131;
      List<GradientPaint> list0 = null;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(1131, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      combinedDomainXYPlot0.setRangeAxisLocation(2, axisLocation0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(rectangle2D_Float0, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, defaultKeyedValues2DDataset0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      spiderWebPlot1.setSeriesPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      spiderWebPlot1.markerChanged(markerChangeEvent0);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setFixedLegendItems(legendItemCollection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      combinedDomainXYPlot1.getRendererForDataset(xYSeriesCollection0);
      combinedDomainXYPlot1.clearRangeMarkers(10);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.setDomainZeroBaselinePaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot1.setDomainZeroBaselinePaint(spiderWebPlot1.DEFAULT_OUTLINE_PAINT);
      combinedRangeXYPlot0.setDomainAxis(820, (ValueAxis) null, false);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation(0);
      combinedRangeXYPlot1.setDomainAxisLocation(10, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      TimeZone.getTimeZone("Indices must be Integer instances.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainGridlinesVisible(false);
      combinedRangeXYPlot0.getRangeMarkers(2958465, layer0);
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      combinedRangeXYPlot0.getRenderer();
      combinedRangeXYPlot0.getPlotType();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      JFreeChart jFreeChart0 = new JFreeChart("Combined Range XYPlot", dateAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis(10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainCrosshairValue(1.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      AxisLocation axisLocation1 = combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot1.setRangeAxisLocation(1, axisLocation1, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYIntervalSeriesCollection0, xYIntervalSeriesCollection0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis(1901, (ValueAxis) dateAxis0, true);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = 1369.5046901402;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 10;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      xYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, false);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      xYPlot0.setDomainAxes(valueAxisArray0);
      combinedDomainXYPlot0.canSelectByPoint();
      xYPlot0.setRangeCrosshairPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis(10);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      Layer layer0 = Layer.BACKGROUND;
      BasicStroke basicStroke0 = new BasicStroke();
      combinedRangeXYPlot0.setDomainCrosshairStroke(basicStroke0);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.getSeriesRenderingOrder();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = 4366;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 4366, 2.0E9, 363.121248, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (4366) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      EmptyBlock emptyBlock0 = new EmptyBlock(500, (-1293.38382865));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      regularTimePeriod0.getStart();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.getRangeCrosshairPaint();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(500, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.renderer.xy.XYDotRenderer");
      Range range0 = thermometerPlot0.getDataRange(logarithmicAxis0);
      ModuloAxis moduloAxis0 = new ModuloAxis("org.jfree.chart.renderer.xy.XYDotRenderer", range0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      ValueMarker valueMarker0 = new ValueMarker(2.0E7, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0);
      IntervalMarker intervalMarker0 = new IntervalMarker(133.238, 0, moduloAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeRangeMarker((-2544), (Marker) intervalMarker0, layer0);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      combinedRangeXYPlot0.setRangeCrosshairValue(2.302585092994046, false);
      combinedRangeXYPlot0.removeRangeMarker((Marker) valueMarker0);
      combinedRangeXYPlot0.getRenderer();
      combinedRangeXYPlot0.setDomainGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeMarkers(2, layer0);
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      combinedRangeXYPlot0.getRenderer();
      combinedRangeXYPlot0.getPlotType();
      double double0 = (-598.967636);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.data.ComparableObjectItem", moduloAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis(10);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainCrosshairValue(1.0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      AxisLocation axisLocation1 = combinedDomainXYPlot0.getDomainAxisLocation();
      combinedDomainXYPlot1.setRangeAxisLocation(1, axisLocation1, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYIntervalSeriesCollection0, xYIntervalSeriesCollection0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-364) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 3);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(45, (Marker) categoryMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateAxis0.DEFAULT_DATE_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = new XYPlot(xYTaskDataset0, logAxis0, dateAxis0, standardXYItemRenderer0);
      LogAxis logAxis1 = new LogAxis();
      xYPlot0.setRangeAxis((ValueAxis) dateAxis0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 3);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.setRangeCrosshairValue((-3677.376418), false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeGridlineStroke();
      combinedDomainXYPlot0.getDomainCrosshairStroke();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      numberAxis0.setUpArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.LocalizationBundle", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.clone();
      combinedRangeXYPlot1.getDomainAxisLocation();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setTickLabelsVisible(false);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0, false);
      numberAxis3D0.setLabelToolTip("77$ cE5?Cbo2B");
      combinedRangeXYPlot0.setRangeAxis(11, (ValueAxis) numberAxis3D0, true);
      JFreeChart jFreeChart0 = new JFreeChart(">SB7^VF2#|FMD", combinedRangeCategoryPlot0.DEFAULT_VALUE_LABEL_FONT, combinedRangeXYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 10, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      combinedRangeXYPlot0.drawBackground(graphics2D0, rectangle0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeTickBandPaint((Paint) null);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 82, layer0);
      xYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1359.7579024166));
      EmptyBlock emptyBlock0 = new EmptyBlock(10, 921.594267165);
      xYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(10, 3);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.removeDomainMarker(45, (Marker) categoryMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis("", dateAxis0.DEFAULT_DATE_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LogAxis logAxis0 = new LogAxis();
      XYPlot xYPlot0 = new XYPlot(xYTaskDataset0, logAxis0, dateAxis0, standardXYItemRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-771.22598316994), 1, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDataset(15);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYPlot0, defaultKeyedValues2DDataset0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      spiderWebPlot1.setSeriesPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      combinedDomainXYPlot0.getRendererForDataset(xYSeriesCollection0);
      combinedDomainXYPlot0.clearRangeMarkers(10);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      xYPlot0.getFixedLegendItems();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer0 = Layer.BACKGROUND;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ModuloAxis moduloAxis0 = new ModuloAxis("^,T0&kjC]hYXk5wH", numberAxis3D0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      XYPlot xYPlot1 = new XYPlot(defaultIntervalXYDataset0, moduloAxis0, moduloAxis0, standardXYItemRenderer0);
      ArrayList<AxisLocation> arrayList0 = new ArrayList<AxisLocation>();
      // Undeclared exception!
      try { 
        xYPlot1.mapDatasetToDomainAxes((-1791), arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(500, 2.0F);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1000L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      regularTimePeriod0.getStart();
      Class<XYSeriesCollection> class0 = XYSeriesCollection.class;
      RegularTimePeriod.downsize(class0);
      PeriodAxis periodAxis0 = new PeriodAxis(" (", regularTimePeriod0, fixedMillisecond0);
      LogAxis logAxis0 = new LogAxis(".");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis(21);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Double1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 1121, layer0);
      xYPlot0.setRangeCrosshairValue((double) 10);
      xYPlot0.setRangeCrosshairPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.zoomRangeAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(0, 23);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      xYPlot0.setRangeCrosshairValue(4.561827255888319, true);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.setDomainAxisLocation(axisLocation0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((-2343), combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-2343) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      combinedRangeXYPlot0.setRangeCrosshairValue((double) 0, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(combinedDomainXYPlot0, defaultKeyedValues2DDataset0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(defaultKeyedValues2DDataset0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      SpiderWebPlot spiderWebPlot1 = new SpiderWebPlot();
      spiderWebPlot1.setSeriesPaint(spiderWebPlot0.DEFAULT_OUTLINE_PAINT);
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.0);
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent(intervalMarker0);
      spiderWebPlot1.markerChanged(markerChangeEvent0);
      LegendItemCollection legendItemCollection0 = new LegendItemCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setFixedLegendItems(legendItemCollection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      combinedDomainXYPlot1.getRendererForDataset(xYSeriesCollection0);
      combinedDomainXYPlot1.clearRangeMarkers(10);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, false, false, false, true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 17, 10, 1940, 10, 9999, 6, 17, 21, false, 62, 200, 10);
      chartPanel0.getPopupLocation(mouseWheelEvent0);
      combinedDomainXYPlot1.zoomDomainAxes(0.25, 0.0, plotRenderingInfo0, (Point2D) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.getGraphics();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(3);
      combinedRangeXYPlot0.setDomainCrosshairPaint(jFreeChart0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      rectangle2D_Double0.createUnion(rectangle2D_Double0);
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(500);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(combinedRangeXYPlot0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      xYPlot0.canSelectByRegion();
      xYPlot0.getDomainAxis(10);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis(1901, (ValueAxis) dateAxis0, true);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = 1369.5046901402;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 10;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      xYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0, false);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangeCrosshairVisible();
      int int0 = 737;
      Hashtable<AttributedCharacterIterator.Attribute, DefaultWindDataset> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, DefaultWindDataset>(737, 737);
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      JFreeChart jFreeChart0 = new JFreeChart("-;", font0, combinedRangeXYPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(15, 737, (-1846));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1846
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.setDomainCrosshairStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 3);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0, "");
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) cyclicNumberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1272.50638, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.0F, 1.0, (-2747.004133), 0.0, 2.0F, emptyBlock0);
      PeriodAxis periodAxis0 = new PeriodAxis("Empty list not permitted.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot1.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot1.getRangeAxisForDataset(0);
      combinedRangeXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      cyclicNumberAxis0.setRangeAboutValue(1.0F, 1.0F);
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 1405.46281663, 1680.5925, 238.705841, 0.0, emptyBlock0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      combinedDomainXYPlot0.setDataset((XYDataset) vectorSeriesCollection0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("+gO", simpleTimeZone0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      xYPlot0.setDomainCrosshairValue(1.0E-8);
      LogAxis logAxis0 = new LogAxis("Xm7");
      logAxis0.setMinorTickMarkInsideLength(10);
      combinedRangeXYPlot0.setDomainAxis(10, (ValueAxis) dateAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 2.0F);
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      Stack<AxisLocation> stack0 = new Stack<AxisLocation>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(500, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 0, valueAxis0.DEFAULT_AXIS_LINE_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_GRIDLINE_PAINT, xYPlot0.DEFAULT_OUTLINE_STROKE, 0);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateAxis dateAxis0 = new DateAxis("", timeZone0);
      dateAxis0.valueToJava2D(0.0, defaultCaret0, (RectangleEdge) null);
      xYPlot0.setRangeAxis(0, (ValueAxis) null, true);
      xYPlot0.getFixedRangeAxisSpace();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle rectangle0 = new Rectangle(10, 10);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.isNotify();
      xYPlot0.getLegendItems();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, timePeriodValuesCollection0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      timeSeriesCollection0.removeChangeListener(spiderWebPlot0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(symbolAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDataset((-2049870753), (XYDataset) timePeriodValuesCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      xYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedRangeXYPlot0.setRenderer(90, (XYItemRenderer) vectorRenderer0);
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      xYPlot0.setDomainZeroBaselineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis(21);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Double1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 1121, layer0);
      xYPlot0.setRangeCrosshairValue((double) 10);
      xYPlot0.setRangeCrosshairPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      valueAxisArray0[0] = null;
      valueAxisArray0[1] = null;
      valueAxisArray0[2] = null;
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      xYPlot0.setDomainZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      Vector<Point2D.Double> vector0 = new Vector<Point2D.Double>(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      xYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.getRangeAxisEdge();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      xYPlot0.getDatasetRenderingOrder();
      combinedDomainXYPlot0.getRangeAxis(500);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.removeDomainMarker(8, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, dateAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYPlot xYPlot1 = new XYPlot(xYTaskDataset0, moduloAxis0, moduloAxis0, (XYItemRenderer) null);
      xYPlot1.getDataset((-1630));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.valueToJava2D(0, rectangle0, (RectangleEdge) null);
      xYPlot0.setRangeAxis(6, (ValueAxis) dateAxis0, false);
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      // Undeclared exception!
      try { 
        xYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      combinedRangeXYPlot0.setDomainCrosshairValue(3675.271103);
      LogAxis logAxis0 = new LogAxis("");
      logAxis0.setMinorTickMarkInsideLength(0);
      combinedRangeXYPlot0.setDomainAxis(0, (ValueAxis) logAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-362.0), 1.0F);
      combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      Stack<AxisLocation> stack0 = new Stack<AxisLocation>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.valueToJava2D(0, rectangle0, (RectangleEdge) null);
      xYPlot0.setRangeAxis(6, (ValueAxis) dateAxis0, false);
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      xYPlot0.clearSelection();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint(1048, dateAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1048) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      ModuloAxis moduloAxis0 = new ModuloAxis("mw^wwh", dateAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      XYPlot xYPlot1 = null;
      try {
        xYPlot1 = new XYPlot(xYTaskDataset0, moduloAxis0, dateAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 14.0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle((-1110), (-1110));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      combinedRangeXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot0.getDomainTickBandPaint();
      combinedRangeXYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      combinedRangeXYPlot0.removeDomainMarker(274, (Marker) intervalMarker0, (Layer) null, false);
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = new DateAxis();
      dateAxis1.valueToJava2D(2.0F, rectangle0, (RectangleEdge) null);
      combinedRangeXYPlot0.setRangeAxis(500, (ValueAxis) dateAxis1, false);
      combinedRangeXYPlot0.addRangeMarker((Marker) intervalMarker0, (Layer) null);
      SeriesRenderingOrder seriesRenderingOrder0 = combinedRangeXYPlot0.getSeriesRenderingOrder();
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      DateAxis.createStandardDateTickUnits();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.0);
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation1, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0F, 1.0F);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultIntervalXYDataset0, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (10) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("A>XRuk[F");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setRangeMinorGridlinePaint(thermometerPlot0.DEFAULT_OUTLINE_PAINT);
      double double0 = (-1270.0216);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      chartRenderingInfo1.getPlotInfo();
      byte[][] byteArray0 = new byte[4][7];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte) (-54);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)73;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)2;
      byteArray1[8] = (byte) (-76);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte) (-76);
      byteArray3[2] = (byte) (-17);
      byteArray3[3] = (byte)50;
      byteArray3[4] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)73;
      byteArray4[1] = (byte)2;
      byteArray4[2] = (byte)73;
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte)73;
      byteArray4[5] = (byte) (-33);
      byteArray0[3] = byteArray4;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(500, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      xYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, false);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        xYPlot0.setRangeAxis((-76), (ValueAxis) dateAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Layer layer0 = Layer.BACKGROUND;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.clearSelection();
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      ModuloAxis moduloAxis0 = new ModuloAxis("^,T0&kjC]hYXk5wH", numberAxis0.DEFAULT_RANGE);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(timeSeriesCollection1, numberAxis3D0, moduloAxis0, standardXYItemRenderer0);
      xYPlot0.getDataset(8);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      LogAxis logAxis0 = new LogAxis("Null 'origin' argument.");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo1.equals(combinedRangeXYPlot1);
      combinedRangeXYPlot1.zoomRangeAxes(0.0, plotRenderingInfo1, (Point2D) point2D_Double0);
      LogAxis logAxis1 = new LogAxis();
      combinedRangeXYPlot1.setRangeAxis((ValueAxis) logAxis1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setWeight((-441));
      xYPlot0.setDomainCrosshairVisible(false);
      xYPlot0.getRangeAxisEdge();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      xYPlot0.getRangeAxisCount();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainTickBandPaint();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeAxisLocation((-2544), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, false);
      DateAxis dateAxis1 = new DateAxis();
      RectangleEdge rectangleEdge0 = null;
      JFreeChart jFreeChart0 = new JFreeChart("-2em{jj%OR", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 0, 2178, (-878), 6, 2000, true, true, true, true, true, true, false);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(chartPanel0, (-1406), (-4193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(0, 4032);
      TimeZone timeZone0 = TimeZone.getTimeZone("DateTickUnitType.YEAR");
      DateAxis dateAxis0 = new DateAxis("Null 'axisIndex' argument.", timeZone0);
      dateAxis0.valueToJava2D((-1519.9363123243), rectangle0, (RectangleEdge) null);
      xYPlot0.setRangeAxis(310, (ValueAxis) dateAxis0, true);
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
      xYPlot0.getFixedRangeAxisSpace();
      xYPlot0.setFixedRangeAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      Marker marker0 = null;
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Empty list not permitted.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 500, layer0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(306, axisLocation0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-1022.8492229453351), 1.0E-8);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.0, 500, (-1022.8492229453351), (-4183.237183249), 543.416527, emptyBlock0);
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, false);
      combinedRangeXYPlot0.getDataset(72);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      combinedRangeXYPlot0.setRangeGridlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot0.getRangeAxisLocation(3);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getLegendItems();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, timePeriodValuesCollection0);
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      spiderWebPlot0.setSeriesPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond0, fixedMillisecond0);
      LogAxis logAxis0 = new LogAxis("");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point2D_Double0);
      LogAxis logAxis1 = new LogAxis();
      xYPlot0.setRangeAxis((ValueAxis) logAxis1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisIndex(numberAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-1701), (ValueAxis) numberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(500, 500, (-18), 52, 10);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("Indices must be Integer instances.", minute0, regularTimePeriod0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 0.0F, 1503.43);
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeXYPlot1, flowArrangement0, flowArrangement0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-1751.49413144243), 0.0, 4.0, 1.0E-8, 1.0, legendTitle0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      combinedRangeXYPlot1.setRangeZeroBaselineVisible(false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getRangeAxisForDataset((-359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -359 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds((-1058), 10);
      dateAxis0.valueToJava2D((-458.4230400231), (Rectangle2D) null, (RectangleEdge) null);
      xYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, true);
      xYPlot0.addRangeMarker((Marker) intervalMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      Layer layer0 = Layer.BACKGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("org.jfree.chart.event.ChartChangeEventType", decimalFormat0, decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYZToolTipGenerator0);
      candlestickRenderer0.getBaseFillPaint();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(2, 0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo1.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainXYPlot0.panRangeAxes(0.0, plotRenderingInfo0, point2D_Double0);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(500, 500, (-18), 52, 10);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("z|\"co>}>8dSb@7,", regularTimePeriod0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisIndex(periodAxis0);
      combinedRangeXYPlot1.setDomainAxis(2, (ValueAxis) periodAxis0, false);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(0);
      xYPlot0.setDomainAxisLocation(59, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, 0.0F, "={UHvm&(");
      xYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      xYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis(21);
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Double1);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle2D0, 1121, layer0);
      xYPlot0.setRangeCrosshairValue((double) 10);
      xYPlot0.setRangeCrosshairPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      LinkedHashSet<DefaultKeyedValueDataset> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<DefaultKeyedValueDataset>(1121, (-398.8941F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -398.8941
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 500);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-11.820309017543817), "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1405.46281663, 2.0E7);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("={UHvm&(", regularTimePeriod0, regularTimePeriod0);
      LogAxis logAxis0 = new LogAxis("={UHvm&(");
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.zoomRangeAxes((double) 500, plotRenderingInfo0, (Point2D) point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      Color color0 = (Color)CyclicNumberAxis.DEFAULT_ADVANCE_LINE_PAINT;
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.setRangeAxis(6, (ValueAxis) dateAxis0, false);
      xYPlot0.getRangeAxisEdge(90);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.setDomainMinorGridlineStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      DateAxis.createStandardDateTickUnits();
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      EmptyBlock emptyBlock0 = new EmptyBlock(1405.46281663, 2.0E7);
      xYPlot0.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue((double) 2.0F);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0F, "={UHvm&(");
      combinedRangeXYPlot0.setDomainAxis(500, (ValueAxis) numberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1546.5916, 0.0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(2.0F, 1405.46281663, 1680.5925, 238.705841, 0.0, emptyBlock0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      MockDate mockDate0 = new MockDate(500, 500, (-18), 52, 10);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("Indices must be Integer instances.", minute0, regularTimePeriod0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.clone();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.getDomainAxisIndex((ValueAxis) null);
      combinedRangeXYPlot1.setDomainAxis(0, (ValueAxis) dateAxis0, true);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxisLocation((-1846), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Layer layer0 = Layer.BACKGROUND;
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      combinedRangeXYPlot0.setDataset(80, (XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      Layer layer0 = Layer.BACKGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("org.jfree.chart.event.ChartChangeEventType", decimalFormat0, decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYZToolTipGenerator0);
      candlestickRenderer0.getBaseFillPaint();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(2, 0);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      xYPlot0.getRendererCount();
      combinedDomainXYPlot0.configureRangeAxes();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      combinedDomainXYPlot0.setDatasetGroup(datasetGroup0);
      combinedDomainXYPlot0.setRangeAxisLocation(672, (AxisLocation) null, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedDomainXYPlot0.setRangeCrosshairValue((double) 672);
      TextBox textBox0 = new TextBox();
      Paint paint0 = textBox0.getBackgroundPaint();
      combinedDomainXYPlot0.setRangeCrosshairPaint(paint0);
      LinkedHashSet<DefaultKeyedValueDataset> linkedHashSet0 = new LinkedHashSet<DefaultKeyedValueDataset>(672, 3225.836F);
      LinkedList<DefaultKeyedValueDataset> linkedList0 = new LinkedList<DefaultKeyedValueDataset>(linkedHashSet0);
      Font font0 = PeriodAxisLabelInfo.DEFAULT_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Null 'location' for index 0 not permitted.", font0, combinedDomainXYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-5486), (-5486), (double) (-398.8941F), (-2859.410377115698), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-5486) and height (-5486) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Empty list not permitted.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      plotRenderingInfo0.getPlotArea();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 500, layer0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(306, axisLocation0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Point2D.Double point2D_Double0 = new Point2D.Double(10, 0.0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(point2D_Double0, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.05, "={UHvm&(");
      EmptyBlock emptyBlock0 = new EmptyBlock(1405.46281663, 2.0E7);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(1.0E-8, 2.0F, 0.0, 2.0F, 2.0E7, emptyBlock0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) dateAxis0, true);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1.0F, 10);
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.getRenderer((-2087));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
      combinedDomainXYPlot0.clearRangeMarkers(1);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      xYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.setRangeAxis(6, (ValueAxis) dateAxis0, false);
      xYPlot0.addDomainMarker(500, (Marker) intervalMarker0, layer0);
      xYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      datasetGroup0.clone();
      combinedDomainXYPlot0.setDatasetGroup(datasetGroup0);
      combinedDomainXYPlot0.setRangeAxisLocation(672, (AxisLocation) null, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(defaultIntervalXYDataset0, defaultIntervalXYDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getRangeMarkers(layer0);
      Paint paint0 = xYPlot0.getRangeMinorGridlinePaint();
      xYPlot0.clearDomainMarkers();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Stroke stroke0 = xYShapeRenderer0.getGuideLineStroke();
      xYPlot0.setRangeMinorGridlineStroke(stroke0);
      xYPlot0.setDomainMinorGridlinePaint(paint0);
      xYPlot0.getDomainGridlinePaint();
      xYPlot0.clearRangeMarkers();
      GeneralPath generalPath0 = new GeneralPath(xYShapeRenderer0.DEFAULT_SHAPE);
      xYPlot0.select(generalPath0, (Rectangle2D) null, (RenderingSource) null);
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_PAINT;
      xYPlot0.setDomainMinorGridlinePaint(color0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      String string0 = "uv/Txtg";
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(10, (-4533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(10, layer0);
      combinedRangeXYPlot0.getPlotType();
      combinedRangeXYPlot0.getDataRange(numberAxis0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      chartRenderingInfo0.clear();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(0, 23);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(chartPanel0, (-686), 300, 10, (-2799), (-1756), (-227), 0, (-892), false, menuElementArray0, menuSelectionManager0);
      Point point0 = menuDragMouseEvent0.getLocationOnScreen();
      rectangle0.contains((Point2D) point0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0, true);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      xYPlot0.setRangeCrosshairValue(0.0, true);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      xYPlot0.setDomainAxisLocation(axisLocation0, true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      xYPlot0.setDomainAxisLocation(axisLocation1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      Layer layer0 = Layer.BACKGROUND;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("org.jfree.chart.event.ChartChangeEventType", decimalFormat0, decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYZToolTipGenerator0);
      candlestickRenderer0.getBaseFillPaint();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(2, 0);
      Locale locale0 = Locale.GERMAN;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairStroke(dateAxis0.DEFAULT_TICK_MARK_STROKE);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = new LinkedHashSet<AxisState>();
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeAxisLocation((-4533));
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      combinedDomainXYPlot0.setRenderer(1, (XYItemRenderer) xYShapeRenderer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      int int0 = (-2005);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setRenderer((-2005), (XYItemRenderer) vectorRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      xYPlot0.getRangeMarkers(layer0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot1.setDomainMinorGridlinesVisible(false);
      combinedRangeXYPlot0.setRangeGridlinesVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot2.getRangeAxisLocation(10);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) vectorRenderer0);
      combinedRangeXYPlot2.setRenderer(4381, (XYItemRenderer) vectorRenderer0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "ZOOM_RANGE_BOTH");
      cyclicNumberAxis0.setVerticalTickLabels(false);
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(474.56402, 680, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis1);
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      combinedDomainXYPlot0.clearRangeMarkers(200);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      standardEntityCollection0.getEntities();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainXYPlot0.panRangeAxes(1.0F, plotRenderingInfo0, point2D_Double0);
      xYPlot0.setRangeZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedDomainXYPlot0.clearRangeMarkers(768);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)46;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)6;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(2, byteArray0);
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_DOMAIN", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((int) (byte) (-71), 21, 847, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 847
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      Collection collection0 = new Vector<Point2D.Double>(500);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      Paint paint0 = combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      xYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) vectorRenderer0);
      combinedRangeXYPlot0.setRenderer(90, (XYItemRenderer) vectorRenderer0);
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      xYPlot0.setRangeGridlinesVisible(true);
      combinedRangeXYPlot0.getRangeAxisLocation(500);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) vectorRenderer0);
      combinedRangeXYPlot0.setRenderer(80, (XYItemRenderer) vectorRenderer0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertNotNull(xYPlot0);
      
      List list0 = xYPlot0.getAnnotations();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle rectangle0 = new Rectangle(10, 0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNotNull(spiderWebPlot0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, timePeriodValuesCollection0);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(datasetChangeEvent0);
      
      spiderWebPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      spiderWebPlot0.setSeriesPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      
      LegendItemCollection legendItemCollection1 = spiderWebPlot0.getLegendItems();
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertEquals(0, legendItemCollection1.getItemCount());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
      assertNotNull(legendItemCollection1);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertEquals(0, legendItemCollection1.getItemCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertFalse(spiderWebPlot0.isSubplot());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset(timePeriodValuesCollection0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(xYItemRenderer0);
      
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearRangeMarkers(10);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      Collection collection0 = standardEntityCollection0.getEntities();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(collection0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertNotNull(plotRenderingInfo1);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotNull(point2D_Double0);
      
      combinedDomainXYPlot0.panRangeAxes(270.0, plotRenderingInfo0, point2D_Double0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      
      combinedDomainXYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1476.405268, 10);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getColumnHeader();
      Layer layer0 = Layer.FOREGROUND;
      rectangle2D_Double0.setFrameFromCenter(0.0, 72.0, (double) 1.0F, 0.0);
      CategoryMarker categoryMarker0 = new CategoryMarker(0.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.getRenderer((-2105));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      int int0 = 3;
      jFreeChart0.setAntiAlias(false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1355.695895, 10, "ZOOM_IN_DOMAIN");
      cyclicNumberAxis0.setVerticalTickLabels(false);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      Layer layer1 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(768, layer0);
      xYPlot0.setRangeZeroBaselineVisible(true);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F, "");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setVerticalTickLabels(true);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedRangeXYPlot0.getDatasetRenderingOrder();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(10, layer0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true);
      xYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(10, 0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getLegendItems();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(spiderWebPlot0, timePeriodValuesCollection0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2754.3295);
      candlestickRenderer0.getBaseFillPaint();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairPaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(1, 407);
      Layer layer1 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainMarkers(407, layer0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Rectangle rectangle0 = new Rectangle(4032, (-2209));
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      IntervalMarker intervalMarker0 = new IntervalMarker(644.2656191556914, (-281.9951));
      combinedRangeXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      combinedRangeXYPlot0.getDomainTickBandPaint();
      combinedRangeXYPlot0.getLegendItems();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker(0, (Marker) intervalMarker0, layer0, false);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1877), (ValueAxis) dateAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Empty list not permitted.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clear();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      combinedDomainXYPlot1.setDomainAxis((ValueAxis) logAxis0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(combinedDomainXYPlot1.DEFAULT_OUTLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      combinedRangeXYPlot0.getRendererCount();
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(0, 300);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0, true);
      xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      xYPlot0.getDomainTickBandPaint();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(200, 768);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(0.0, 1443.9449027, 2.5E-4, 420, 1.0E-8, emptyBlock0);
      xYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, false);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      MockDate mockDate0 = new MockDate(64, 35, 4, 64, 0);
      Minute minute0 = new Minute(mockDate0);
      Locale locale0 = Locale.FRENCH;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(yIntervalSeriesCollection0, yIntervalSeriesCollection0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.LocalizationBundle", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.getDomainAxis();
      combinedRangeXYPlot0.getSeriesCount();
      combinedRangeXYPlot0.clone();
      combinedRangeXYPlot0.getDomainAxisIndex(periodAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-1840700268), (ValueAxis) numberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-11.820309017543817), "={UHvm&(");
      xYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      EmptyBlock emptyBlock0 = new EmptyBlock(1405.46281663, 2.0E7);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(1.0E-8, 2.0F, 0.0, 2.0F, 2.0E7, emptyBlock0);
      xYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      xYPlot0.setDomainTickBandPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(836);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 836 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      MockDate mockDate0 = new MockDate(64, 35, 4, 21, 0);
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals((-97038000000L), minute0.getLastMillisecond());
      assertEquals((-97038000000L), minute0.getFirstMillisecond());
      assertEquals(21, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertNotNull(minute0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Index ");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", minute0, minute0, timeZone0, locale0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals(21, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("Index ", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertNotNull(periodAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals(21, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("Index ", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertNotNull(combinedRangeXYPlot0);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis();
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals(21, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("Index ", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertNull(valueAxis0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(minute0, periodAxis0.DEFAULT_AXIS_LINE_PAINT, valueAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals(21, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("Index ", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("Sun Dec 04 21:00:00 GMT 1966", mockDate0.toString());
      assertEquals(21, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals("Index ", periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      combinedRangeXYPlot0.setRangeGridlinePaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      Paint paint0 = combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(true);
      xYPlot0.setRangeGridlinesVisible(true);
      combinedDomainXYPlot0.getDomainMinorGridlinePaint();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1476.405268, 10);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.validate();
      jScrollPane0.getColumnHeader();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.getRenderer((-2105));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.setAntiAlias(false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, "BbKc0Q,)hK*s`F");
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((-2105), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue((double) 500);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertNotNull(xYPlot0);
      
      List list0 = xYPlot0.getAnnotations();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("org.jfree.chart.event.ChartChangeEventType", decimalFormat0, decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10, false, standardXYZToolTipGenerator0);
      candlestickRenderer0.getBaseFillPaint();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("", zoneInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.setRangeCrosshairPaint(dateAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.mapDatasetToRangeAxis(2, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1766), "L&`cDz$9&");
      DateAxis dateAxis1 = new DateAxis("qu\u0006k_$W6st,'c", simpleTimeZone0);
      Day day0 = new Day(dateAxis1.DEFAULT_ANCHOR_DATE);
      Locale locale0 = Locale.GERMAN;
      PeriodAxis periodAxis0 = new PeriodAxis("FZe/)6E]cb[iu", day0, day0, zoneInfo0, locale0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      combinedDomainXYPlot0.getRangeCrosshairValue();
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainMarkers(layer1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(500);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(xYItemRenderer0);
      
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertNotNull(graphics2D0);
      
      Rectangle rectangle0 = null;
      try {
        rectangle0 = new Rectangle((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 10, 1.0F, (-1024.326753511426), 1.0F, 10);
      assertEquals((-1024.326753511426), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(10.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals((-1024.326753511426), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(10.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultHeatMapDataset0.setGroup(datasetGroup0);
      assertEquals((-1024.326753511426), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(10.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      
      DatasetGroup datasetGroup1 = defaultHeatMapDataset0.getGroup();
      assertSame(datasetGroup1, datasetGroup0);
      assertEquals((-1024.326753511426), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(10.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals("NOID", datasetGroup1.getID());
      assertNotNull(datasetGroup1);
      
      combinedDomainXYPlot0.setDatasetGroup(datasetGroup1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(datasetGroup1, datasetGroup0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals((-1024.326753511426), defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(10.0, defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals(1.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals("NOID", datasetGroup1.getID());
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) stackedXYAreaRenderer2_0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer2_0.isOutline());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertTrue(stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      
      combinedDomainXYPlot0.setDomainCrosshairValue((-1.0), false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals((-1.0), combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals((-1.0), SpiderWebPlot.DEFAULT_MAX_VALUE, 0.01);
      assertEquals(0.25, SpiderWebPlot.DEFAULT_INTERIOR_GAP, 0.01);
      assertEquals(0.4, SpiderWebPlot.MAX_INTERIOR_GAP, 0.01);
      assertEquals(90.0, SpiderWebPlot.DEFAULT_START_ANGLE, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.1, SpiderWebPlot.DEFAULT_AXIS_LABEL_GAP, 0.01);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.01, SpiderWebPlot.DEFAULT_HEAD, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01);
      assertTrue(spiderWebPlot0.isWebFilled());
      assertFalse(spiderWebPlot0.isSubplot());
      assertTrue(spiderWebPlot0.isOutlineVisible());
      assertTrue(spiderWebPlot0.isNotify());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01);
      assertNotNull(spiderWebPlot0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("%Y", (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNotNull(xYPlot0);
      
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(valueAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getDomainMarkers(layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      
      Collection collection1 = xYPlot0.getRangeMarkers(layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection1);
      
      xYPlot0.setDomainCrosshairValue((double) 500);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(500.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "={UHvm&(");
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals("={UHvm&(", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNotNull(cyclicNumberAxis0);
      
      xYPlot0.setDomainAxis(500, (ValueAxis) cyclicNumberAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(500.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(501, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals("={UHvm&(", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertNull(valueAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      
      Collection collection1 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection1);
      
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.05, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      
      int int0 = (-1167);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-1167), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNotNull(xYPlot0);
      
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(valueAxis0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      SymbolAxis symbolAxis0 = new SymbolAxis((String) null, stringArray0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(4, stringArray0.length);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabel());
      assertNotNull(symbolAxis0);
      
      boolean boolean0 = symbolAxis0.hasListener(xYPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(4, stringArray0.length);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertTrue(symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01);
      assertFalse(symbolAxis0.isVerticalTickLabels());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertNull(symbolAxis0.getLabelURL());
      assertFalse(symbolAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isGridBandsVisible());
      assertFalse(symbolAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAutoRange());
      assertFalse(symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01);
      assertEquals(0, symbolAxis0.getMinorTickCount());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(symbolAxis0.isInverted());
      assertFalse(symbolAxis0.getAutoRangeStickyZero());
      assertNull(symbolAxis0.getLabel());
      assertFalse(boolean0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(color1, color0);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(255, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals((-16776961), color1.getRGB());
      assertFalse(color1.equals((Object)color0));
      assertNotNull(color1);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(valueAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart((String) null, valueAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RenderingHints renderingHints1 = jFreeChart0.getRenderingHints();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertSame(renderingHints1, renderingHints0);
      assertFalse(renderingHints1.isEmpty());
      assertEquals(1, renderingHints1.size());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(renderingHints1);
      
      RescaleOp rescaleOp0 = new RescaleOp(1553.0171F, 500, renderingHints1);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(renderingHints1.isEmpty());
      assertEquals(1, renderingHints1.size());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, rescaleOp0.getNumFactors());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(rescaleOp0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(xYPlot0);
      
      List list0 = xYPlot0.getAnnotations();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertNotNull(chartPanel0);
      
      Rectangle rectangle0 = new Rectangle(0, 0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.scale(rectangle0);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      plotRenderingInfo0.setDataArea(rectangle2D_Double0);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)RectangleAnchor.coordinates(rectangle2D_Double0, rectangleAnchor0);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(point2D_Double0);
      
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.y, 0.01);
      assertEquals(0.0, point2D_Double0.x, 0.01);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isRangeZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getUseBuffer());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertFalse(boolean0);
      
      Paint paint0 = xYPlot0.getDomainTickBandPaint();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(paint0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(legendItemCollection0);
      
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor0.toString());
      assertNotNull(textAnchor0);
      
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      assertEquals("TextAnchor.BASELINE_RIGHT", textAnchor0.toString());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      xYPlot0.setRangeCrosshairValue(0.0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotNull(axisLocation1);
      
      xYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      
      boolean boolean1 = xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      xYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 10, 1476.405268, 10);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1476.405268, rectangle2D_Double0.width, 0.01);
      assertEquals(1486.405268, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(748.202634, rectangle2D_Double0.getCenterX(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jScrollPane0);
      
      JViewport jViewport0 = jScrollPane0.getColumnHeader();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertNull(jViewport0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(10.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(boolean0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer((-2105));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(xYItemRenderer0);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      int int0 = 3;
      jFreeChart0.setAntiAlias(false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertNotNull(graphics2D0);
      
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0, rectangle2D_Double0.height, 0.01);
      assertEquals(10.0, rectangle2D_Double0.x, 0.01);
      assertEquals(10.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1476.405268, rectangle2D_Double0.width, 0.01);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1486.405268, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(20.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(15.0, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(748.202634, rectangle2D_Double0.getCenterX(), 0.01);
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, 1.0, 1476.405268, 1.0);
      assertEquals(1476.405268, rectangle2D_Double0.width, 0.01);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01);
      assertEquals(739.202634, rectangle2D_Double0.getCenterX(), 0.01);
      assertEquals(1477.405268, rectangle2D_Double0.getMaxX(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01);
      assertNotNull(rectangle2D_Double0);
      
      JScrollPane jScrollPane0 = new JScrollPane();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jScrollPane0);
      
      JViewport jViewport0 = jScrollPane0.getColumnHeader();
      assertFalse(jScrollPane0.getIgnoreRepaint());
      assertTrue(jScrollPane0.getFocusTraversalKeysEnabled());
      assertFalse(jScrollPane0.isFocusTraversalPolicySet());
      assertFalse(jScrollPane0.isFocusCycleRoot());
      assertFalse(jScrollPane0.isFocusTraversalPolicyProvider());
      assertNull(jViewport0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.setDomainCrosshairValue(1.0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      Point point0 = new Point(10, 38);
      assertEquals(38, point0.y);
      assertEquals(10, point0.x);
      assertEquals(38.0, point0.getY(), 0.01);
      assertEquals(10.0, point0.getX(), 0.01);
      assertNotNull(point0);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Point2D point2D0 = generalPath0.getCurrentPoint();
      assertEquals(1, generalPath0.getWindingRule());
      assertNull(point2D0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "Empty list not permitted.";
      LogAxis logAxis0 = new LogAxis("Empty list not permitted.");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals("Empty list not permitted.", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertNotNull(logAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals("Empty list not permitted.", logAxis0.getLabel());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getPlotArea();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(rectangle2D0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 500, layer0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertTrue(logAxis0.isAutoRange());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01);
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals("Empty list not permitted.", logAxis0.getLabel());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertTrue(logAxis0.isVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = null;
      try {
        defaultHeatMapDataset0 = new DefaultHeatMapDataset(836, (-2098), 0.05, 2145.44106034, 1.0E-8, 1052.83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'ySamples' > 0
         //
         verifyException("org.jfree.data.general.DefaultHeatMapDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNotNull(xYPlot0);
      
      List list0 = xYPlot0.getAnnotations();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle rectangle0 = new Rectangle(10, 0);
      assertEquals(10, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getWidth(), 0.01);
      assertEquals(5.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertFalse(boolean0);
      
      Paint paint0 = xYPlot0.getDomainTickBandPaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(paint0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation1.toString());
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertNotNull(axisLocation1);
      
      boolean boolean1 = xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNotNull(dateAxis0);
      
      xYPlot0.setRangeAxis(6, (ValueAxis) dateAxis0, false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(7, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertFalse(dateAxis0.isPositiveArrowVisible());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.setWeight(6);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(6, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxis((-1), (ValueAxis) numberAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      MockDate mockDate0 = new MockDate(10, 0, 500, 52, 52);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Indices must be Integer instances.");
      Locale locale0 = Locale.FRENCH;
      minute0.previous();
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.plot.LocalizationBundle", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.getDomainAxis();
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      MockDate mockDate0 = new MockDate(64, 35, 4, 21, 0);
      Minute minute0 = new Minute(mockDate0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Index ");
      Locale locale0 = Locale.FRENCH;
      PeriodAxis periodAxis0 = new PeriodAxis("Index ", minute0, minute0, timeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      combinedRangeXYPlot0.getDomainAxis();
      Color color0 = (Color)combinedRangeXYPlot0.getRangeGridlinePaint();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getRangeAxis();
      assertNotNull(valueAxis0);
      
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(layer0);
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setDomainCrosshairValue(0.0);
      Point point0 = new Point((-3749), (-3749));
      combinedRangeXYPlot0.setQuadrantOrigin(point0);
      combinedRangeXYPlot0.isDomainZoomable();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1564.8803781397));
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      combinedRangeXYPlot0.getDomainMarkers(1783, layer0);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), (-1.0), "org.jfree.chart.util.XYCoordinateType");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1143, 15, (-1), 2792, true, true, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(layer1);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.42561093943455697);
      assertEquals(0.42561093943455697, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      combinedDomainXYPlot0.getRangeMarkers(layer0);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.05);
      Point point0 = new Point((-2105), (-1133));
      combinedDomainXYPlot0.setQuadrantOrigin(point0);
      combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(0.05, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(false);
      xYPlot0.getRangeAxisEdge();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 10);
      xYPlot0.removeDomainMarker((Marker) intervalMarker0);
      chartRenderingInfo0.clone();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers((Layer) null);
      combinedDomainXYPlot0.getRangeMarkers((Layer) null);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis();
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(layer0);
      xYPlot0.getRangeMarkers(layer0);
      xYPlot0.setDomainCrosshairValue(0.05);
      assertEquals(0.05, xYPlot0.getDomainCrosshairValue(), 0.01);
      
      xYPlot0.isRangeMinorGridlinesVisible();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Layer layer1 = Layer.BACKGROUND;
      Collection collection0 = xYPlot0.getDomainMarkers(layer1);
      assertNotNull(collection0);
      
      xYPlot0.getRangeMarkers(layer1);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.setDomainCrosshairValue((-838.34590631));
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JViewport jViewport0 = new JViewport();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.isRangePannable();
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0, 1.0, 1476.405268, 1.0);
      JScrollPane jScrollPane0 = new JScrollPane();
      jScrollPane0.getColumnHeader();
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedRangeXYPlot0.getRenderer((-2105));
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D_Double0);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(750.5204);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      LogAxis logAxis0 = new LogAxis("p=dwf@eS;bawxp*f_");
      NumberTickUnit numberTickUnit0 = logAxis0.getTickUnit();
      cyclicNumberAxis0.setTickUnit(numberTickUnit0, true, false);
      combinedDomainXYPlot0.getFixedDomainAxisSpace();
      combinedDomainXYPlot0.getDomainCrosshairPaint();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(500, 10);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getEndYValue(0, 500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.setRangePannable(true);
      double double0 = (-737.518191719468);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      int int0 = 0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 15;
      floatArray0[1] = (float) 420;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 680;
      floatArray0[4] = (float) 10;
      floatArray0[5] = 0.5F;
      Kernel kernel0 = new Kernel(15, 0, floatArray0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-1), renderingHints0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      // Undeclared exception!
      try { 
        renderingHints0.put(convolveOp0, convolveOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.image.ConvolveOp cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getDomainMarkers(1783, layer0);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getRangeAxis(21);
      int int0 = (-1776);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, (-1776), (-1776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1776
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      XYDataset xYDataset0 = xYPlot0.getDataset();
      assertNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainAxisEdge();
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 10, (byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Empty list not permitted.");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      XYPlot xYPlot0 = jFreeChart0.getXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(xYPlot0.DEFAULT_OUTLINE_PAINT);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getOrientation();
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainCrosshairVisible(false);
      xYPlot0.getRangeAxisEdge();
      int int0 = 3;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1.0), "org.jfree.chart.util.XYCoordinateType");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 0, 1143, 15, (-1), 2792, true, true, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.findSubplot(plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ytfKG<~=hf!NI&`W1";
      stringArray0[1] = "ytfKG<~=hf!NI&`W1";
      stringArray0[2] = "ytfKG<~=hf!NI&`W1";
      SymbolAxis symbolAxis0 = new SymbolAxis("ytfKG<~=hf!NI&`W1", stringArray0);
      symbolAxis0.hasListener(combinedDomainXYPlot0);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) symbolAxis0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(symbolAxis0.DEFAULT_TICK_MARK_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart("ytfKG<~=hf!NI&`W1", symbolAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, true);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(1553.0171F, 0.0F, renderingHints0);
      jFreeChart0.createBufferedImage(10, 500);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 2, (byte[]) null, (-882), true, 2777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      xYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Rectangle rectangle0 = new Rectangle(0, 0);
      Rectangle2D rectangle2D0 = chartPanel0.scale(rectangle0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_LEFT;
      plotRenderingInfo0.setDataArea(rectangle2D0);
      Point2D point2D0 = RectangleAnchor.coordinates(rectangle2D0, rectangleAnchor0);
      xYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, point2D0, true);
      boolean boolean0 = xYPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertFalse(boolean0);
      
      Paint paint0 = xYPlot0.getDomainTickBandPaint();
      assertNull(paint0);
      
      xYPlot0.getLegendItems();
      TextAnchor textAnchor0 = TextAnchor.BASELINE_RIGHT;
      intervalMarker0.setLabelTextAnchor(textAnchor0);
      xYPlot0.setRangeCrosshairValue(0.0, true);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      xYPlot0.setDomainAxisLocation(axisLocation0, true);
      xYPlot0.removeDomainMarker(6, (Marker) intervalMarker0, layer0, false);
      assertEquals(1, xYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Null 'axisIndex' argument.";
      stringArray0[1] = "Null 'axisIndex' argument.";
      stringArray0[2] = "Null 'axisIndex' argument.";
      stringArray0[3] = "Null 'axisIndex' argument.";
      stringArray0[4] = "Null 'axisIndex' argument.";
      stringArray0[5] = "QJpbj`.-EdBBMH&V";
      stringArray0[6] = "Null 'axisIndex' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'axisIndex' argument.", stringArray0);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(0);
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, symbolAxis0, symbolAxis0, stackedXYAreaRenderer0);
      xYPlot0.getIndexOf(stackedXYAreaRenderer0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
  }
}
