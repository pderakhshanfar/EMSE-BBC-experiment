/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 27 16:15:42 GMT 2021
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.MouseWheelEvent;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.PixelGrabber;
import java.awt.image.PixelInterleavedSampleModel;
import java.awt.image.Raster;
import java.awt.image.RescaleOp;
import java.awt.image.SampleModel;
import java.awt.image.ShortLookupTable;
import java.awt.image.WritableRaster;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Date;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLayer;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicTabbedPaneUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.Segment;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.FixedHeightLayoutCache;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.TextAnnotation;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYImageAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.MarkerAxisBand;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.TickUnits;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LengthConstraintType;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYCrosshairState;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.text.TextAnchor;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.ShortTextTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CustomXYURLGenerator;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.StandardXYZURLGenerator;
import org.jfree.chart.urls.TimeSeriesURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.ObjectList;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.StandardGradientPaintTransformer;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValueDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DateRange;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYPlot_ESTest extends XYPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxisLocation(10, axisLocation0, false);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-2226), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      LogAxis logAxis0 = new LogAxis();
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(10);
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYAreaRenderer0, true);
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(264, 5);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.clearSelection();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JLayer<JCheckBox> jLayer0 = new JLayer<JCheckBox>();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jLayer0, (Border) null, 10, 10, 264, 2218);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.drawDomainMarkers(graphics2D0, rectangle0, (-2688), layer0);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("\"$_9\"oAXaJw6", regularTimePeriod0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(15, periodAxis0.DEFAULT_RANGE, lengthConstraintType0, 1.0E-8, periodAxis0.DEFAULT_RANGE, lengthConstraintType0);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset(matrixSeriesCollection0);
      combinedRangeXYPlot0.getIndexOf(xYAreaRenderer2_0);
      bufferedImage0.createGraphics();
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 1.0F, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      areaRenderer0.getSeriesStroke(2928);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker((Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(360.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.equals(combinedRangeXYPlot0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2141772255, 10, 10, 60, 10, 15, true, true, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.panDomainAxes(400.0, plotRenderingInfo0, point0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("w>x7^3cNey3dr^", combinedDomainXYPlot0);
      jFreeChart0.setBackgroundImageAlignment(10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2012, 10, chartRenderingInfo0);
      chartRenderingInfo0.getEntityCollection();
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      XYErrorRenderer xYErrorRenderer1 = new XYErrorRenderer();
      xYErrorRenderer1.getErrorStroke();
      xYErrorRenderer0.getAnnotations();
      generalPath0.append(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, true);
      chartRenderingInfo0.setChartArea(rectangle0);
      SystemColor systemColor0 = SystemColor.windowText;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 5.0E7, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.clearSelection();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(3, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Q", font0, combinedDomainXYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, defaultCaret0);
      axisSpace0.setBottom((-15.0));
      bufferedImage0.createGraphics();
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, defaultCaret0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(360.0, combinedRangeXYPlot0.DEFAULT_OUTLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.equals(combinedRangeXYPlot0);
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.getDomainTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      combinedRangeXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.setNotify(true);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.addAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangePannable(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation();
      axisLocation0.getOpposite();
      axisLocation0.getOpposite();
      xYPlot0.setRangeAxisLocation(960, axisLocation0, false);
      xYPlot0.getDomainAxisEdge(960);
      xYPlot0.isRangePannable();
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(960, 960);
      bufferedImage0.createGraphics();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = metalTreeUI0.new NodeDimensionsHandler();
      int int0 = (-3355);
      int int1 = (-4987);
      boolean boolean0 = true;
      JFreeChart jFreeChart1 = new JFreeChart("hseKnJ6giRJ<Eg", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, (-2), 10, (-2), 2496, (-3355), 10, true, true, true, false, true, true, false);
      chartPanel0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Q", font0, combinedDomainXYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, defaultCaret0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(4.0);
      candlestickRenderer0.getSeriesOutlinePaint(420);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Q", font0, combinedDomainXYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      chartPanel0.setFont(jFreeChart1.DEFAULT_TITLE_FONT);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedDomainXYPlot0.getIndexOf((XYItemRenderer) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker(0, (Marker) null, layer0, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "~tOb)7.k^'OjEvkMgi";
      MatrixSeries matrixSeries0 = new MatrixSeries("~tOb)7.k^'OjEvkMgi", 1, 1645);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      LogAxis logAxis0 = new LogAxis();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      logAxis0.setAutoTickUnitSelection(false);
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, logAxis0, logAxis0, xYLine3DRenderer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-150.01436658927864), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(true);
      cyclicNumberAxis0.setUpperMargin((-474.099327113679));
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYBoxAndWhiskerRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-473.099327113679).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LogAxis logAxis0 = new LogAxis("ZRb0|c{X@-:Pp/9");
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, logAxis0, logAxis0, xYBubbleRenderer0);
      xYPlot0.isDomainCrosshairVisible();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      xYPlot0.getSeriesCount();
      JFreeChart jFreeChart0 = new JFreeChart(">L92PC(", logAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      xYPlot0.setRenderer(168, (XYItemRenderer) xYBubbleRenderer0, false);
      JFreeChart jFreeChart1 = new JFreeChart(polarPlot0);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      xYBoxAndWhiskerRenderer0.setAutoPopulateSeriesFillPaint(true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(960.528846244, "ZRb0|c{X@-:Pp/9");
      cyclicNumberAxis0.setUpperBound(1.0F);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(6, 154);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(extendedCategoryAxis0, categoryTableXYDataset0);
      xYPlot0.datasetChanged(datasetChangeEvent0);
      combinedRangeXYPlot0.setDomainAxis(1993, (ValueAxis) cyclicNumberAxis0, false);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      FixedHeightLayoutCache fixedHeightLayoutCache0 = new FixedHeightLayoutCache();
      Rectangle rectangle0 = new Rectangle((-4017), 0);
      fixedHeightLayoutCache0.getBounds((TreePath) null, rectangle0);
      AxisSpace axisSpace0 = new AxisSpace();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, (Rectangle2D) null, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      Color color0 = DebugGraphics.flashColor();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, color0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(171, 1358);
      PlotState plotState0 = new PlotState();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.draw((Graphics2D) null, (Rectangle2D) null, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1417;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MatrixSeries matrixSeries0 = new MatrixSeries("TimePeriodValue[", 1417, 6);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("TimePeriodValue[");
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT, logarithmicAxis0.DEFAULT_AXIS_LINE_PAINT, true);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(matrixSeriesCollection0, logarithmicAxis0, logarithmicAxis0, xYDifferenceRenderer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Values less than or equal to zero not allowed with logarithmic axis
         //
         verifyException("org.jfree.chart.axis.LogarithmicAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getDomainAxis(10);
      combinedDomainXYPlot0.configureRangeAxes();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(552, 552);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, false);
      chartPanel0.getZoomRectangle();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawAxes(graphics2D0, (Rectangle2D) null, (Rectangle2D) null, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DateAxis dateAxis0 = new DateAxis();
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer(3.141592653589793);
      xYBoxAndWhiskerRenderer0.setBaseLegendTextFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      xYBoxAndWhiskerRenderer0.equals((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XYPlot xYPlot0 = new XYPlot(jDBCXYDataset0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      IntervalMarker intervalMarker0 = new IntervalMarker(455.0, 1593.583401, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.addDomainMarker(500, (Marker) intervalMarker0, layer0, false);
      dateAxis0.hasListener(xYPlot0);
      xYPlot0.isRangeZeroBaselineVisible();
      dateAxis0.setMinorTickMarkOutsideLength(0.3F);
      xYPlot0.clearRangeAxes();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      xYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, false);
      xYPlot0.getFixedDomainAxisSpace();
      xYPlot0.getRangeAxisCount();
      xYPlot0.getDomainMinorGridlinePaint();
      xYPlot0.getWeight();
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) dateAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      DateAxis dateAxis0 = new DateAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker(10);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("Q", font0, combinedDomainXYPlot0, true);
      JFreeChart jFreeChart1 = new JFreeChart(xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, defaultCaret0);
      bufferedImage0.createGraphics();
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, defaultCaret0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeAxis(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDomainAxisLocation((AxisLocation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxisLocation((-2779), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JFreeChart jFreeChart0 = new JFreeChart("aZ#G3-qHx%lDjgnP?", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(181, 15, (double) 10, 250.0, (ChartRenderingInfo) null);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.removeDomainMarker((Marker) categoryMarker0, layer0);
      GeneralPath generalPath0 = new GeneralPath(combinedDomainXYPlot1.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle rectangle0 = generalPath0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      GeneralPath generalPath0 = null;
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2236.12839924987), 10.0);
      // Undeclared exception!
      try { 
        xYPlot0.setDomainAxis((-2776), (ValueAxis) cyclicNumberAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setMinorTickMarkInsideLength(1.0F);
      combinedDomainXYPlot0.getDataRange(numberAxis3D0);
      Color color0 = Color.RED;
      combinedDomainXYPlot0.setQuadrantPaint(0, color0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("4");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("6U?T*85?uXK7q/)K", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedRangeXYPlot0.zoomRangeAxes(997.00432736, plotRenderingInfo0, (Point2D) point2D_Float0, true);
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedRangeXYPlot0.handleClick(0, 2581, plotRenderingInfo1);
      xYPlot0.getDomainCrosshairStroke();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(340.0, 200, xYPlot0.DEFAULT_BACKGROUND_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      combinedDomainXYPlot0.clone();
      // Undeclared exception!
      try { 
        xYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((-1489), (Marker) categoryMarker0, layer0, false);
      LinkedList<XYImageAnnotation> linkedList0 = new LinkedList<XYImageAnnotation>();
      combinedDomainXYPlot0.clearRangeMarkers((-1489));
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYDotRenderer0, jDBCPieDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(2);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("SeriesChangeType.UPDATE");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      logAxis0.resizeRange(440.721037914);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(980.709, (-875.2966742200972));
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawRangeCrosshair((Graphics2D) null, rectangle2D0, plotOrientation0, 0.05, cyclicNumberAxis0, logAxis0.DEFAULT_TICK_MARK_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getRangeAxisLocation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      BufferedImage bufferedImage0 = new BufferedImage(10, 10, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, (Rectangle2D) null, (AxisSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      Color color0 = Color.CYAN;
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 10, (Stroke) null, color0);
      combinedDomainXYPlot0.configureDomainAxes();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis3D0, numberAxis3D0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 500);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(500, numberAxis3D0.DEFAULT_RANGE, lengthConstraintType0, (-319.59055), numberAxis3D0.DEFAULT_RANGE, lengthConstraintType0);
      rectangleConstraint0.toUnconstrainedHeight();
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      combinedDomainXYPlot0.getDomainAxisEdge(500);
      combinedDomainXYPlot0.setDomainCrosshairValue((-21.163633181376937));
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(0.0F);
      xYPlot0.getDomainAxisForDataset(15);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      LogAxis logAxis0 = new LogAxis("ZRb0|c{X@-:Pp/9");
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, logAxis0, logAxis0, xYBubbleRenderer0);
      xYPlot0.isDomainCrosshairVisible();
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      xYPlot0.getSeriesCount();
      JFreeChart jFreeChart0 = new JFreeChart(">L92PC(", logAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      jFreeChart0.setBorderPaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      jFreeChart0.getLegend();
      Point2D.Float point2D_Float0 = new Point2D.Float(1, (-2665.0903F));
      xYPlot0.zoomRangeAxes((double) 0, plotRenderingInfo0, (Point2D) point2D_Float0, false);
      xYPlot0.handleClick(15, 2581, plotRenderingInfo0);
      xYPlot0.getDomainCrosshairStroke();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Stroke stroke0 = combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      IntervalMarker intervalMarker0 = null;
      try {
        intervalMarker0 = new IntervalMarker(0.05, 340.0, xYBubbleRenderer0.DEFAULT_PAINT, xYPlot0.DEFAULT_GRIDLINE_STROKE, logAxis0.DEFAULT_AXIS_LINE_PAINT, stroke0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(true);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, dateAxis0, dateAxis0, xYBoxAndWhiskerRenderer0);
      // Undeclared exception!
      xYPlot0.setRenderer(2140995781, (XYItemRenderer) xYBoxAndWhiskerRenderer0, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-150.01436658927864), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      XYPlot xYPlot0 = new XYPlot();
      cyclicNumberAxis0.setAutoTickUnitSelection(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.add(xYPlot0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 64, 15, 64, 27, 10, 10, true, true, true, false, false, true);
      Point point0 = chartPanel0.getLocation();
      combinedDomainXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) point0, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.clearRangeMarkers(10);
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      simpleTimeZone0.toZoneId();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      combinedRangeXYPlot0.setDataset(86, (XYDataset) timeSeriesCollection0);
      combinedRangeXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      combinedDomainXYPlot0.setRangeAxis(2138927936, (ValueAxis) dateAxis0, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      // Undeclared exception!
      combinedRangeXYPlot1.setDataset(2105376125, (XYDataset) timePeriodValuesCollection0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-150.01436658927864), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(true);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYBoxAndWhiskerRenderer0);
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) xYBoxAndWhiskerRenderer0, false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      xYBoxAndWhiskerRenderer0.setAutoPopulateSeriesFillPaint(false);
      cyclicNumberAxis0.setUpperBound(466.472546);
      jFreeChart0.createBufferedImage(20, 500);
      combinedRangeXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setRangeAxisLocation(982, axisLocation0, true);
      xYPlot0.getLegendItems();
      ValueAxis[] valueAxisArray0 = new ValueAxis[3];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(982);
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(1.0F, 0.0F, "cByq");
      valueAxisArray0[2] = (ValueAxis) cyclicNumberAxis1;
      xYPlot0.setRangeAxes(valueAxisArray0);
      xYPlot0.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-150.01436658927864), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(true);
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      XYPlot xYPlot0 = new XYPlot(defaultBoxAndWhiskerXYDataset0, cyclicNumberAxis0, cyclicNumberAxis0, xYBoxAndWhiskerRenderer0);
      combinedRangeXYPlot0.setRenderer(500, (XYItemRenderer) xYBoxAndWhiskerRenderer0, false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(20, 500);
      combinedRangeXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ValueMarker valueMarker0 = new ValueMarker(10);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(19);
      JFreeChart jFreeChart0 = new JFreeChart("", valueAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot0, false);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp((-122.9F), 1.0F, renderingHints0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      JFreeChart jFreeChart1 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(614, 15, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis numberAxis0 = new NumberAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, (Rectangle2D) null, plotOrientation0, Double.NaN, (ValueAxis) null, valueAxis0.DEFAULT_AXIS_LINE_STROKE, valueAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 300, 1466, 128, 460);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(460, 0.0, 460, 0.0, jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3856, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.getWebPoint(rectangle0, 623.2, 0.7853981633974483);
      combinedDomainXYPlot0.panRangeAxes(420, plotRenderingInfo0, point2D0);
      DateAxis dateAxis0 = new DateAxis("ZOOM_DOMAIN_BOTH");
      combinedDomainXYPlot0.getRangeAxisIndex(dateAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawAnnotations(graphics2D0, rectangle2D_Double0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.annotations.XYDrawableAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      ValueMarker valueMarker0 = new ValueMarker((-1703.7451374969));
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.addRangeMarker(473, (Marker) valueMarker0, layer0, true);
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(19);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(":f7+Y\u0003~ @Y", valueAxis0.DEFAULT_AXIS_LABEL_FONT, combinedDomainXYPlot2, true);
      jFreeChart0.getRenderingHints();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(jDBCCategoryDataset0);
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      RenderingHints renderingHints0 = jFreeChart1.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(10, 1211.3676F, renderingHints0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(13, 13, chartRenderingInfo0);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Float0, point2D_Float0);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      combinedDomainXYPlot1.drawZeroDomainBaseline(graphics2D0, rectangle2D0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot2.drawAnnotations(graphics2D0, rectangle2D0, plotRenderingInfo0);
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation(1294.435881511783, 15, compositeTitle0, rectangleAnchor0);
      combinedDomainXYPlot2.removeAnnotation((XYAnnotation) xYTitleAnnotation0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.panDomainAxes(4.0, plotRenderingInfo0, point0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(24, 1, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Rectangle2D rectangle2D0 = defaultCaret0.createUnion(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createIntersection(rectangle2D0);
      combinedDomainXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis((String) null);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.getDatasetRenderingOrder();
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(10);
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedRangeXYPlot0, false);
      jFreeChart0.getRenderingHints();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      combinedDomainXYPlot1.setDomainZeroBaselineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 257, 2, chartRenderingInfo1);
      BufferedImage bufferedImage1 = colorConvertOp0.filter(bufferedImage0, bufferedImage0);
      Graphics2D graphics2D0 = bufferedImage1.createGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot2.drawRangeTickBands(graphics2D0, defaultCaret0, vector0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(Double.POSITIVE_INFINITY);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      combinedDomainXYPlot1.drawDomainGridlines(graphics2D0, defaultCaret0, vector0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      Point point0 = chartPanel0.getLocation();
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Point2D point2D0 = affineTransform1.inverseTransform((Point2D) point0, (Point2D) point0);
      chartRenderingInfo0.getPlotInfo();
      BufferedImage bufferedImage0 = new BufferedImage(200, 4, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point2D0);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      axisSpace0.toString();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.axis.AxisSpace@291bda7[left=0.0,right=0.0,top=0.0,bottom=0.0]");
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      DateAxis dateAxis1 = new DateAxis("PRINT");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis1);
      combinedDomainXYPlot0.getDatasetRenderingOrder();
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>(2157);
      combinedRangeXYPlot0.drawRangeTickBands(graphics2D0, rectangle2D0, vector0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      bufferedImage0.createGraphics();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      AxisSpace axisSpace0 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      bufferedImage0.createGraphics();
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      CategoryMarker categoryMarker1 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot1.setRangeAxis(0, (ValueAxis) null, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke0 = candlestickRenderer0.getBaseOutlineStroke();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(stroke0);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 0.0F, 1);
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle(combinedRangeXYPlot0, flowArrangement0, columnArrangement0);
      RectangleInsets rectangleInsets0 = legendTitle0.getItemLabelPadding();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2.0, (-2938.9646699056293), (-2349.05489051), 2.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(108.5F, 2.0F, 1036.1901F, 0);
      Rectangle2D rectangle2D0 = rectangle2D_Double0.createUnion(rectangle2D_Float0);
      Rectangle2D rectangle2D1 = rectangleInsets0.createOutsetRectangle(rectangle2D0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.drawBackground((Graphics2D) null, rectangle2D1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(defaultTableXYDataset0, (ValueAxis) null, (ValueAxis) null, stackedXYAreaRenderer2_0);
      xYPlot0.getFixedRangeAxisSpace();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      xYPlot0.setRangeCrosshairValue(2296.0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-4700.25), false);
      clusteredXYBarRenderer0.setLegendBar(categoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE);
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(10, (XYToolTipGenerator) null);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(categoryPlot0.DEFAULT_GRIDLINE_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, false);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) stackedXYAreaRenderer2_0;
      xYItemRendererArray0[1] = (XYItemRenderer) clusteredXYBarRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) defaultXYItemRenderer0;
      xYItemRendererArray0[3] = (XYItemRenderer) xYDifferenceRenderer0;
      xYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.getSeriesRenderingOrder();
      xYPlot0.getFixedRangeAxisSpace();
      xYPlot0.setRangeGridlineStroke(categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      xYPlot0.getRenderer();
      xYPlot0.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis("giB3#WIKp");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      SeriesRenderingOrder seriesRenderingOrder1 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder1);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator("giB3#WIKp", numberFormat0, numberFormat0, numberFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1400.1910308674), false, standardXYZToolTipGenerator0);
      Shape shape0 = candlestickRenderer0.lookupSeriesShape(10);
      GeneralPath generalPath0 = new GeneralPath(shape0);
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.drawDomainMarkers((Graphics2D) null, rectangle2D0, 603, layer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      int int0 = (-875);
      int int1 = 471;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(471);
      candlestickRenderer0.getSeriesFillPaint(10);
      // Undeclared exception!
      try { 
        xYPlot0.setRangeZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis(10, (ValueAxis) dateAxis0, true);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedRangeXYPlot0.isDomainZoomable();
      combinedRangeXYPlot0.getDomainTickBandPaint();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation2, true);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1, (-1911.0654821541));
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(38, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 0.0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE, cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getRangeAxisEdge((-1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.isDomainPannable();
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      xYPlot0.setRangeCrosshairValue((-1238.3));
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-1238.3), false);
      xYItemRendererArray0[0] = (XYItemRenderer) clusteredXYBarRenderer0;
      clusteredXYBarRenderer0.setLegendBar(xYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      clusteredXYBarRenderer0.setSeriesToolTipGenerator(437, (XYToolTipGenerator) null);
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      xYItemRendererArray0[1] = (XYItemRenderer) defaultXYItemRenderer0;
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(defaultXYItemRenderer0.DEFAULT_PAINT, clusteredXYBarRenderer0.DEFAULT_OUTLINE_PAINT, false);
      xYItemRendererArray0[2] = (XYItemRenderer) xYDifferenceRenderer0;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      xYItemRendererArray0[3] = (XYItemRenderer) xYStepAreaRenderer0;
      xYPlot0.setRenderers(xYItemRendererArray0);
      xYPlot0.getSeriesRenderingOrder();
      xYPlot0.getFixedRangeAxisSpace();
      xYPlot0.setRangeGridlineStroke(defaultXYItemRenderer0.DEFAULT_STROKE);
      xYPlot0.getRenderer();
      xYPlot0.getAnnotations();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.location(489, 491);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      XYPlot xYPlot0 = new XYPlot();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null 'rectangle' argument.";
      stringArray0[1] = "Null 'rectangle' argument.";
      stringArray0[2] = "\b7zb_l4+QY<s%3%";
      stringArray0[3] = "Null 'rectangle' argument.";
      stringArray0[4] = "Null 'rectangle' argument.";
      SymbolAxis symbolAxis0 = new SymbolAxis("Null 'rectangle' argument.", stringArray0);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(symbolAxis0);
      combinedDomainXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      SeriesRenderingOrder seriesRenderingOrder1 = SeriesRenderingOrder.REVERSE;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setSeriesRenderingOrder((SeriesRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 300, 1466, 128, 460);
      chartRenderingInfo0.clone();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(460, (-3875.6297), 460, 10.0, jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3856, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawVerticalLine(graphics2D0, rectangle0, 0.0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, numberAxis0, numberAxis0, xYAreaRenderer2_0);
      xYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeAnnotation((XYAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      scatterRenderer0.findRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      ModuloAxis moduloAxis0 = new ModuloAxis("J7B4\"", (Range) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxis((ValueAxis) moduloAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      xYPlot0.equals(dateAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      xYPlot0.getLegendItems();
      combinedDomainXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(true);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      multiplePiePlot0.getPieChart();
      GeneralPath generalPath0 = new GeneralPath();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      LogAxis logAxis0 = new LogAxis();
      xYPlot0.equals(combinedRangeXYPlot0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      xYPlot0.indexOf(defaultWindDataset0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      Point point0 = chartPanel0.getLocation();
      AffineTransform affineTransform0 = new AffineTransform();
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Point2D point2D0 = affineTransform1.inverseTransform((Point2D) point0, (Point2D) point0);
      chartRenderingInfo0.getPlotInfo();
      BufferedImage bufferedImage0 = new BufferedImage(200, 4, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point2D0);
      line2D_Double0.getBounds2D();
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      axisSpace0.toString();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("org.jfree.chart.axis.AxisSpace@291bda7[left=0.0,right=0.0,top=0.0,bottom=0.0]");
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      AxisSpace axisSpace1 = subCategoryAxis0.reserveSpace(graphics2D0, combinedRangeXYPlot0, rectangle2D_Double0, rectangleEdge1, axisSpace0);
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace1, false);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawAxes(graphics2D1, rectangle2D_Double0, rectangle2D_Double0, plotRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D_Double0);
      Graphics2D graphics2D2 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D2, rectangle2D_Double0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0);
      combinedRangeXYPlot0.getRangeAxis(10);
      combinedRangeXYPlot0.getSeriesRenderingOrder();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      String string0 = "\"$_9\"oAXaJw6";
      CustomXYToolTipGenerator customXYToolTipGenerator0 = new CustomXYToolTipGenerator();
      DateFormat dateFormat0 = DateFormat.getInstance();
      TimeSeriesURLGenerator timeSeriesURLGenerator0 = new TimeSeriesURLGenerator(dateFormat0, "\"$_9\"oAXaJw6", "\"$_9\"oAXaJw6", "");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(5847, customXYToolTipGenerator0, timeSeriesURLGenerator0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-292), (XYItemRenderer) cyclicXYItemRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = categoryPlot0.getDatasetRenderingOrder();
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedRangeXYPlot0.getDomainZeroBaselineStroke();
      LogAxis logAxis0 = new LogAxis();
      combinedRangeXYPlot0.getRangeAxisIndex(logAxis0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      PeriodAxis periodAxis0 = new PeriodAxis("zw", fixedMillisecond0, fixedMillisecond0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(2287, 259);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      combinedDomainXYPlot0.setDomainAxis(10, (ValueAxis) null, true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(2870.884, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2652.1, 10, 500.0, 563.1621407482693);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      GeneralPath generalPath0 = new GeneralPath();
      chartRenderingInfo0.getRenderingSource();
      combinedDomainXYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) null);
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      combinedDomainXYPlot0.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Color color0 = Color.BLACK;
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "8lFm");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setLabel("fz2y?m");
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'location' for index 0 not permitted.");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(cyclicNumberAxis0);
      axisChangeEvent0.getChart();
      combinedRangeXYPlot1.drawRangeGridlines((Graphics2D) null, rectangle2D0, (List) null);
      combinedRangeXYPlot0.drawDomainTickBands((Graphics2D) null, rectangle2D0, (List) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      gridBagLayout0.getLayoutOrigin();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = new JFreeChart(combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart1.createBufferedImage(10, 2);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.05, (double) 1.0F, (double) 3);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform1, false, false);
      Rectangle2D rectangle2D0 = jFreeChart0.DEFAULT_TITLE_FONT.getStringBounds("", fontRenderContext0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart1, true, true, true, true, false);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      thermometerPlot0.fillBackground(graphics2D0, rectangle2D0, plotOrientation0);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(10.0, valueAxis0.DEFAULT_RANGE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRendererForDataset(defaultIntervalXYDataset0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      JLayer<JCheckBox> jLayer0 = new JLayer<JCheckBox>();
      gridBagLayout0.preferredLayoutSize(jLayer0);
      Point point0 = gridBagLayout0.getLayoutOrigin();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      BasicStroke basicStroke0 = new BasicStroke(3379.4F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("As0<(K8M{Y%PBJZ(roO");
      combinedDomainXYPlot0.getOrientation();
      combinedDomainXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Color color0 = Color.BLACK;
      CategoryMarker categoryMarker0 = new CategoryMarker(logarithmicAxis0.DEFAULT_TICK_UNIT, paint0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker((-3538), (Marker) categoryMarker0, layer0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomRangeAxes(10.0, plotRenderingInfo0, (Point2D) point0, false);
      combinedDomainXYPlot0.isRangeCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.clearSelection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      Color color0 = Color.cyan;
      combinedDomainXYPlot0.setQuadrantPaint(1, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("");
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10, standardXYZToolTipGenerator0, standardXYURLGenerator0);
      stackedXYAreaRenderer0.getShapeStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      XYPlot xYPlot0 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot0);
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      SeriesRenderingOrder seriesRenderingOrder1 = SeriesRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot0.setRangeCrosshairValue(1880.802666313392, true);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      combinedDomainXYPlot0.getDomainAxis(0);
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      ValueMarker valueMarker0 = new ValueMarker((-630.2677173828824));
      combinedDomainXYPlot0.removeDomainMarker((Marker) valueMarker0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.String");
      IntervalMarker intervalMarker0 = new IntervalMarker(495, 500.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(495, axisLocation0, true);
      combinedDomainXYPlot0.addRangeMarker(495, (Marker) intervalMarker0, (Layer) null, false);
      combinedDomainXYPlot0.getAxisOffset();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainGridlineStroke();
      combinedDomainXYPlot0.removeRangeMarker(495, (Marker) intervalMarker0, (Layer) null, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.panDomainAxes((-3094.8701), plotRenderingInfo0, point0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      LogAxis logAxis0 = new LogAxis("<f^pbjD.7am8r&_ZYTT");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, defaultCaret0);
      combinedDomainXYPlot0.setDomainAxis(0, (ValueAxis) logAxis0, true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.clearSelection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setAxisOffset((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      GeneralPath generalPath0 = new GeneralPath();
      Point point0 = new Point(10, 10);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.getFixedDomainAxisSpace();
      combinedRangeXYPlot0.setFixedRangeAxisSpace((AxisSpace) null, false);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      XYPlot xYPlot0 = new XYPlot();
      DateAxis dateAxis0 = new DateAxis((String) null);
      dateAxis0.removeChangeListener(xYPlot0);
      xYPlot0.setDomainAxis(889, (ValueAxis) dateAxis0, false);
      xYPlot0.isRangeMinorGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      xYPlot0.setDomainMinorGridlinesVisible(true);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setLabelInsets(xYPlot0.DEFAULT_INSETS, true);
      xYPlot0.getRendererCount();
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, (-473), 255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 255
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeAnnotation((XYAnnotation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("[f@");
      ModuloAxis moduloAxis0 = new ModuloAxis("[f@", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.GRAY;
      combinedDomainXYPlot0.removeDomainMarker(500, (Marker) categoryMarker0, layer0, true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.getRangeAxisForDataset(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      combinedDomainXYPlot0.clearDomainMarkers();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedDomainXYPlot0.indexOf(defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      combinedRangeXYPlot0.setDataset(500, (XYDataset) timePeriodValuesCollection0);
      combinedRangeXYPlot0.clearSelection();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3979.674), (-3979.674));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultXYZDataset0.validateObject();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Paint paint0 = combinedDomainXYPlot1.getRangeGridlinePaint();
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker(10, paint0, basicStroke0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot1.removeRangeMarker(10, (Marker) categoryMarker0, layer0, true);
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(5316.3819958, 1494.5336858515284, 5316.3819958, 10, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot1.addAnnotation((XYAnnotation) xYBoxAnnotation0);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.clearDomainMarkers();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Paint paint0 = combinedDomainXYPlot0.getBackgroundPaint();
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, (-266.544), (Stroke) null, paint0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getRangeAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawHorizontalLine((Graphics2D) null, (Rectangle2D) null, (-1377.07148), (Stroke) null, paint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation(2370);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      GeneralPath generalPath0 = new GeneralPath();
      generalPath0.getCurrentPoint();
      combinedRangeXYPlot0.zoomRangeAxes((double) 10, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.clearRangeMarkers(10);
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.clearRangeAxes();
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0);
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      LinkedList<VectorSeriesCollection> linkedList0 = new LinkedList<VectorSeriesCollection>();
      Vector<VectorSeriesCollection> vector0 = new Vector<VectorSeriesCollection>(linkedList0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      vector0.add(vectorSeriesCollection0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(13, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Indices must be Integer instances.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.GRAY;
      BasicStroke basicStroke0 = new BasicStroke();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ayF,*b\"(t", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 500, (-1565), 3, (-1), (-1565), false, true, true, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 15, 768, (-1), 200, 2370, (-396), 1, (-7), false, 500, 768, 14);
      Point point0 = mouseWheelEvent0.getPoint();
      point0.setLocation((-396), 0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, plotRenderingInfo0, (Point2D) point0, true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot1.configureDomainAxes();
      xYPlot0.setFixedDomainAxisSpace((AxisSpace) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getSeriesPaint(10);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      GeneralPath generalPath0 = new GeneralPath();
      generalPath0.getCurrentPoint();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes(17.02314129281479, plotRenderingInfo0, (Point2D) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.clearRangeMarkers((-531));
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      combinedDomainXYPlot1.addDomainMarker(2, (Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxis();
      combinedRangeXYPlot0.getDomainAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.setProcessVisibleItemsOnly(false);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(680);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true);
      Point point0 = chartPanel0.getLocation();
      Point2D point2D0 = affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      chartRenderingInfo0.getPlotInfo();
      BufferedImage bufferedImage0 = new BufferedImage(979, 500, 4);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point2D0);
      Rectangle2D rectangle2D0 = line2D_Double0.getBounds2D();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      axisSpace0.toString();
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle2D0);
      Graphics2D graphics2D1 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.drawAxes(graphics2D1, rectangle2D0, rectangle2D0, plotRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.calculateAxisSpace(graphics2D0, rectangle2D0);
      Graphics2D graphics2D2 = bufferedImage0.createGraphics();
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D2, rectangle2D0, axisSpace0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("\"$_9\"oAXaJw6", regularTimePeriod0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      XYAreaRenderer2 xYAreaRenderer2_1 = new XYAreaRenderer2();
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_1, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 6);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(10, periodAxis0.DEFAULT_RANGE);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.clearSelection();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("V1hVv2e4Ah3");
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      combinedDomainXYPlot0.getDomainAxisEdge((-2922));
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot1.DEFAULT_LEGEND_ITEM_BOX, combinedDomainXYPlot1.DEFAULT_OUTLINE_STROKE, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT);
      xYShapeAnnotation0.setToolTipText("V1hVv2e4Ah3");
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedDomainXYPlot0.canSelectByPoint();
      combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((-10), (ValueAxis) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.GRAY;
      BasicStroke basicStroke0 = new BasicStroke();
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ayF,*b\"(t", xYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 500, (-1565), 3, (-1), (-1565), true, true, true, true, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 15, 768, (-1), 200, 2370, (-396), 1, (-7), false, 48, 768, 14);
      Point point0 = mouseWheelEvent0.getPoint();
      point0.setLocation((-396), 0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, plotRenderingInfo0, (Point2D) point0, true);
      DateAxis dateAxis0 = new DateAxis();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      PaintScale paintScale0 = xYBlockRenderer0.getPaintScale();
      NumberAxis numberAxis0 = new NumberAxis("gc1T>Km.XUD6BVNwU");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(paintScale0, numberAxis0);
      Paint paint0 = paintScaleLegend0.getStripOutlinePaint();
      // Undeclared exception!
      try { 
        xYPlot0.setQuadrantPaint((-1037), paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1037) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("\"$_9\"oAXaJw6", regularTimePeriod0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      fixedMillisecond0.previous();
      jFreeChart0.createBufferedImage(10, 6);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(10, periodAxis0.DEFAULT_RANGE);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset(matrixSeriesCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomRangeAxes(773.0, plotRenderingInfo0, (Point2D) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getDomainAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      valueAxis0.setMinorTickMarksVisible(false);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = 2.0F;
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, (double) 500, plotRenderingInfo0, (Point2D) point2D_Float0);
      BasicStroke basicStroke0 = new BasicStroke(3745.6F);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("XE)");
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawRangeCrosshair((Graphics2D) null, (Rectangle2D) null, plotOrientation0, 1.0E-8, numberAxis3D0, logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 300, 1466, 128, 460);
      chartRenderingInfo0.clone();
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(460, (-3875.6297), 460, 10.0, jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3856, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 1.0F, numberAxis0, numberAxis0.DEFAULT_AXIS_LINE_STROKE, numberAxis0.DEFAULT_AXIS_LABEL_PAINT);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      DateAxis dateAxis0 = new DateAxis();
      LogAxis logAxis0 = new LogAxis();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("Null 'stroke' argument.", mockSimpleDateFormat0, decimalFormat0);
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(4, standardXYToolTipGenerator0);
      combinedDomainXYPlot0.setRenderer(180, (XYItemRenderer) cyclicXYItemRenderer0, false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("X$O{+");
      combinedDomainXYPlot0.getRangeAxisForDataset(4);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.getDomainZeroBaselinePaint();
      Color color0 = Color.cyan;
      combinedDomainXYPlot0.setQuadrantPaint(1, color0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      cyclicNumberAxis0.getRange();
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = chartPanel0.getLocation();
      affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      axisSpace0.toString();
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3979.674), (-3979.674));
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxis((-1379), (ValueAxis) cyclicNumberAxis0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("zw", fixedMillisecond0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(2296, 259);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.5, periodAxis0.DEFAULT_RANGE);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedRangeXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeCrosshairValue(2870.884, false);
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      combinedDomainXYPlot0.getDomainAxis(854);
      combinedDomainXYPlot0.getRangeMinorGridlinePaint();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      combinedDomainXYPlot0.drawQuadrants((Graphics2D) null, defaultCaret0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = Color.CYAN;
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      plotRenderingInfo1.getDataArea();
      DateAxis dateAxis1 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis1);
      combinedRangeXYPlot1.setDomainAxis((ValueAxis) dateAxis1);
      combinedRangeXYPlot1.getRangeAxis((-1127));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis1);
      combinedDomainXYPlot0.clearDomainAxes();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("\"$_9\"oAXaJw6", regularTimePeriod0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 6);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(10, periodAxis0.DEFAULT_RANGE);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      TimeSeries timeSeries0 = new TimeSeries(10, "\"$_9\"oAXaJw6", "org.jfree.chart.plot.XYPlot");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "\"$_9\"oAXaJw6");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      combinedDomainXYPlot0.indexOf(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "ZOOM_OUT_BOTH");
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainAxisEdge((-1833));
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedDomainXYPlot1.zoomRangeAxes((-1886.7598), plotRenderingInfo0, (Point2D) point2D_Double0, true);
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle2D_Double0, 3049.0, (Stroke) null, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot1.configureDomainAxes();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo0);
      XYItemRendererState xYItemRendererState0 = deviationRenderer0.initialise((Graphics2D) null, rectangle2D0, combinedDomainXYPlot0, categoryTableXYDataset0, plotRenderingInfo1);
      xYItemRendererState0.getCrosshairState();
      combinedDomainXYPlot0.render((Graphics2D) null, rectangle2D_Double0, 11, plotRenderingInfo0, (CrosshairState) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(305);
      softBevelBorder0.getInteriorRectangle((Component) null, 128, 500, 1155, (-4452));
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.clone();
      JFreeChart jFreeChart0 = new JFreeChart("kKI,wR", numberAxis0.DEFAULT_TICK_LABEL_FONT, xYPlot0, false);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(10, 1466, 1466, 0.0F, jFreeChart0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(4, 24, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      bufferedImage0.createGraphics();
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      Rectangle2D rectangle2D1 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(15, 2978.658203125, (-796.00188081), 0.0);
      PeriodAxis periodAxis0 = new PeriodAxis("$|]dC=)GJRgq6");
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 30, 2978.658203125, (double) 300, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D1, (PlotOrientation) null, Double.POSITIVE_INFINITY, periodAxis0, multiplePiePlot0.DEFAULT_OUTLINE_STROKE, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      GeneralPath generalPath0 = new GeneralPath();
      GeneralPath generalPath1 = new GeneralPath(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedDomainXYPlot0.select(generalPath1, (Rectangle2D) rectangle2D_Double1, (RenderingSource) chartPanel0);
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      Point2D point2D0 = spiderWebPlot0.calculateLabelLocation(rectangle2D0, 617.1156066297, rectangle2D_Double1, 0.0);
      combinedDomainXYPlot0.zoomDomainAxes(2246.301968549557, plotRenderingInfo0, point2D0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(periodAxis0);
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getRangeAxisLocation();
      combinedDomainXYPlot0.setDomainAxisLocation(500, axisLocation0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset(10);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      TickUnits tickUnits0 = new TickUnits();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxisArray0[0]);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxis((-2922), 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.clone();
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      DateAxis dateAxis0 = new DateAxis();
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.zoomRangeAxes((-635.8), 458.2, plotRenderingInfo0, (Point2D) point2D_Double0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultPolarItemRenderer defaultPolarItemRenderer1 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesStroke(10);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxisArray0[0]);
      combinedDomainXYPlot1.clearDomainMarkers(10);
      combinedDomainXYPlot1.setRangeMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(false);
      combinedRangeXYPlot0.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.configureDomainAxes();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      gridBagLayout0.getLayoutOrigin();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setDomainCrosshairStroke(xYPlot0.DEFAULT_CROSSHAIR_STROKE);
      // Undeclared exception!
      try { 
        xYPlot0.removeRangeMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = chartPanel0.getLocation();
      affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      chartRenderingInfo0.getPlotInfo();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getDomainMarkers(0, (Layer) null);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedRangeXYPlot0.select((double) 0, (double) 0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      LogAxis logAxis0 = new LogAxis("<f^pbjD.7am8r&_ZYTT");
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      valueAxisArray0[1] = (ValueAxis) logarithmicAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      combinedRangeXYPlot0.getDataset();
      combinedRangeXYPlot0.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.clone();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      LogAxis logAxis1 = new LogAxis((String) null);
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedRangeXYPlot1.DEFAULT_CROSSHAIR_PAINT);
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) null);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getRangeMarkers(277, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRendererForDataset(vectorSeriesCollection0);
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot1.clearRangeMarkers();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker1 = new CategoryMarker("i");
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker1, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("i");
      ModuloAxis moduloAxis0 = new ModuloAxis("CEt>q]Ucz]", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = new BasicStroke();
      combinedDomainXYPlot0.setDomainCrosshairPaint(moduloAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jPp>Wk:MI4l@2$Mj", combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      Point2D.Double point2D_Double0 = new Point2D.Double(500, 9);
      Color color1 = Color.BLACK;
      combinedDomainXYPlot0.addRangeMarker(500, (Marker) categoryMarker1, layer0, true);
      combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.handleClick(1, 1417, (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.entity.StandardEntityCollection");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot1.setDomainCrosshairVisible(false);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(3);
      combinedRangeXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 0.5F, 680);
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RESET_BOTH");
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, (PlotOrientation) null, 300, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      GeneralPath generalPath0 = new GeneralPath();
      combinedDomainXYPlot0.select(generalPath0, rectangle2D0, (RenderingSource) chartPanel0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Layer layer0 = Layer.FOREGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setUseOutlinePaint(true);
      candlestickRenderer0.lookupSeriesFillPaint(2);
      Rectangle rectangle0 = new Rectangle(574, 2958465, 10, (-304));
      Layer layer1 = Layer.FOREGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedDomainXYPlot0.getQuadrantPaint(2);
      combinedDomainXYPlot0.getFixedRangeAxisSpace();
      combinedDomainXYPlot0.setFixedDomainAxisSpace((AxisSpace) null, false);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(424L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(2245L);
      fixedMillisecond1.next();
      PeriodAxis periodAxis0 = new PeriodAxis("", fixedMillisecond0, fixedMillisecond0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      XYPlot xYPlot0 = new XYPlot(categoryTableXYDataset0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYAreaRenderer2_0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 10);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) xYAreaRenderer2_0.ZERO, periodAxis0.DEFAULT_RANGE, lengthConstraintType0, 0.0F, periodAxis0.DEFAULT_RANGE, lengthConstraintType0);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getRendererForDataset(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(300, 10);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(768, "ZOOM_IN_RANGE", "$Z70LI1B6*3*]");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      LogAxis logAxis0 = new LogAxis("$Z70LI1B6*3*]");
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, logAxis0, logAxis0, vectorRenderer0);
      combinedDomainXYPlot0.getRenderer(501);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      XYPlot xYPlot1 = new XYPlot(timePeriodValuesCollection0, logAxis0, logAxis0, vectorRenderer0);
      xYPlot1.getDomainAxisLocation(0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(420, 1, (-3309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -3309
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Layer layer0 = Layer.FOREGROUND;
      ValueMarker valueMarker0 = new ValueMarker(1.0F);
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setUseOutlinePaint(true);
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(1, (Marker) valueMarker0, (Layer) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getDataset((-587));
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelInsets(combinedRangeXYPlot0.DEFAULT_INSETS, false);
      valueAxisArray0[0] = (ValueAxis) numberAxis3D0;
      NumberAxis.createIntegerTickUnits();
      numberAxis3D0.setLeftArrow(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MarkerAxisBand markerAxisBand0 = new MarkerAxisBand(numberAxis3D0, 1.0E-8, (-362.078128427), 1.0F, 2.0F, numberAxis3D0.DEFAULT_AXIS_LABEL_FONT);
      numberAxis3D0.setMarkerBand(markerAxisBand0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      StandardEntityCollection standardEntityCollection1 = new StandardEntityCollection();
      chartRenderingInfo0.setEntityCollection(standardEntityCollection1);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      DateAxis dateAxis0 = new DateAxis();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      DateAxis dateAxis1 = new DateAxis("rls+");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis1);
      LogAxis logAxis1 = new LogAxis("}");
      combinedRangeXYPlot1.setRangeAxis((ValueAxis) logAxis0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rls+");
      combinedRangeXYPlot1.configureRangeAxes();
      Layer layer1 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer2 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedRangeXYPlot1.getRendererForDataset(vectorSeriesCollection0);
      combinedDomainXYPlot0.getLegendItems();
      combinedRangeXYPlot0.indexOf(vectorSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-851), layer0);
      boolean boolean0 = XYPlot.DEFAULT_CROSSHAIR_VISIBLE;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.getRangeAxisEdge(1);
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      candlestickRenderer0.setPlot(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      axisLocation0.getOpposite();
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      Color color0 = new Color(0);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      combinedDomainXYPlot0.setDomainCrosshairValue((-969.1165), false);
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(false);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      MatrixSeries matrixSeries0 = new MatrixSeries("\"$_9\"oAXaJw6", 10, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(10);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      PeriodAxis periodAxis0 = new PeriodAxis("\"$_9\"oAXaJw6", regularTimePeriod0, regularTimePeriod0);
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2();
      XYPlot xYPlot0 = new XYPlot(matrixSeriesCollection0, periodAxis0, periodAxis0, xYAreaRenderer2_0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      combinedRangeXYPlot0.setRenderer(10, (XYItemRenderer) xYAreaRenderer2_0, true);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 6);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(1.0F, 1.0F);
      rectangleConstraint0.toUnconstrainedHeight();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Point point0 = new Point(166, 10);
      Point point1 = jViewport0.toViewCoordinates(point0);
      DefaultFormatter defaultFormatter0 = new DefaultFormatter();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) defaultFormatter0);
      Dimension dimension0 = jFormattedTextField0.getPreferredSize();
      Rectangle rectangle0 = new Rectangle(point1, dimension0);
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle0, plotOrientation0, 1562.2, periodAxis0, xYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 0.5F, 680);
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RESET_BOTH");
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, (PlotOrientation) null, 300, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getDatasetCount();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 0.08, combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot2.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot3.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot3.DEFAULT_CROSSHAIR_STROKE, 1);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.removeDomainMarker((Marker) intervalMarker0, layer1);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      combinedDomainXYPlot2.clearSelection();
      combinedDomainXYPlot3.configureDomainAxes();
      combinedDomainXYPlot3.setRangeMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      combinedDomainXYPlot2.getDomainAxis((-1892));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.indexOf((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1890));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo2);
      combinedDomainXYPlot0.panRangeAxes(1, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.getAnnotations();
      DateAxis dateAxis0 = new DateAxis();
      valueAxis0.setTickMarkPaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = valueAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0F, "", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYPlot xYPlot1 = new XYPlot(timePeriodValuesCollection0, valueAxisArray0[0], dateAxis0, vectorRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      jFreeChart0.setBorderVisible(false);
      XYPlot xYPlot2 = jFreeChart0.getXYPlot();
      xYPlot2.isRangeMinorGridlinesVisible();
      xYPlot0.getRenderer(1);
      combinedDomainXYPlot1.getDomainCrosshairPaint();
      xYPlot2.clearRangeAxes();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      NumberAxis numberAxis0 = new NumberAxis();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("Indices must be Integer instances.", decimalFormatSymbols0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", decimalFormat0, decimalFormat0);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(12.0, true, standardXYToolTipGenerator0);
      candlestickRenderer0.getBaseURLGenerator();
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(standardXYToolTipGenerator0, (XYURLGenerator) null);
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(defaultIntervalXYDataset0, numberAxis0, numberAxis0, stackedXYAreaRenderer2_0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to org.jfree.data.xy.TableXYDataset
         //
         verifyException("org.jfree.chart.renderer.xy.StackedXYAreaRenderer2", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(meterPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.getDomainAxis(10);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemLabelPaint(146, 5, false);
      xYPlot0.setRangeGridlinePaint(paint0);
      xYPlot0.getDomainAxis();
      xYPlot0.clearRangeMarkers();
      xYPlot0.getRangeAxisLocation(500);
      AxisLocation axisLocation0 = xYPlot0.getDomainAxisLocation((-1306));
      xYPlot0.setRangeAxisLocation(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.setRangeCrosshairValue(3.141592653589793, false);
      ValueMarker valueMarker0 = new ValueMarker(1.5);
      valueMarker0.setOutlineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("<ptVLN}K Hv3&9Ba]M");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      combinedRangeXYPlot0.setDomainCrosshairStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      dateAxis0.setTickLabelsVisible(true);
      dateAxis0.setAxisLineStroke(combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE);
      dateAxis0.getRange();
      System.setCurrentTimeMillis(0L);
      combinedRangeXYPlot0.getRangeAxis();
      combinedRangeXYPlot0.getDomainAxisEdge(500);
      combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      combinedRangeXYPlot0.getRangeAxis(500);
      PlotOrientation plotOrientation0 = combinedRangeXYPlot0.getOrientation();
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxes(500, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      CategoryMarker categoryMarker1 = new CategoryMarker("i");
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker1, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("i");
      ModuloAxis moduloAxis0 = new ModuloAxis("CEt>q]Ucz]", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.gray;
      BasicStroke basicStroke0 = new BasicStroke();
      combinedDomainXYPlot0.setDomainCrosshairPaint(moduloAxis0.DEFAULT_AXIS_LINE_PAINT);
      Color color1 = Color.BLACK;
      combinedDomainXYPlot0.addRangeMarker((-2), (Marker) categoryMarker1, layer0, true);
      combinedDomainXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("jPp>Wk:MI4l@2$Mj", combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(9, 500, 11, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Point2D.Double point2D_Double0 = new Point2D.Double(10.0, 9);
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Double0, point2D_Double0);
      Rectangle2D rectangle2D0 = line2D_Float0.getBounds2D();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      combinedRangeXYPlot0.getDomainAxisLocation((-3250));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.getGuideLineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation(2370);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.zoomRangeAxes((double) 1.0F, (double) 2370, plotRenderingInfo0, (Point2D) point2D_Double0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = Color.BLACK;
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addRangeMarker(2370, (Marker) null, layer0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      logarithmicAxis0.setTickMarkInsideLength(1551.0F);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeMinorGridlinesVisible(true);
      combinedDomainXYPlot1.setDomainAxis(7, (ValueAxis) logarithmicAxis0, false);
      combinedDomainXYPlot1.getPlotType();
      combinedDomainXYPlot0.clearRangeMarkers(15);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      Range range0 = Range.shift((Range) dateRange0, Double.NaN, false);
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'marker' not permitted.", range0);
      combinedDomainXYPlot1.setRangeAxis((ValueAxis) moduloAxis0);
      combinedDomainXYPlot1.setDomainGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      combinedDomainXYPlot1.getDomainAxisEdge(10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      logarithmicAxis0.setTickMarkInsideLength(1551.0F);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.setDomainAxis((-1408), (ValueAxis) logarithmicAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainZeroBaselineVisible();
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((-300.532369229344), true);
      xYPlot0.setRenderer((XYItemRenderer) clusteredXYBarRenderer0);
      xYPlot0.getAxisOffset();
      xYPlot0.isDomainMinorGridlinesVisible();
      int int0 = 2245;
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(10, xYPlot0.DEFAULT_CROSSHAIR_PAINT, xYPlot0.DEFAULT_CROSSHAIR_STROKE, xYPlot0.DEFAULT_BACKGROUND_PAINT, clusteredXYBarRenderer0.DEFAULT_OUTLINE_STROKE, 2245);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      DateAxis dateAxis0 = new DateAxis();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes((double) 500, plotRenderingInfo1, (Point2D) null, false);
      IntervalMarker intervalMarker0 = new IntervalMarker(6.0, (-1554.68653052092), logAxis0.DEFAULT_AXIS_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot();
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.getSectionOutlineStroke(500);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 300, 1466, 128, 460);
      chartRenderingInfo0.clone();
      rectangle2D_Double0.x = (double) 43;
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(460, (-3875.6297), 460, 10.0, jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3856, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("ZOOM_IN_RANGE");
      combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle2D_Double0, plotOrientation0, 0.5F, logarithmicAxis0, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("R$~P$T]_{b>A");
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      combinedDomainXYPlot0.getDomainAxisEdge(2);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = new BasicStroke(0.0F);
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE);
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.lookupSeriesShape(10);
      DefaultListModel<JCheckBox> defaultListModel0 = new DefaultListModel<JCheckBox>();
      JList<JCheckBox> jList0 = new JList<JCheckBox>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(500, color0, color0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jList0, 4, 10, 420, 28);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, rectangle0, 0.0F, logarithmicAxis0.DEFAULT_AXIS_LINE_STROKE, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      LogAxis logAxis0 = new LogAxis("&XO\"L?*f!Tt]:\"7I");
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      numberAxis0.setLabelAngle(10.0);
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[3] = (ValueAxis) numberAxis0;
      valueAxisArray0[4] = (ValueAxis) logAxis0;
      valueAxisArray0[5] = (ValueAxis) logAxis0;
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      combinedRangeXYPlot0.setRangeCrosshairValue(0.0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      int int0 = 1766;
      Marker marker0 = null;
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = DebugGraphics.flashColor();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      DateAxis dateAxis1 = new DateAxis();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.centerRange(1.0F);
      numberAxis0.setTickMarkPaint(dateAxis1.DEFAULT_AXIS_LINE_PAINT);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0, "", "org.jfree.chart.renderer.xy.YIntervalRenderer");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, dateAxis0, dateAxis1, vectorRenderer0);
      xYPlot0.getRenderer((-2351));
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      xYPlot0.getDomainAxisLocation(10);
      BufferedImage bufferedImage0 = new BufferedImage(10, 2, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle2D rectangle2D0 = generalPath0.getBounds2D();
      combinedRangeXYPlot0.drawRangeGridlines(graphics2D0, rectangle2D0, (List) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 500);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(500, numberAxis0.DEFAULT_RANGE, lengthConstraintType0, (-319.59055), numberAxis0.DEFAULT_RANGE, lengthConstraintType0);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearAnnotations();
      combinedDomainXYPlot0.getDomainAxisEdge(500);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1.0));
      combinedDomainXYPlot0.getRendererForDataset(xIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getDomainAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = 2.0F;
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      IntervalMarker intervalMarker0 = new IntervalMarker(2.0F, 10, thermometerPlot0.DEFAULT_OUTLINE_PAINT, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 0, false);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addRangeMarker(18, (Marker) intervalMarker0, layer0, false);
      combinedRangeXYPlot0.getLegendItems();
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation(Double.POSITIVE_INFINITY, 0.0, 1, Double.POSITIVE_INFINITY, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      combinedRangeXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(1, (-358), byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (-358) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.getDomainAxisEdge();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.setForegroundAlpha(0.0F);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = 2.0F;
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedRangeXYPlot0.zoomRangeAxes((-1770.817), plotRenderingInfo1, (Point2D) point2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.clearSubtitles();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      RescaleOp rescaleOp0 = new RescaleOp(10, 10, renderingHints0);
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      combinedDomainXYPlot0.getDomainAxisEdge(33);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'stroke' argument.");
      logarithmicAxis0.setTickMarkInsideLength(1551.0F);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainAxis(33, (ValueAxis) logarithmicAxis0, false);
      combinedDomainXYPlot1.getPlotType();
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      combinedDomainXYPlot0.setRenderer(10, (XYItemRenderer) xYLineAndShapeRenderer0);
      combinedDomainXYPlot1.isRangeZeroBaselineVisible();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'offset' argument.");
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(logarithmicAxis0.DEFAULT_TICK_UNIT);
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(simpleHistogramDataset0);
      intervalXYDelegate0.getDomainBounds(false);
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      Color color0 = Color.GRAY;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Color color1 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      combinedDomainXYPlot0.getLegendItems();
      combinedDomainXYPlot0.getDomainCrosshairPaint();
      int int0 = (-4549);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-4549), 500, (byte[]) null, (byte[]) null, (byte[]) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = Color.GRAY;
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Layer layer2 = Layer.BACKGROUND;
      ValueMarker valueMarker0 = new ValueMarker(2.0F);
      combinedDomainXYPlot0.addDomainMarker(0, (Marker) valueMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 0.5F, 680);
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(10, (Marker) categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      Color color0 = DebugGraphics.flashColor();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      DateAxis dateAxis1 = new DateAxis();
      NumberAxis numberAxis0 = new NumberAxis("");
      numberAxis0.setTickMarkPaint(dateAxis1.DEFAULT_AXIS_LINE_PAINT);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0, "", "org.jfree.chart.renderer.xy.YIntervalRenderer");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, dateAxis0, dateAxis1, vectorRenderer0);
      xYPlot0.getRenderer((-2351));
      combinedRangeXYPlot0.setDomainMinorGridlineStroke(numberAxis0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      XYShapeRenderer xYShapeRenderer1 = new XYShapeRenderer();
      xYShapeRenderer1.getGuideLineStroke();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("qeAFa3)TQ0ksCM");
      numberAxis3D0.setAutoTickUnitSelection(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot1.configureDomainAxes();
      combinedDomainXYPlot0.getDomainAxisEdge((-1));
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      BasicStroke basicStroke0 = new BasicStroke(1.0F);
      combinedDomainXYPlot0.setDomainCrosshairStroke(basicStroke0);
      xYShapeRenderer0.lookupSeriesShape(10);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 0.05, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, xYShapeRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.NumberAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlinesVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot1.setQuadrantOrigin(point2D_Float0);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot2.getDomainMinorGridlineStroke();
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(10, (-1529.963282846216));
      barRenderer3D0.getWallPaint();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("Null 'layer' not permitted.");
      categoryAxis3D0.getAxisLineStroke();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.removeRangeMarker(500, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      NumberAxis numberAxis0 = new NumberAxis();
      XYPlot xYPlot0 = new XYPlot((XYDataset) null, numberAxis0, numberAxis0, vectorRenderer0);
      xYPlot0.getRenderer(2701);
      LinkedList<DefaultXYZDataset> linkedList0 = new LinkedList<DefaultXYZDataset>();
      xYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainGridlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      NumberAxis numberAxis0 = new NumberAxis();
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      valueAxisArray0[1] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[3] = (ValueAxis) logarithmicAxis0;
      combinedRangeXYPlot1.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRenderers((XYItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DebugGraphics.flashColor();
      Layer layer0 = Layer.FOREGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(221, layer1);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(10, 10);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedDomainXYPlot1.getRangeCrosshairValue();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(10, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 1.0F);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((-358), (Marker) categoryMarker0, layer0, false);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(10, 1.0F, 0.5F, 680);
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_IN_DOMAIN");
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D_Double0, (PlotOrientation) null, 680.0, periodAxis0, periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_MARK_PAINT);
      combinedDomainXYPlot0.getDomainAxisCount();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = chartPanel0.getLocation();
      Point2D point2D0 = affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.draw(graphics2D0, rectangle0, point2D0, plotState0, plotRenderingInfo0);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      combinedRangeXYPlot0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      jFreeChart0.createBufferedImage(10, 500);
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(500, numberAxis0.DEFAULT_RANGE, lengthConstraintType0, (-319.59055), numberAxis0.DEFAULT_RANGE, lengthConstraintType0);
      rectangleConstraint0.toUnconstrainedHeight();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.removeDomainMarker(369, (Marker) null, layer0);
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(200.0, (double) defaultXYItemRenderer0.ZERO, 1.0F, (-1.0), jFreeChart0);
      XYDrawableAnnotation xYDrawableAnnotation1 = new XYDrawableAnnotation((-2013.7684601501685), 1.0F, (-555.92635702), 666.71806, (-2220.995372473), jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation1, false);
      Layer layer1 = Layer.BACKGROUND;
      xYPlot0.getDomainMarkers(10, layer1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot1.isDomainZeroBaselineVisible();
      combinedDomainXYPlot1.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      XYPlot xYPlot1 = new XYPlot();
      combinedDomainXYPlot0.add(xYPlot1, 501);
      xYPlot0.setRangeCrosshairValue(2978.658203125, false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(10, 10, (-726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -726
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairPaint(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_PAINT);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(500.0, false, (XYToolTipGenerator) null);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer();
      candlestickRenderer0.getBaseOutlineStroke();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(combinedRangeXYPlot1.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.isDomainPannable();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      AxisLocation axisLocation1 = AxisLocation.BOTTOM_OR_LEFT;
      combinedRangeXYPlot0.setDomainAxisLocation(0, axisLocation1, false);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedRangeXYPlot2.getRendererForDataset(defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) null, false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("%jrS=*c");
      combinedDomainXYPlot0.getRangeAxisForDataset(500);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantPaint(500, logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (500) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.clone();
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      DateAxis dateAxis0 = new DateAxis();
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      int int0 = 1569;
      ValueMarker valueMarker0 = new ValueMarker(1569);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.isRangeGridlinesVisible();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      String string0 = "org.jfree.chart.text.TextBox";
      try { 
        ICC_Profile.getInstance("org.jfree.chart.text.TextBox");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.jfree.chart.text.TextBox
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.getGuideLineStroke();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("qeAFa3)TQ0ksCM");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getDomainAxisEdge(658);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainCrosshairStroke(xYShapeRenderer0.DEFAULT_OUTLINE_STROKE);
      combinedDomainXYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, Double.NaN, xYShapeRenderer0.DEFAULT_STROKE, numberAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.setEntityCollection((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      LinkedList<ObjectList> linkedList0 = new LinkedList<ObjectList>();
      DateAxis dateAxis0 = new DateAxis();
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logAxis0);
      LogAxis logAxis1 = new LogAxis("}");
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) logAxis1);
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset(vectorSeriesCollection0);
      combinedDomainXYPlot1.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Layer layer0 = Layer.BACKGROUND;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("9Y9WRIT");
      combinedRangeXYPlot0.getRangeAxisIndex(numberAxis3D0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      multiplePiePlot0.getPieChart();
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      simpleTimeZone0.getOffset((long) 15);
      String string0 = "|N{%u{l3\\uWsO&m|O";
      Locale locale0 = new Locale("2", string0, "");
      DateAxis dateAxis0 = new DateAxis("", simpleTimeZone0, locale0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.setRangeAxis((ValueAxis) dateAxis0);
      combinedRangeXYPlot1.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRendererForDataset(vectorSeriesCollection0);
      combinedDomainXYPlot1.getLegendItems();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      SeriesRenderingOrder seriesRenderingOrder0 = xYPlot0.getSeriesRenderingOrder();
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("7Z4otIFM,G+^9^,Ey");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      double double0 = 403.3743;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Point2D point2D0 = arc2D_Double0.getStartPoint();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.zoomDomainAxes(403.3743, (double) 0.5F, plotRenderingInfo0, point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (423.543015) <= upper (0.525).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      xYShapeRenderer0.getGuideLineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation((-1));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      combinedRangeXYPlot0.zoomRangeAxes(5.0E11, (-3061.19011029259), plotRenderingInfo0, (Point2D) point2D_Double0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      defaultPolarItemRenderer0.getSeriesStroke(203);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = 2.0F;
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(combinedDomainXYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      combinedRangeXYPlot0.zoomRangeAxes((-1770.817), plotRenderingInfo1, (Point2D) point2D_Float0);
      JFreeChart jFreeChart0 = new JFreeChart("", combinedRangeXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      RescaleOp rescaleOp0 = new RescaleOp(10, 10, renderingHints0);
      // Undeclared exception!
      try { 
        rescaleOp0.filter((BufferedImage) null, (BufferedImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRenderer((-938), (XYItemRenderer) xYShapeRenderer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Stroke stroke0 = xYShapeRenderer0.getGuideLineStroke();
      xYPlot0.setOutlineStroke(stroke0);
      xYPlot0.setDomainMinorGridlinesVisible(true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot1.isDomainZeroBaselineVisible();
      combinedDomainXYPlot1.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot2.configureDomainAxes();
      combinedDomainXYPlot0.getDomainAxisEdge(0);
      combinedDomainXYPlot1.setDomainCrosshairStroke(xYPlot0.DEFAULT_GRIDLINE_STROKE);
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        xYPlot0.drawVerticalLine((Graphics2D) null, (Rectangle2D) null, 10.0, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, combinedDomainXYPlot2.DEFAULT_CROSSHAIR_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-796.00188081), 0.5F, (-3875.6297), 10);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(43);
      softBevelBorder0.getInteriorRectangle((Component) chartPanel0, 300, 1466, 128, 473);
      rectangle2D_Double0.x = (double) 43;
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((-6315.007722913046), (-3875.6297), (-6315.007722913046), 10.0, jFreeChart0);
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYDrawableAnnotation0, true);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-850.99718), false, (XYToolTipGenerator) null);
      CandlestickRenderer candlestickRenderer1 = new CandlestickRenderer();
      candlestickRenderer1.getBaseOutlineStroke();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedRangeXYPlot0.isDomainPannable();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      CombinedRangeXYPlot combinedRangeXYPlot2 = new CombinedRangeXYPlot();
      combinedRangeXYPlot2.setDomainAxisLocation(2, axisLocation0, true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.getGuideLineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.rendererChanged((RendererChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot1.isDomainZeroBaselineVisible();
      combinedDomainXYPlot1.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      xYPlot0.setRangeCrosshairValue(2978.658203125, false);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-726), 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-726) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRenderer(3468, (XYItemRenderer) null, false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("%jrS=*c");
      combinedDomainXYPlot0.getRangeAxisForDataset(2360);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot0.getRangeAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.panRangeAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNotNull(dateAxis0);
      
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, valueAxisArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      Rectangle rectangle0 = new Rectangle(693, 10, 500, 10);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D0, 500, (Layer) null);
      combinedDomainXYPlot0.getDomainAxisLocation(360);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      combinedDomainXYPlot0.setDataset((XYDataset) defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("7Z4otIFM,G+^9^,Ey");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(500, numberAxis0.DEFAULT_RANGE, lengthConstraintType0, (-319.59055), numberAxis0.DEFAULT_RANGE, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      shortTextTitle0.arrange(graphics2D0, rectangleConstraint1);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("7Z4otIFM,G+^9^,Ey");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-592));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -592 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DebugGraphics.flashColor();
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, numberAxis3D0, defaultPolarItemRenderer0);
      polarPlot0.getAngleGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers((-2443), layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(94, layer0);
      combinedDomainXYPlot1.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.mapDatasetToRangeAxis(1074, 10);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDomainAxisIndex((ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.setDomainMinorGridlinesVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Font font0 = TextAnnotation.DEFAULT_FONT;
      JFreeChart jFreeChart0 = new JFreeChart("e?4<Trx d|OCL", font0, combinedDomainXYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1608), 7, 501, 10, 7, 10, true, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes((-185.4313921983276), plotRenderingInfo0, (Point2D) null, false);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      combinedDomainXYPlot1.setQuadrantOrigin(point2D_Float0);
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      Layer layer0 = Layer.FOREGROUND;
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      valueAxisArray0[0] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[1] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[2] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[3] = (ValueAxis) logarithmicAxis0;
      valueAxisArray0[4] = (ValueAxis) logarithmicAxis0;
      xYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DebugGraphics.flashColor();
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAngleGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeMarkers(10, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot1.setDomainTickBandPaint(dateAxis0.DEFAULT_AXIS_LINE_PAINT);
      combinedDomainXYPlot1.getDomainMarkers(221, layer1);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(10, 10);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[8];
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxisArray0[0] = (CategoryAxis) categoryAxis3D0;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxisArray0[1] = categoryAxis0;
      CategoryAxis3D categoryAxis3D1 = new CategoryAxis3D("_~}zRi}$d s36|f");
      categoryAxisArray0[2] = (CategoryAxis) categoryAxis3D1;
      CategoryAxis3D categoryAxis3D2 = new CategoryAxis3D("TextAnchor.CENTER_LEFT");
      categoryAxisArray0[3] = (CategoryAxis) categoryAxis3D2;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("_~}zRi}$d s36|f");
      categoryAxisArray0[4] = (CategoryAxis) extendedCategoryAxis0;
      CategoryAxis3D categoryAxis3D3 = new CategoryAxis3D("");
      categoryAxisArray0[5] = (CategoryAxis) categoryAxis3D3;
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("^^rXFn");
      categoryAxisArray0[6] = (CategoryAxis) subCategoryAxis0;
      ExtendedCategoryAxis extendedCategoryAxis1 = new ExtendedCategoryAxis("");
      categoryAxisArray0[7] = (CategoryAxis) extendedCategoryAxis1;
      DefaultComboBoxModel<CategoryAxis> defaultComboBoxModel0 = new DefaultComboBoxModel<CategoryAxis>(categoryAxisArray0);
      JList<CategoryAxis> jList0 = new JList<CategoryAxis>(defaultComboBoxModel0);
      jList0.getCellBounds(10, 10);
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, (Rectangle2D) null, 10, layer0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.removeDomainMarker((-494), (Marker) null, layer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = (-617.3744F);
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.configureDomainAxes();
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Stroke stroke0 = defaultPolarItemRenderer0.getBaseOutlineStroke();
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10.0, (String) null);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker(582, (Marker) null, layer0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Rectangle rectangle0 = new Rectangle(1110, 10, (-1), 1766);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1873));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-2351.92), false, (XYToolTipGenerator) null);
      candlestickRenderer0.getBaseOutlineStroke();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      combinedRangeXYPlot1.setDomainZeroBaselineStroke(xYPlot0.DEFAULT_OUTLINE_STROKE);
      combinedRangeXYPlot1.isDomainPannable();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.setDomainAxisLocation((-1873), axisLocation0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo1);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 0, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(500, (Marker) intervalMarker0, layer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Color color0 = new Color(3);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainCrosshairValue((double) 10, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot1.setDataset((-1), (XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("nCVXcsMOh7NqALR@", dateFormat0, dateFormat0);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(500, standardXYToolTipGenerator0);
      XYPlot xYPlot1 = new XYPlot(defaultTableXYDataset0, numberAxis0, numberAxis0, standardXYItemRenderer0);
      Rectangle rectangle0 = new Rectangle(1979, 25, 6898, 10);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      xYPlot0.zoomDomainAxes((-443.091335052376), plotRenderingInfo0, (Point2D) null, false);
      IntervalMarker intervalMarker0 = new IntervalMarker((-795.89721703), 225.0, xYPlot1.DEFAULT_GRIDLINE_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setDomainGridlineStroke(xYPlot1.DEFAULT_CROSSHAIR_STROKE);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(numberAxis0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[0];
      combinedRangeXYPlot1.setDomainAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      combinedDomainXYPlot0.addRangeMarker(865, (Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.getDomainMarkers((-2077), layer0);
      combinedDomainXYPlot1.getDomainAxisCount();
      combinedDomainXYPlot1.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getRangeZeroBaselinePaint();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0, 1.0F, "ItemLabelAnchor.OUTSIDE5");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setAxisOffset(combinedDomainXYPlot2.DEFAULT_INSETS);
      combinedDomainXYPlot0.getDomainAxisLocation((-326));
      combinedDomainXYPlot1.getDomainAxisLocation();
      combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot2.isRangeGridlinesVisible();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(") should be in the range 0 to 3.");
      ModuloAxis moduloAxis0 = new ModuloAxis("1", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setDomainCrosshairPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      combinedDomainXYPlot1.addRangeMarker(1766, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      Stroke stroke0 = xYShapeRenderer0.getGuideLineStroke();
      xYPlot0.setOutlineStroke(stroke0);
      xYPlot0.setDomainMinorGridlinesVisible(true);
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      combinedDomainXYPlot0.setRenderer(500, (XYItemRenderer) xYStepAreaRenderer0, true);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("O3__Hw cJO!*");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(2525);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2525 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setDomainCrosshairPaint(numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(Double.POSITIVE_INFINITY, false, (XYToolTipGenerator) null);
      Stroke stroke0 = candlestickRenderer0.getBaseOutlineStroke();
      combinedRangeXYPlot0.setDomainZeroBaselineStroke(stroke0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 10);
      bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      LogAxis logAxis0 = new LogAxis();
      LinkedList<Size2D> linkedList0 = new LinkedList<Size2D>();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes((-2743), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = DebugGraphics.flashColor();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, defaultPolarItemRenderer0.DEFAULT_PAINT, dateAxis0.DEFAULT_AXIS_LINE_STROKE, defaultPolarItemRenderer0.DEFAULT_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.removeRangeMarker(221, (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)XYPlot.localizationResources;
      XYPlot.localizationResources = (ResourceBundle) propertyResourceBundle0;
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.clearAnnotations();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setQuadrantOrigin((Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3051, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(cyclicNumberAxis0.DEFAULT_RANGE, 15);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-3486.027985444677));
      emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 3049.0, cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      intervalMarker0.setPaint(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) dateAxis0);
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      xYPlot0.getDomainGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1890));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      thermometerPlot0.setDataset(defaultValueDataset0);
      DateAxis dateAxis0 = new DateAxis();
      valueAxis0.setTickMarkPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = valueAxis0;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0F, "", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      vectorRenderer0.lookupSeriesOutlineStroke(10);
      XYPlot xYPlot1 = new XYPlot(timePeriodValuesCollection0, valueAxisArray0[0], dateAxis0, vectorRenderer0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setAxisOffset(combinedDomainXYPlot0.DEFAULT_INSETS);
      combinedRangeXYPlot0.setRangeTickBandPaint(xYPlot1.DEFAULT_OUTLINE_PAINT);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.panRangeAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.getAnnotations();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      DateAxis dateAxis0 = new DateAxis();
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      Rectangle rectangle0 = new Rectangle(693, 10, 500, 10);
      Rectangle2D rectangle2D0 = dateAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle0, true, true);
      combinedDomainXYPlot0.drawRangeMarkers((Graphics2D) null, rectangle2D0, 500, (Layer) null);
      combinedDomainXYPlot0.getRangeCrosshairPaint();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      Locale locale0 = Locale.ITALY;
      NumberAxis.createStandardTickUnits(locale0);
      combinedRangeXYPlot0.setDomainGridlinePaint(numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      combinedRangeXYPlot0.setDomainGridlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setDomainAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DebugGraphics.flashColor();
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      VectorSeries vectorSeries0 = new VectorSeries(false, false, true);
      vectorSeriesCollection0.indexOf(vectorSeries0);
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAngleGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(1417, 10);
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedRangeXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
      combinedRangeXYPlot0.setAxisOffset(combinedDomainXYPlot1.DEFAULT_INSETS);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      PropertyResourceBundle propertyResourceBundle0 = (PropertyResourceBundle)XYPlot.localizationResources;
      XYPlot.localizationResources = (ResourceBundle) propertyResourceBundle0;
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      combinedDomainXYPlot0.setRenderer(1192, (XYItemRenderer) null, false);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      combinedDomainXYPlot0.getRangeAxisForDataset(10);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3051, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(cyclicNumberAxis0.DEFAULT_RANGE, 15);
      emptyBlock0.arrange(graphics2D0, rectangleConstraint0);
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setUseOutlinePaint(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      MockDate mockDate0 = new MockDate(3051, 3051, 12);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot1.getQuadrantPaint(0);
      combinedDomainXYPlot1.getAxisOffset();
      combinedDomainXYPlot1.getIndexOf(candlestickRenderer0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      combinedRangeXYPlot0.clearRangeAxes();
      DebugGraphics.flashColor();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(dateAxis0.DEFAULT_TICK_LABEL_PAINT);
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      combinedRangeXYPlot1.isDomainZeroBaselineVisible();
      combinedRangeXYPlot1.configureRangeAxes();
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      polarPlot0.getAngleGridlineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedRangeXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearRangeMarkers();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(3, (Layer) null);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(221, 3);
      combinedDomainXYPlot2.clearDomainAxes();
      CombinedDomainXYPlot combinedDomainXYPlot4 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot4.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.getRendererForDataset(defaultXYZDataset0);
      combinedRangeXYPlot0.getDomainAxisIndex(cyclicNumberAxis0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = (-617.3744F);
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      combinedDomainXYPlot0.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearDomainMarkers();
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot1.getDomainAxisEdge(1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      Rectangle rectangle0 = new Rectangle(500, (-1063), 1766, 3457);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        xYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      combinedDomainXYPlot0.getDomainCrosshairValue();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ObjectList objectList0 = new ObjectList(10);
      plotRenderingInfo0.equals(objectList0);
      plotRenderingInfo0.clone();
      combinedDomainXYPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) null, false);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint(8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (8) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DateRange dateRange0 = DateAxis.DEFAULT_DATE_RANGE;
      ModuloAxis moduloAxis0 = new ModuloAxis("Gs>*BH1+", dateRange0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(moduloAxis0);
      combinedRangeXYPlot0.getRangeMarkers(500, (Layer) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(500);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 500, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-2923));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxis0);
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo2);
      combinedDomainXYPlot0.panRangeAxes(1, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.getAnnotations();
      IntervalMarker intervalMarker0 = new IntervalMarker(2, 2, combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      intervalMarker0.setPaint(valueAxis0.DEFAULT_TICK_MARK_PAINT);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot2.setDomainAxis(valueAxis0);
      NumberAxis numberAxis0 = new NumberAxis();
      combinedDomainXYPlot1.getDomainZeroBaselinePaint();
      TimeSeries timeSeries0 = new TimeSeries(true, "4s", " out of bounds.");
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      xYPlot0.setDataset(1, (XYDataset) timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[1];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      combinedDomainXYPlot0.addRangeMarker(865, (Marker) intervalMarker0, layer0);
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-2077), layer1);
      combinedDomainXYPlot1.getDomainAxisCount();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, meterPlot0.DEFAULT_OUTLINE_STROKE, 1.0F);
      Layer layer3 = Layer.FOREGROUND;
      combinedDomainXYPlot1.removeDomainMarker((-2077), (Marker) intervalMarker0, layer0, false);
      combinedDomainXYPlot0.getPlotType();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseOutlinePaint();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 500;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2.0F;
      color0.getRGBColorComponents(floatArray0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.BACKGROUND;
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation((-1701));
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation1, false);
      Layer layer1 = Layer.FOREGROUND;
      int int0 = new Integer(500);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      Color color1 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(defaultPolarItemRenderer0.DEFAULT_PAINT);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeAxisLocation((-1701), axisLocation1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("", logarithmicAxis0.DEFAULT_RANGE);
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.setDomainCrosshairPaint(logarithmicAxis0.DEFAULT_TICK_MARK_PAINT);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1890));
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo2);
      combinedDomainXYPlot0.getAnnotations();
      DateAxis dateAxis0 = new DateAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0F, "", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addChangeListener(chartPanel0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      xYPlot1.isRangeMinorGridlinesVisible();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.getRangeGridlineStroke();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) dateAxis0);
      NumberAxis numberAxis0 = new NumberAxis();
      Paint paint0 = combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      IntervalMarker intervalMarker0 = new IntervalMarker(2149.09, 1.0E-8, paint0, dateAxis0.DEFAULT_TICK_MARK_STROKE, numberAxis0.DEFAULT_AXIS_LINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-131), (Marker) intervalMarker0, layer0, true);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ShortTextTitle shortTextTitle0 = new ShortTextTitle("7Z4otIFM,G+^9^,Ey");
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      LengthConstraintType lengthConstraintType0 = LengthConstraintType.RANGE;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(500, numberAxis0.DEFAULT_RANGE, lengthConstraintType0, (-319.59055), numberAxis0.DEFAULT_RANGE, lengthConstraintType0);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      Size2D size2D0 = shortTextTitle0.arrange(graphics2D0, rectangleConstraint1);
      RectangleAnchor.createRectangle(size2D0, 212.78550224061848, 10, rectangleAnchor0);
      ValueMarker valueMarker0 = new ValueMarker(2.0F, defaultXYItemRenderer0.DEFAULT_PAINT, numberAxis0.DEFAULT_TICK_MARK_STROKE);
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint((-1648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1648) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3051, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(cyclicNumberAxis0.DEFAULT_RANGE, 15);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-3486.027985444677));
      emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.setUseOutlinePaint(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeGridlinePaint(cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      MockDate mockDate0 = new MockDate(3051, 3051, 12);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot1.getQuadrantPaint(0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      Stroke stroke0 = xYShapeRenderer0.getGuideLineStroke();
      xYPlot0.setOutlineStroke(stroke0);
      xYPlot0.configureDomainAxes();
      xYPlot0.setDomainMinorGridlinesVisible(true);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation(xYPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, xYShapeRenderer0.DEFAULT_VALUE_LABEL_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYShapeAnnotation0);
      xYPlot0.getRenderer();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      combinedDomainXYPlot1.addRangeMarker(1242, (Marker) categoryMarker0, layer0);
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      combinedDomainXYPlot0.getDomainAxisCount();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.getItemStroke((-3375), 204, true);
      CategoryMarker categoryMarker1 = new CategoryMarker(defaultPolarItemRenderer0.ZERO, combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot1.DEFAULT_CROSSHAIR_STROKE, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      Layer layer3 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeDomainMarker(10, (Marker) categoryMarker0, layer3, true);
      combinedDomainXYPlot0.getPlotType();
      combinedDomainXYPlot1.setWeight(10);
      combinedDomainXYPlot0.getDomainMarkers(layer2);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = (-617.3744F);
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation((-1));
      combinedRangeXYPlot0.zoomRangeAxes((double) 2, (double) 2, plotRenderingInfo1, (Point2D) point2D_Float0);
      combinedDomainXYPlot0.setRangeMinorGridlineStroke(thermometerPlot0.DEFAULT_OUTLINE_STROKE);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot0.setBackgroundImageAlignment((-274));
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setFixedAutoRange(1.0F);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3051, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(cyclicNumberAxis0.DEFAULT_RANGE, 15);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-3486.027985444677));
      emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.removeRangeMarker(500, (Marker) valueMarker0, layer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      Color color0 = new Color(352);
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.setDomainCrosshairValue(3049.0, false);
      combinedDomainXYPlot0.setDataset(500, (XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainCrosshairVisible(false);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      combinedDomainXYPlot2.isDomainZeroBaselineVisible();
      combinedDomainXYPlot2.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.clearDomainMarkers();
      combinedDomainXYPlot3.configureDomainAxes();
      combinedDomainXYPlot1.getDomainAxisEdge(0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      Rectangle rectangle0 = new Rectangle(1104, 10, (-358), 1766);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.setPlotArea(rectangle0);
      chartRenderingInfo0.equals((Object) null);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      intervalMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-358), (Marker) intervalMarker0, layer0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat.getIntegerInstance(locale0);
      MockDateFormat.getInstance();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1074.1664;
      doubleArray0[1] = (double) 1104;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      combinedDomainXYPlot0.getRangeZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (-149.474489594898));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      combinedRangeXYPlot0.getDomainAxisLocation();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(552.0F, 954.9755F, 0.0F, 0.0F);
      plotRenderingInfo0.setPlotArea(rectangle2D_Float0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes(1673.3199265529, plotRenderingInfo1, (Point2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      Stroke stroke0 = xYShapeRenderer0.getGuideLineStroke();
      xYPlot0.setOutlineStroke(stroke0);
      xYPlot0.configureDomainAxes();
      xYPlot0.setDomainMinorGridlinesVisible(true);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setPlot(xYPlot0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logAxis0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point2D_Float0.x = (-617.3744F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation((-1));
      combinedRangeXYPlot0.getFixedDomainAxisSpace();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = 0.05;
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, numberAxis3D0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'polygon' array must contain an even number of items.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.clearRangeAxes();
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      xYShapeRenderer0.findRangeBounds((XYDataset) null);
      xYShapeRenderer0.getGuideLineStroke();
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      IntervalMarker intervalMarker0 = new IntervalMarker(5000000.0, 1.0F);
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) intervalMarker0, (Layer) null);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers(252, layer0);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis0);
      int int0 = 782;
      int int1 = 4;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(547);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 547, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Rectangle rectangle0 = new Rectangle(1104, 10, (-358), 1766);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, true, true);
      chartPanel0.getVisibleRect();
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0, false);
      chartPanel1.getChartRenderingInfo();
      combinedDomainXYPlot0.getDomainAxisForDataset(0);
      combinedDomainXYPlot0.getAxisOffset();
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      AxisLocation.getOpposite(axisLocation1);
      AxisLocation.getOpposite(axisLocation1);
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      xYErrorRenderer0.getErrorStroke();
      SystemColor systemColor0 = SystemColor.windowText;
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = chartPanel0.getLocation();
      affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      axisSpace0.toString();
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      combinedRangeXYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      combinedRangeXYPlot0.calculateRangeAxisSpace(graphics2D0, rectangle0, axisSpace1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainCrosshairVisible(false);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot1.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      MockDate mockDate0 = new MockDate(10, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      xYPlot0.getRendererForDataset((XYDataset) null);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location((-816), 4);
      combinedDomainXYPlot0.panDomainAxes(0.0, (PlotRenderingInfo) null, point0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 226;
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      valueMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartRenderingInfo0.setRenderingSource(chartPanel0);
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo1);
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(entityCollection0);
      chartRenderingInfo1.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      combinedDomainXYPlot0.zoomDomainAxes((-559.78), 10.0, plotRenderingInfo0, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation(1);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) null);
      combinedRangeXYPlot0.zoomRangeAxes((double) 226, (double) 1.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(0.3F, 187.0F, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1, 3, 768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 768
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      ValueMarker valueMarker0 = new ValueMarker(2.0F);
      valueMarker0.setOutlineStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker(10, (Marker) valueMarker0, layer0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("org.jfree.chart.labels.IntervalCategoryItemLabelGenerator", 10.0, 2.0F, 10.0);
      xYPointerAnnotation0.getTextAnchor();
      valueMarker0.setLabelTextAnchor(xYPointerAnnotation0.DEFAULT_TEXT_ANCHOR);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot1.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot2.mapDatasetToRangeAxes((-4213), (List) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      combinedDomainXYPlot0.panRangeAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null);
      List list0 = combinedDomainXYPlot0.getAnnotations();
      DateAxis dateAxis0 = new DateAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.getRangeAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(10, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setOutlineStroke(combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.removeRangeMarker(226, (Marker) valueMarker0, layer0);
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("Null 'axisIndex' argument.", (-594.1477676841778), 226, 1.0F);
      TextAnchor textAnchor0 = xYPointerAnnotation0.getTextAnchor();
      valueMarker0.setLabelTextAnchor(textAnchor0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      DateAxis dateAxis0 = new DateAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Rectangle rectangle0 = new Rectangle(1104, 10, (-358), 1766);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.setPlotArea(rectangle0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      intervalMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-358), (Marker) intervalMarker0, layer0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat.getIntegerInstance(locale0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(1214);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'axisIndex' argument.", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = chartPanel0.getLocation();
      affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      chartRenderingInfo0.getPlotInfo();
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.calculateAxisSpace((Graphics2D) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1079, 10, chartRenderingInfo0);
      bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.getDataArea();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      Color color0 = new Color(10);
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.setDomainCrosshairValue(0.7853981633974483, false);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.setRangePannable(false);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ValueMarker valueMarker0 = new ValueMarker(10);
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      xYPlot0.setDomainPannable(true);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      combinedDomainXYPlot0.clearSelection();
      combinedDomainXYPlot0.configureDomainAxes();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.BACKGROUND;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot(vectorSeriesCollection0, dateAxis0, defaultPolarItemRenderer0);
      Stroke stroke0 = polarPlot0.getAngleGridlineStroke();
      categoryMarker0.setOutlineStroke(stroke0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      combinedDomainXYPlot1.addRangeMarker(1242, (Marker) categoryMarker0, layer0);
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(1417, 10);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedRangeXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
      combinedRangeXYPlot0.getDomainAxisIndex(dateAxis0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      chartPanel0.getChartRenderingInfo();
      combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot1.getRendererForDataset((XYDataset) null);
      combinedDomainXYPlot0.getWeight();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("eNmem8");
      logarithmicAxis0.setVisible(false);
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset((-1492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1492 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainCrosshairVisible(false);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot1.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      MockDate mockDate0 = new MockDate(10, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Millisecond millisecond0 = new Millisecond(mockDate0, zoneInfo0);
      CategoryMarker categoryMarker0 = new CategoryMarker(millisecond0, combinedDomainXYPlot2.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot2.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.0F);
      combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      combinedDomainXYPlot2.isDomainZeroBaselineVisible();
      combinedDomainXYPlot2.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot3 = new CombinedDomainXYPlot();
      combinedDomainXYPlot3.configureDomainAxes();
      combinedDomainXYPlot1.getDomainAxisEdge(0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      MeterPlot meterPlot0 = new MeterPlot();
      intervalMarker0.setLabelFont(meterPlot0.DEFAULT_LABEL_FONT);
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      combinedDomainXYPlot0.clearSelection();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      Locale locale0 = Locale.ROOT;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("u;JkVlY9ypqdV90:S", dateFormat0, numberFormat0);
      CustomXYURLGenerator customXYURLGenerator0 = new CustomXYURLGenerator();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, standardXYToolTipGenerator0, customXYURLGenerator0);
      MockDate mockDate0 = new MockDate(10, 270, 3);
      Day day0 = new Day(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, day0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, (-1156.836614298));
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(cyclicXYItemRenderer0, xYBarDataset0);
      meterPlot0.datasetChanged(datasetChangeEvent0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.getDomainAxisEdge(10);
      combinedDomainXYPlot0.clone();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(10);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-239), 211, 2);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(cyclicXYItemRenderer0, waferMapDataset0);
      combinedDomainXYPlot0.datasetChanged(datasetChangeEvent0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      int int0 = 1281;
      double double0 = (-1520.2637207852927);
      boolean boolean0 = true;
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      xYPlot0.setDomainCrosshairLockedOnData(false);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getAnnotations();
      DateAxis dateAxis0 = new DateAxis();
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      JFreeChart jFreeChart0 = new JFreeChart("The index value (", defaultXYItemRenderer0.DEFAULT_VALUE_LABEL_FONT, xYPlot0, true);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 768, (-1720), (-578), 15, (-1720), 2436, false, true, false, false, true, true, true);
      Rectangle rectangle0 = chartPanel0.getBounds();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      RectangleEdge rectangleEdge0 = Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      numberAxis0.java2DToValue(10.0, rectangle0, rectangleEdge0);
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) numberAxis0;
      valueAxisArray0[2] = (ValueAxis) dateAxis0;
      valueAxisArray0[3] = (ValueAxis) numberAxis0;
      valueAxisArray0[4] = (ValueAxis) numberAxis0;
      valueAxisArray0[5] = (ValueAxis) numberAxis0;
      valueAxisArray0[6] = (ValueAxis) dateAxis0;
      valueAxisArray0[7] = (ValueAxis) numberAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getDomainMarkers(layer0);
      xYPlot0.isRangeCrosshairVisible();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (-149.474489594898));
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = generalPath0.getBounds();
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      generalPath0.moveTo(0.05, 0.0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      Point point0 = chartPanel0.getLocation();
      Point2D point2D0 = affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      PlotState plotState0 = new PlotState();
      affineTransform0.setToRotation(0.0, (double) 0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeXYPlot0.draw(graphics2D0, rectangle0, point2D0, plotState0, plotRenderingInfo0);
      LinkedList<Size2D> linkedList0 = new LinkedList<Size2D>();
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(680, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      double[] doubleArray0 = new double[1];
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot0.removeRangeMarker((Marker) categoryMarker0, layer0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "updateValue: can't update null.");
      ValueMarker valueMarker0 = new ValueMarker(1.0E-8, cyclicNumberAxis0.DEFAULT_AXIS_LINE_PAINT, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      EmptyBlock emptyBlock0 = new EmptyBlock(10, (-3486.027985444677));
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 3051, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(cyclicNumberAxis0.DEFAULT_RANGE, 15);
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight((-3486.027985444677));
      Size2D size2D0 = emptyBlock0.arrange(graphics2D0, rectangleConstraint1);
      RectangleAnchor.createRectangle(size2D0, 0.05, 0.0, rectangleAnchor0);
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      valueMarker0.setOutlineStroke(cyclicNumberAxis0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.removeRangeMarker(500, (Marker) valueMarker0, layer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot1.getRangeAxis();
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(10, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      chartPanel0.getVisibleRect();
      chartPanel0.getChartRenderingInfo();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, "PRINT");
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      DateTickUnitType dateTickUnitType0 = DateTickUnitType.MILLISECOND;
      DateTickUnit dateTickUnit0 = new DateTickUnit(dateTickUnitType0, 2421);
      CategoryMarker categoryMarker0 = new CategoryMarker(dateTickUnit0);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainXYPlot1.removeRangeMarker(680, (Marker) categoryMarker0, layer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0);
      DateAxis dateAxis0 = new DateAxis();
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation((double[]) null, stackedBarRenderer0.DEFAULT_STROKE, combinedDomainXYPlot1.DEFAULT_GRIDLINE_PAINT, stackedBarRenderer0.DEFAULT_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'polygon' argument.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getQuadrantOrigin();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.setRangeMinorGridlinePaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.setDomainGridlinePaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      combinedDomainXYPlot1.getDomainAxisEdge(10);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      logarithmicAxis0.setTickMarkInsideLength(0.0F);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, 1.0F, "Null 'origin' argument.");
      combinedDomainXYPlot1.setDomainAxis(3587, (ValueAxis) cyclicNumberAxis0, true);
      combinedDomainXYPlot2.isDomainCrosshairVisible();
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot1.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot0.getPlotType();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.0, 10);
      combinedDomainXYPlot0.addRangeMarker((Marker) intervalMarker0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent("Null 'marker' not permitted.", false);
      combinedDomainXYPlot1.rendererChanged(rendererChangeEvent0);
      combinedDomainXYPlot1.getRangeAxisEdge(500);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Rectangle rectangle0 = new Rectangle(1104, 10, (-358), 1766);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.setPlotArea(rectangle0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      combinedDomainXYPlot0.setDomainCrosshairValue((double) 10, true);
      intervalMarker0.setPaint(combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-358), (Marker) intervalMarker0, layer0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat.getIntegerInstance(locale0);
      MockDateFormat.getInstance();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1074.1664;
      doubleArray0[1] = (double) 1104;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      Paint paint0 = combinedDomainXYPlot0.getDomainGridlinePaint();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(paint0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainCrosshairVisible(false);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot1.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getDomainAxisLocation(10);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot2.setRangeAxisLocation(axisLocation1, false);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getSeriesCount();
      combinedDomainXYPlot2.isDomainGridlinesVisible();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.clearSelection();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1890));
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      thermometerPlot0.setDataset(defaultValueDataset0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo2);
      combinedDomainXYPlot0.panRangeAxes(1, plotRenderingInfo0, (Point2D) null);
      combinedDomainXYPlot0.getAnnotations();
      DateAxis dateAxis0 = new DateAxis();
      numberAxis0.setTickMarkPaint(combinedDomainXYPlot1.DEFAULT_BACKGROUND_PAINT);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0F, "", "");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      XYPlot xYPlot1 = new XYPlot(timePeriodValuesCollection0, valueAxisArray0[0], dateAxis0, vectorRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      XYPlot xYPlot2 = jFreeChart0.getXYPlot();
      xYPlot2.isRangeMinorGridlinesVisible();
      Stroke stroke0 = xYPlot1.getRangeMinorGridlineStroke();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Stroke stroke1 = candlestickRenderer0.getItemStroke(1966, 226, false);
      CategoryMarker categoryMarker0 = new CategoryMarker(2.0, xYPlot1.DEFAULT_CROSSHAIR_PAINT, stroke1, xYPlot1.DEFAULT_GRIDLINE_PAINT, stroke0, 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot2.removeDomainMarker(1995, (Marker) categoryMarker0, layer0, false);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      chartPanel0.getVisibleRect();
      chartPanel0.getChartRenderingInfo();
      combinedDomainXYPlot0.getAxisOffset();
      combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot0.setOrientation(plotOrientation0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      xYItemRendererState0.setCrosshairState((XYCrosshairState) null);
      xYItemRendererState0.getEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot0.zoomDomainAxes(2000000.0, (double) 2.0F, plotRenderingInfo0, (Point2D) point2D_Float0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      AffineTransform affineTransform0 = new AffineTransform();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      combinedDomainXYPlot0.getRangeAxisLocation(500);
      combinedDomainXYPlot0.getDataRange((ValueAxis) null);
      // Undeclared exception!
      try { 
        combinedRangeXYPlot1.zoomRangeAxes(0.0, (-1727.6), plotRenderingInfo0, (Point2D) point2D_Float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1727.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateAxis dateAxis1 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeAxis(500, (ValueAxis) dateAxis0, true);
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.05;
      doubleArray0[1] = (double) 500;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = 0.05;
      doubleArray0[6] = (double) 2.0F;
      doubleArray0[7] = 0.05;
      doubleArray0[8] = (double) 500;
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'polygon' array must contain an even number of items.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getDomainAxisEdge();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot1.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.getDomainAxisLocation(10);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot2.setRangeAxisLocation(axisLocation0, false);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot2.getRangeMarkers(10, layer0);
      combinedDomainXYPlot2.isDomainGridlinesVisible();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_RIGHT;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getRendererForDataset((XYDataset) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Layer layer0 = Layer.FOREGROUND;
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot0.getDomainMarkers(500, layer0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.getRangeAxisEdge(1);
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      candlestickRenderer0.setPlot(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      combinedDomainXYPlot1.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot1.configureDomainAxes();
      combinedDomainXYPlot1.setDomainMinorGridlinesVisible(true);
      Color color0 = new Color(10);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      combinedDomainXYPlot1.setDomainCrosshairValue(0.0, false);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      candlestickRenderer0.setPlot(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      Color color0 = new Color(0);
      combinedDomainXYPlot0.setDomainCrosshairVisible(true);
      combinedDomainXYPlot0.setDomainCrosshairValue((-1173.06), true);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      int int0 = Plot.MINIMUM_HEIGHT_TO_DRAW;
      candlestickRenderer0.setPlot(combinedDomainXYPlot0);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot0.configureDomainAxes();
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      Color color0 = new Color(0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(2);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(10, (-928));
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(":wa3Z(VL<WX?iS&&_5");
      XYPlot xYPlot0 = new XYPlot(timePeriodValuesCollection0, logarithmicAxis0, logarithmicAxis0, vectorRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      xYPlot0.getSeriesRenderingOrder();
      xYPlot1.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      dateAxis0.setMaximumDate(date0);
      Layer layer0 = Layer.FOREGROUND;
      combinedRangeXYPlot0.getRangeMarkers(layer0);
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      combinedRangeXYPlot0.clearDomainMarkers(95);
      combinedRangeXYPlot0.getDomainAxisLocation();
      double[] doubleArray0 = new double[0];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, dateAxis0.DEFAULT_TICK_MARK_STROKE, combinedRangeXYPlot0.DEFAULT_GRIDLINE_PAINT, dateAxis0.DEFAULT_TICK_MARK_PAINT);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      combinedDomainXYPlot0.isRangePannable();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedDomainXYPlot0.createAndAddEntity(rectangle0, plotRenderingInfo0, "ZOOM_RANGE_BOTH", "ZOOM_IN_BOTH");
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -9 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      Layer layer0 = Layer.FOREGROUND;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.removeChangeListener(combinedDomainXYPlot0);
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      Color color0 = new Color(0);
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      combinedDomainXYPlot0.isRangeZoomable();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      logarithmicAxis0.setMinorTickMarkOutsideLength(1693.1167F);
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      combinedRangeXYPlot1.getDomainAxisLocation(500);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1066.85422436));
      candlestickRenderer0.getURLGenerator((-5272), 10, true);
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("{0}: ({1}, {2})");
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(2, standardXYToolTipGenerator0, (XYURLGenerator) null);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      XYSeries xYSeries0 = new XYSeries(3, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 1113);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100.0, 500, "index.html");
      combinedDomainXYPlot0.setRangeCrosshairVisible(false);
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getBaseOutlinePaint();
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(paint0);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      combinedRangeXYPlot0.configureRangeAxes();
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.BACKGROUND;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer1 = Layer.BACKGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      combinedDomainXYPlot1.isDomainGridlinesVisible();
      combinedDomainXYPlot1.addRangeMarker(1242, (Marker) categoryMarker0, layer0);
      Layer layer2 = Layer.FOREGROUND;
      combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      combinedDomainXYPlot0.getDomainAxisCount();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      combinedDomainXYPlot2.mapDatasetToRangeAxis(1417, 10);
      combinedDomainXYPlot0.clearDomainAxes();
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      combinedDomainXYPlot0.getDomainZeroBaselinePaint();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      chartRenderingInfo0.getPlotInfo();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(xYPlot0.DEFAULT_CROSSHAIR_PAINT);
      combinedDomainXYPlot0.setDomainGridlinePaint(xYPlot0.DEFAULT_GRIDLINE_PAINT);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      combinedDomainXYPlot0.getDomainAxisEdge(3587);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("]k6oN[k");
      logarithmicAxis0.setTickMarkInsideLength(1551.0F);
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3587, (-957.0863933), "fa");
      combinedDomainXYPlot0.setDomainAxis(1417, (ValueAxis) cyclicNumberAxis0, false);
      combinedDomainXYPlot1.isDomainCrosshairVisible();
      combinedDomainXYPlot1.clearSelection();
      combinedDomainXYPlot1.setFixedLegendItems((LegendItemCollection) null);
      combinedDomainXYPlot1.getPlotType();
      IntervalMarker intervalMarker0 = new IntervalMarker(10, Double.POSITIVE_INFINITY);
      xYPlot0.addRangeMarker((Marker) intervalMarker0);
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent(combinedDomainXYPlot0, true);
      combinedDomainXYPlot1.rendererChanged(rendererChangeEvent0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      Rectangle rectangle0 = new Rectangle(1104, 10, (-358), 1766);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      plotRenderingInfo0.setPlotArea(rectangle0);
      combinedDomainXYPlot0.zoomDomainAxes((double) 1766, plotRenderingInfo0, (Point2D) null, false);
      combinedDomainXYPlot0.clearRangeMarkers();
      IntervalMarker intervalMarker0 = new IntervalMarker(10.0, 0.0, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker((-358), (Marker) intervalMarker0, layer0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = null;
      try {
        standardXYToolTipGenerator0 = new StandardXYToolTipGenerator((String) null, numberFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'formatString' argument.
         //
         verifyException("org.jfree.chart.labels.AbstractXYItemLabelGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      combinedRangeXYPlot1.getDomainAxisLocation(500);
      combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1066.85422436));
      StandardXYToolTipGenerator.getTimeSeriesInstance();
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("{0}: ({1}, {2})");
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      NumberAxis numberAxis0 = new NumberAxis();
      combinedRangeXYPlot0.getDomainAxis();
      combinedRangeXYPlot0.setDomainCrosshairValue((-1033.989462636453), true);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      combinedDomainXYPlot1.setDomainGridlinesVisible(false);
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(10);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot1.setRangeGridlinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO);
      categoryMarker0.setLabel((String) null);
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      xYPlot0.mapDatasetToDomainAxis(0, 10);
      combinedDomainXYPlot1.addRangeMarker(3541, (Marker) categoryMarker0, layer0, true);
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot1.getDomainAxisLocation(10);
      AxisLocation axisLocation1 = AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot2.setRangeAxisLocation(axisLocation1, false);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot2.getRangeMarkers(10, layer0);
      combinedDomainXYPlot2.isDomainGridlinesVisible();
      combinedDomainXYPlot0.setDomainZeroBaselinePaint(xYPlot0.DEFAULT_BACKGROUND_PAINT);
      combinedDomainXYPlot0.setRangeAxis(3, (ValueAxis) null);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      combinedRangeXYPlot0.setRangeCrosshairStroke(numberAxis3D0.DEFAULT_TICK_MARK_STROKE);
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      combinedDomainXYPlot0.getDomainAxis();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      ValueMarker valueMarker0 = new ValueMarker(1693.1167F);
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.removeRangeMarker(4, (Marker) valueMarker0, layer0);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      combinedDomainXYPlot1.clearSelection();
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot(numberAxis3D0);
      combinedDomainXYPlot2.getRangeAxis();
      combinedDomainXYPlot2.getRangeMarkers(layer0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      
      combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabel());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      
      AxisLocation axisLocation3 = AxisLocation.getOpposite(axisLocation1);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertSame(axisLocation0, axisLocation3);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation3);
      assertSame(axisLocation3, axisLocation2);
      assertNotSame(axisLocation3, axisLocation1);
      assertSame(axisLocation3, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation3.equals((Object)axisLocation1));
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation3.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertSame(axisLocation0, axisLocation3);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation3);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation3));
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      
      xYErrorRenderer0.getErrorStroke();
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      Point point0 = chartPanel0.getLocation();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      Point point1 = (Point)affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      PlotState plotState0 = new PlotState();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      combinedRangeXYPlot0.draw(graphics2D0, rectangle0, point1, plotState0, plotRenderingInfo0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(4, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-8), rectangle0.width);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals((-8.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(4.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(4.0, rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      
      combinedRangeXYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(4, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-8), rectangle0.width);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.calculateAxisSpace(graphics2D0, rectangle0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(4, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-8), rectangle0.width);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setFixedRangeAxisSpace(axisSpace0, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(4, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-8), rectangle0.width);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      
      combinedRangeXYPlot0.setDomainAxis(2, (ValueAxis) cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabel());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNotNull(numberAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setMinorTickMarkOutsideLength(1693.1167F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot1.getDomainAxisLocation(500);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertFalse(boolean0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedRangeXYPlot1.configureRangeAxes();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(xYItemRendererState0);
      
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(entityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      point2D_Float0.x = (-617.3744F);
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals((-617.3744F), point2D_Float0.x, 0.01F);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNotNull(thermometerPlot0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot0.getRangeAxisLocation((-1));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(axisLocation2, axisLocation1);
      assertNotSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logarithmicAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertNull(range0);
      
      combinedRangeXYPlot0.zoomRangeAxes((double) 2, (double) 2, plotRenderingInfo1, (Point2D) point2D_Float0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals((-617.3744F), point2D_Float0.x, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(2.1, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.1, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isAutoRange());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabel());
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      xYPlot0.clearRangeAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYShapeRenderer0);
      
      Range range0 = xYShapeRenderer0.findRangeBounds((XYDataset) null);
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(range0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYShapeRenderer0.getGuideLineStroke();
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertNotNull(xYItemRendererState0);
      
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)xYItemRendererState0.getEntityCollection();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.zoomDomainAxes((double) 1.0F, 1439.825318235655, plotRenderingInfo1, (Point2D) point2D_Float0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(plotRenderingInfo0.equals((Object)plotRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(2, thermometerPlot0.getUnits());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertNotNull(thermometerPlot0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(axisLocation0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis((String) null, (Range) null);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertNull(moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(moduloAxis0);
      
      Range range1 = combinedDomainXYPlot0.getDataRange(moduloAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isInverted());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertNull(moduloAxis0.getLabel());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isAutoRange());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNotNull(numberAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setMinorTickMarkOutsideLength(1693.1167F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot1.getDomainAxisLocation(500);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertFalse(boolean0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedRangeXYPlot1.configureRangeAxes();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.setOutlineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setDomainMinorGridlinesVisible(false);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getQuadrantPaint((-1045));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (-1045) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      
      combinedDomainXYPlot0.clearSelection();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.panRangeAxes(Double.POSITIVE_INFINITY, plotRenderingInfo0, (Point2D) null);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNotNull(dateAxis0);
      
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, valueAxisArray0.length);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 226;
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(226, (Marker) valueMarker0, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(categoryPlot0.isRangeZoomable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertFalse(categoryPlot0.isDomainPannable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(categoryPlot0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(stackedBarRenderer0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.clearSelection();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueAxis0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToRangeAxes(226, (List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(226, (Marker) valueMarker0, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertTrue(categoryPlot0.isNotify());
      assertFalse(categoryPlot0.isDomainPannable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isSubplot());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertNotNull(categoryPlot0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertNotNull(stackedBarRenderer0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(dateAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedDomainXYPlot1);
      
      dateAxis0.setUpperBound(1.0F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      
      combinedDomainXYPlot1.clearSelection();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(valueAxis0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot1.getDatasetRenderingOrder();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertNull(dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseOutlinePaint();
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer1 = Layer.BACKGROUND;
      assertSame(layer1, layer0);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(layer1);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(layer1, layer0);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNull(collection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean1 = combinedDomainXYPlot1.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(boolean1);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      
      combinedDomainXYPlot1.addRangeMarker(1242, (Marker) categoryMarker0, layer0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(layer0, layer1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      
      Layer layer2 = Layer.FOREGROUND;
      assertNotSame(layer2, layer1);
      assertNotSame(layer2, layer0);
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(layer2.equals((Object)layer0));
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertNotNull(layer2);
      
      Collection collection1 = combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(layer2, layer1);
      assertNotSame(layer2, layer0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(layer2.equals((Object)layer0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertNull(collection1);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(1, int0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot2);
      
      combinedDomainXYPlot2.mapDatasetToRangeAxis(1417, 10);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset(xYIntervalSeriesCollection0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(xYItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint(systemColor0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      
      combinedDomainXYPlot0.setDomainGridlinePaint(systemColor0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getRed());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getGreen());
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertNotNull(chartPanel0);
      
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertNotNull(rectangle0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedDomainXYPlot0.createAndAddEntity(rectangle0, plotRenderingInfo0, "ZOOM_RANGE_BOTH", "ZOOM_IN_BOTH");
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getDomainAxisForDataset(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 1 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(numberAxis0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(defaultXYItemRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(xIntervalSeriesCollection0, numberAxis0, numberAxis0, defaultXYItemRenderer0);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertNotNull(xYPlot0);
      
      xYPlot0.setDomainCrosshairLockedOnData(true);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      
      xYPlot0.setRenderer(500, (XYItemRenderer) defaultXYItemRenderer0, false);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(501, xYPlot0.getRendererCount());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getDatasetCount());
      
      int int0 = 2439;
      int int1 = 9;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(10, 412, byteArray0, 1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle rectangle0 = new Rectangle(10, 10, (-1890), 1104);
      assertEquals((-1890), rectangle0.width);
      assertEquals(10, rectangle0.y);
      assertEquals(10, rectangle0.x);
      assertEquals(1104, rectangle0.height);
      assertEquals(562.0, rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1890.0), rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(1104.0, rectangle0.getHeight(), 0.01);
      assertEquals((-935.0), rectangle0.getCenterX(), 0.01);
      assertEquals(1114.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-1880.0), rectangle0.getMaxX(), 0.01);
      assertNotNull(rectangle0);
      
      plotRenderingInfo0.setPlotArea(rectangle0);
      assertEquals((-1890), rectangle0.width);
      assertEquals(10, rectangle0.y);
      assertEquals(10, rectangle0.x);
      assertEquals(1104, rectangle0.height);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(562.0, rectangle0.getCenterY(), 0.01);
      assertEquals(10.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1890.0), rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(1104.0, rectangle0.getHeight(), 0.01);
      assertEquals((-935.0), rectangle0.getCenterX(), 0.01);
      assertEquals(1114.0, rectangle0.getMaxY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(10.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-1880.0), rectangle0.getMaxX(), 0.01);
      
      xYPlot0.zoomDomainAxes(1458.0789402508, plotRenderingInfo0, (Point2D) null, true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      xYPlot0.clearRangeMarkers();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1890), 1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1890.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1890.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", decimalFormat0, simpleDateFormat0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertNotNull(standardXYToolTipGenerator0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1104, standardXYToolTipGenerator0);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertNotNull(cyclicXYItemRenderer0);
      
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertNotNull(stackedXYBarRenderer0);
      
      boolean boolean1 = cyclicXYItemRenderer0.hasListener(xYPlot0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(2432);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedXYAreaRenderer0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer(10);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertTrue(stackedXYAreaRenderer1.equals((Object)stackedXYAreaRenderer0));
      assertFalse(stackedXYAreaRenderer1.getPlotArea());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer1.getPassCount());
      assertFalse(stackedXYAreaRenderer1.getPlotLines());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(3, stackedXYAreaRenderer1.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer1.isOutline());
      assertTrue(stackedXYAreaRenderer1.getBaseCreateEntities());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer1.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertFalse(stackedXYAreaRenderer1.getPlotShapes());
      assertEquals(2.0, stackedXYAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(stackedXYAreaRenderer1);
      
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(9, xYItemRendererArray0.length);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(9, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearRangeAxes();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYShapeRenderer0);
      
      Range range0 = xYShapeRenderer0.findRangeBounds((XYDataset) null);
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(range0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYShapeRenderer0.getGuideLineStroke();
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      xYPlot0.setOutlineStroke(basicStroke0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisible());
      assertTrue(xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYShapeRenderer0.getDrawOutlines());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYShapeRenderer0.getBaseCreateEntities());
      assertTrue(xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertFalse(xYShapeRenderer0.getUseFillPaint());
      assertTrue(xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      xYPlot0.configureDomainAxes();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      xYPlot0.setDomainMinorGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.canSelectByPoint());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (85) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(2440);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setTickMarkInsideLength((-451.4175F));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      
      combinedDomainXYPlot0.setDomainAxis(2440, (ValueAxis) logarithmicAxis0, true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      byte[] byteArray0 = new byte[8];
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[2];
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(1, XYBubbleRenderer.SCALE_ON_DOMAIN_AXIS);
      assertEquals(2, XYBubbleRenderer.SCALE_ON_RANGE_AXIS);
      assertEquals(0, XYBubbleRenderer.SCALE_ON_BOTH_AXES);
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisible());
      assertTrue(xYBubbleRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertTrue(xYBubbleRenderer0.getBaseCreateEntities());
      assertTrue(xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBubbleRenderer0);
      
      xYItemRendererArray0[0] = (XYItemRenderer) xYBubbleRenderer0;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertTrue(xYStepAreaRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYStepAreaRenderer0.getBaseCreateEntities());
      assertNotNull(xYStepAreaRenderer0);
      
      xYItemRendererArray0[1] = (XYItemRenderer) xYStepAreaRenderer0;
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(2, xYItemRendererArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      byteArray0[1] = (byte) (-1);
      combinedDomainXYPlot0.clearSelection();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(2, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) (-1890));
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setRangeGridlinesVisible(true);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isAutoRange());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo((EntityCollection) null);
      assertFalse(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertNotNull(chartRenderingInfo1);
      
      ChartRenderingInfo chartRenderingInfo2 = new ChartRenderingInfo((EntityCollection) null);
      assertFalse(chartRenderingInfo2.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo2.equals((Object)chartRenderingInfo1));
      assertNotNull(chartRenderingInfo2);
      
      thermometerPlot0.setDataset(defaultValueDataset0);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      
      PlotRenderingInfo plotRenderingInfo1 = new PlotRenderingInfo(chartRenderingInfo2);
      assertFalse(chartRenderingInfo2.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo2.equals((Object)chartRenderingInfo1));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      combinedDomainXYPlot0.panRangeAxes(1, plotRenderingInfo1, (Point2D) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(chartRenderingInfo2, chartRenderingInfo0);
      assertNotSame(chartRenderingInfo2, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(chartRenderingInfo2.equals((Object)chartRenderingInfo0));
      assertTrue(chartRenderingInfo2.equals((Object)chartRenderingInfo1));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertNotNull(dateAxis0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, valueAxisArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      
      combinedDomainXYPlot0.setRangeCrosshairVisible(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, valueAxisArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNotNull(numberAxis0);
      
      numberAxis0.setMinorTickMarkOutsideLength((-216.18F));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getDomainAxisLocation(10);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker((-739), (Marker) categoryMarker0, layer0, false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation1, true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      Layer layer1 = Layer.BACKGROUND;
      assertSame(layer1, layer0);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(layer1);
      
      Collection collection0 = new ArrayDeque<DefaultKeyedValues2DDataset>();
      assertNotNull(collection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean1 = combinedDomainXYPlot1.isDomainGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(boolean1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(boolean1 == boolean0);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertNotNull(dateAxis0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      valueAxisArray0[0] = (ValueAxis) dateAxis0;
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      valueAxisArray0[2] = (ValueAxis) numberAxis0;
      valueAxisArray0[3] = (ValueAxis) numberAxis0;
      valueAxisArray0[4] = (ValueAxis) dateAxis0;
      valueAxisArray0[5] = (ValueAxis) numberAxis0;
      valueAxisArray0[6] = (ValueAxis) numberAxis0;
      valueAxisArray0[7] = (ValueAxis) dateAxis0;
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(8, valueAxisArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(8, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      combinedDomainXYPlot1.configureDomainAxes();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.removeAnnotations();
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      Color color0 = new Color(0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16777216), color0.getRGB());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainCrosshairVisible(false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNotNull(numberAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setMinorTickMarkOutsideLength(1693.1167F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot1.getDomainAxisLocation(500);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertFalse(boolean0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((-1066.85422436));
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals((-1066.85422436), candlestickRenderer0.getCandleWidth(), 0.01);
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator((-5272), 10, true);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals((-1066.85422436), candlestickRenderer0.getCandleWidth(), 0.01);
      assertNull(xYURLGenerator0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = StandardXYToolTipGenerator.getTimeSeriesInstance();
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertNotNull(standardXYToolTipGenerator0);
      
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("{0}: ({1}, {2})");
      assertNotNull(standardXYURLGenerator0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer((-947), standardXYToolTipGenerator0, (XYURLGenerator) null);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertNotNull(standardXYItemRenderer0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      NumberAxis numberAxis1 = new NumberAxis();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(numberAxis1.equals((Object)numberAxis0));
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis1.isNegativeArrowVisible());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, numberAxis1.getUpperBound(), 0.01);
      assertTrue(numberAxis1.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis1.isMinorTickMarksVisible());
      assertTrue(numberAxis1.isAxisLineVisible());
      assertTrue(numberAxis1.isAutoRange());
      assertTrue(numberAxis1.isTickLabelsVisible());
      assertFalse(numberAxis1.isVerticalTickLabels());
      assertNull(numberAxis1.getLabelURL());
      assertTrue(numberAxis1.isTickMarksVisible());
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis1.isVisible());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01);
      assertTrue(numberAxis1.isAutoTickUnitSelection());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertTrue(numberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis1.isPositiveArrowVisible());
      assertNull(numberAxis1.getLabel());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis1.isInverted());
      assertNotNull(numberAxis1);
      
      XYSeries xYSeries0 = new XYSeries(3, true, false);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 1113);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotNull(xYSeries1);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(100.0, 500, "index.html");
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("index.html", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(500.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(100.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      XYPlot xYPlot0 = new XYPlot(xYSeriesCollection0, numberAxis0, cyclicNumberAxis0, standardXYItemRenderer0);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(numberAxis0.equals((Object)numberAxis1));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("index.html", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(500.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-99.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(100.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertNotNull(xYPlot0);
      
      JFreeChart jFreeChart0 = new JFreeChart(xYPlot0);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(numberAxis0.equals((Object)numberAxis1));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("index.html", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(500.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-99.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(100.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      XYPlot xYPlot1 = jFreeChart0.getXYPlot();
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(numberAxis0, numberAxis1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertSame(xYPlot0, xYPlot1);
      assertSame(xYPlot1, xYPlot0);
      assertTrue(numberAxis0.equals((Object)numberAxis1));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("{0}: ({1}, {2})", standardXYToolTipGenerator0.getFormatString());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("index.html", cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(500.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-99.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(100.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(100.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangePannable());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(xYPlot1.isRangeZoomable());
      assertTrue(xYPlot1.canSelectByRegion());
      assertEquals(1, xYPlot1.getRangeAxisCount());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot1.getRendererCount());
      assertTrue(xYPlot1.isDomainZoomable());
      assertEquals(1, xYPlot1.getDomainAxisCount());
      assertFalse(xYPlot1.isDomainZeroBaselineVisible());
      assertFalse(xYPlot1.isDomainCrosshairVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot1.getNoDataMessage());
      assertFalse(xYPlot1.canSelectByPoint());
      assertFalse(xYPlot1.isRangeCrosshairVisible());
      assertFalse(xYPlot1.isDomainPannable());
      assertFalse(xYPlot1.isRangePannable());
      assertTrue(xYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot1.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot1.isNotify());
      assertFalse(xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getDatasetCount());
      assertFalse(xYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot1.isRangeGridlinesVisible());
      assertFalse(xYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot1.isOutlineVisible());
      assertFalse(xYPlot1.isSubplot());
      assertNotNull(xYPlot1);
      
      boolean boolean1 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseOutlinePaint();
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(color0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(dateAxis0.DEFAULT_DATE_TICK_UNIT, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_LABEL_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, 0.95F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.addRangeMarker(10, (Marker) categoryMarker0, layer0, true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      Layer layer1 = Layer.BACKGROUND;
      assertSame(layer1, layer0);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(layer1);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(layer1, layer0);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(collection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean1 = combinedDomainXYPlot1.isDomainGridlinesVisible();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      
      combinedDomainXYPlot1.addRangeMarker(1242, (Marker) categoryMarker0, layer0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(layer0, layer1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.95F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      
      Layer layer2 = Layer.FOREGROUND;
      assertNotSame(layer2, layer1);
      assertNotSame(layer2, layer0);
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(layer2.equals((Object)layer0));
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertNotNull(layer2);
      
      Collection collection1 = combinedDomainXYPlot1.getDomainMarkers(221, layer2);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(layer2, layer1);
      assertNotSame(layer2, layer0);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(layer2.equals((Object)layer1));
      assertFalse(layer2.equals((Object)layer0));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals("Layer.FOREGROUND", layer2.toString());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(collection1);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(1, int0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot2 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertNotNull(combinedDomainXYPlot2);
      
      combinedDomainXYPlot2.mapDatasetToRangeAxis(1417, 10);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      combinedDomainXYPlot0.setDomainCrosshairStroke(combinedDomainXYPlot2.DEFAULT_GRIDLINE_STROKE);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot2, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot2);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot2.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot2));
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot2.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot2.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot2.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot2.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot2.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot2.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getRangeAxisCount());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot2.getPlotType());
      assertTrue(combinedDomainXYPlot2.isOutlineVisible());
      assertFalse(combinedDomainXYPlot2.isSubplot());
      assertTrue(combinedDomainXYPlot2.canSelectByRegion());
      assertFalse(combinedDomainXYPlot2.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot2.isDomainZoomable());
      assertFalse(combinedDomainXYPlot2.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot2.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot2.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot2.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot2.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot2.getDatasetCount());
      assertFalse(combinedDomainXYPlot2.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot2.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot2.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot2.isRangePannable());
      assertTrue(combinedDomainXYPlot2.isRangeZoomable());
      assertFalse(combinedDomainXYPlot2.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot2.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot2.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot2.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot2.getRendererCount());
      assertTrue(combinedDomainXYPlot2.isNotify());
      assertTrue(combinedDomainXYPlot2.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot2.getWeight());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNotNull(numberAxis0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("++");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setMinorTickMarkOutsideLength(1693.1167F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(logarithmicAxis0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertNotNull(combinedRangeXYPlot1);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(combinedRangeXYPlot1.DEFAULT_GRIDLINE_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedRangeXYPlot1.setOrientation(plotOrientation0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot1.getDomainAxisLocation(500);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertFalse(boolean0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertTrue(numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      
      combinedRangeXYPlot1.configureRangeAxes();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo((ChartRenderingInfo) null);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(xYItemRendererState0);
      
      EntityCollection entityCollection0 = xYItemRendererState0.getEntityCollection();
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(entityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo0.getPlotInfo();
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      combinedDomainXYPlot0.zoomDomainAxes(3.141592653589793, 1585.5301787, plotRenderingInfo1, (Point2D) point2D_Float0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(5, thermometerPlot0.getGap());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertNotNull(thermometerPlot0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      AxisLocation axisLocation2 = combinedDomainXYPlot0.getRangeAxisLocation((-1));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation2, axisLocation0);
      assertSame(axisLocation2, axisLocation1);
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      Range range0 = combinedDomainXYPlot0.getDataRange(logarithmicAxis0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("++", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1693.1167F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      xYPlot0.configureDomainAxes();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      
      xYPlot0.setDomainMinorGridlinesVisible(true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (85) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertNotNull(numberAxis0);
      
      numberAxis0.setMinorTickMarkOutsideLength((-216.18F));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNotNull(combinedRangeXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToRangeAxis((-1039), 1127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNotNull(numberAxis0);
      
      numberAxis0.setMinorTickMarkOutsideLength((-216.18F));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getDomainAxisLocation(10);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker((-739), (Marker) categoryMarker0, layer0, false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertNotNull(deviationRenderer0);
      
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      assertNotNull(standardXYZURLGenerator0);
      
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2((XYToolTipGenerator) null, standardXYZURLGenerator0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertNotNull(xYAreaRenderer2_0);
      
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertTrue(xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYDotRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYDotRenderer0.getBaseSeriesVisible());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getBaseCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer0);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(defaultXYItemRenderer0);
      
      deviationRenderer0.setBaseLinesVisible(false);
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(deviationRenderer0.getBaseLinesVisible());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(10);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedXYAreaRenderer0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer(1038);
      assertEquals(4, XYAreaRenderer.AREA);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertTrue(stackedXYAreaRenderer1.equals((Object)stackedXYAreaRenderer0));
      assertFalse(stackedXYAreaRenderer1.isOutline());
      assertTrue(stackedXYAreaRenderer1.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertFalse(stackedXYAreaRenderer1.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer1.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer1.getPlotArea());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesStroke());
      assertFalse(stackedXYAreaRenderer1.getPlotLines());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesShape());
      assertEquals(2, stackedXYAreaRenderer1.getPassCount());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYAreaRenderer1.getDefaultEntityRadius());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer1.getPlotShapes());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesPaint());
      assertNotNull(stackedXYAreaRenderer1);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[7];
      xYItemRendererArray0[0] = (XYItemRenderer) xYDotRenderer0;
      xYItemRendererArray0[1] = (XYItemRenderer) xYDotRenderer0;
      xYItemRendererArray0[2] = (XYItemRenderer) stackedXYAreaRenderer1;
      xYItemRendererArray0[3] = (XYItemRenderer) deviationRenderer0;
      xYItemRendererArray0[4] = (XYItemRenderer) stackedXYAreaRenderer1;
      xYItemRendererArray0[5] = (XYItemRenderer) stackedXYAreaRenderer1;
      xYItemRendererArray0[6] = (XYItemRenderer) stackedXYAreaRenderer0;
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(7, xYItemRendererArray0.length);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(7, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      
      combinedRangeXYPlot0.clearDomainAxes();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabel());
      assertTrue(numberAxis0.isVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(7, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabel());
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertNotNull(graphics2D0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(generalPath0);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(8, rectangle0.height);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.width);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(rectangle0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(xYErrorRenderer0);
      
      Stroke stroke0 = xYErrorRenderer0.getErrorStroke();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(stroke0);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(8, rectangle0.height);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(8, rectangle0.width);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getRed());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      generalPath0.moveTo(0.05, 0.0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertNotNull(affineTransform0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(chartPanel0);
      
      Point point0 = chartPanel0.getLocation();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(point0);
      
      Point point1 = (Point)affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(point1);
      
      PlotState plotState0 = new PlotState();
      assertNotNull(plotState0);
      
      affineTransform0.setToRotation(0.0, (double) 0);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(-0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedRangeXYPlot0.draw(graphics2D0, rectangle0, point1, plotState0, plotRenderingInfo0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(4, rectangle0.x);
      assertEquals((-8), rectangle0.width);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals((-8.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle0.getMinX(), 0.01);
      assertEquals(4.0, rectangle0.getX(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(-0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertEquals(750, chartPanel0.getInitialDelay());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.isDomainZoomable());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      LinkedList<Size2D> linkedList0 = new LinkedList<Size2D>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.mapDatasetToDomainAxes(680, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty list not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertNull(periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAutoRange());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setTickMarkInsideLength(1.0F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(1.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(logarithmicAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(1.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoRange());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabel());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertNull(logAxis0.getLabelToolTip());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertNotNull(logAxis0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.setDomainAxis((-1745), (ValueAxis) logAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      combinedRangeXYPlot0.setRangeAxis(1131, (ValueAxis) cyclicNumberAxis0, false);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(valueAxis0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      BasicStroke basicStroke1 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke1);
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertNotNull(xYItemRendererState0);
      
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)xYItemRendererState0.getEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertNotNull(plotRenderingInfo1);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      String string0 = combinedRangeXYPlot0.getPlotType();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals("Combined Range XYPlot", string0);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      assertEquals(0, floatArray0.length);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, renderingHints0.size());
      assertFalse(renderingHints0.isEmpty());
      assertEquals(0, rescaleOp0.getNumFactors());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(rescaleOp0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1118, 30, (double) 1118, 0.14, chartRenderingInfo0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertFalse(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(30, bufferedImage0.getTileHeight());
      assertEquals(1118, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(30, bufferedImage0.getHeight());
      assertEquals(1118, bufferedImage0.getWidth());
      assertNotNull(bufferedImage0);
      
      // Undeclared exception!
      try { 
        rescaleOp0.filter(bufferedImage0, bufferedImage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of scaling constants does not equal the number of of color or color/alpha  components
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Rectangle rectangle0 = new Rectangle(10, 10, (-1890), 1104);
      assertEquals((-1890), rectangle0.width);
      assertEquals(10, rectangle0.y);
      assertEquals(10, rectangle0.x);
      assertEquals(1104, rectangle0.height);
      assertEquals((-935.0), rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1890.0), rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(1104.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-1880.0), rectangle0.getMaxX(), 0.01);
      assertEquals(1114.0, rectangle0.getMaxY(), 0.01);
      assertEquals(562.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      
      plotRenderingInfo0.setPlotArea(rectangle0);
      assertEquals((-1890), rectangle0.width);
      assertEquals(10, rectangle0.y);
      assertEquals(10, rectangle0.x);
      assertEquals(1104, rectangle0.height);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals((-935.0), rectangle0.getCenterX(), 0.01);
      assertEquals(10.0, rectangle0.getY(), 0.01);
      assertEquals(10.0, rectangle0.getMinY(), 0.01);
      assertEquals((-1890.0), rectangle0.getWidth(), 0.01);
      assertEquals(10.0, rectangle0.getMinX(), 0.01);
      assertEquals(1104.0, rectangle0.getHeight(), 0.01);
      assertEquals(10.0, rectangle0.getX(), 0.01);
      assertEquals((-1880.0), rectangle0.getMaxX(), 0.01);
      assertEquals(1114.0, rectangle0.getMaxY(), 0.01);
      assertEquals(562.0, rectangle0.getCenterY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      
      xYPlot0.zoomDomainAxes(1458.0789402508, plotRenderingInfo0, (Point2D) null, true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      xYPlot0.clearRangeMarkers();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1890), 1.0F, xYPlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1890.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeRangeMarker(10, (Marker) intervalMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1890.0), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[9];
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNotNull(simpleDateFormat0);
      
      StandardXYToolTipGenerator standardXYToolTipGenerator0 = new StandardXYToolTipGenerator("", decimalFormat0, simpleDateFormat0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertNotNull(standardXYToolTipGenerator0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(1104, standardXYToolTipGenerator0);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertFalse(cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertTrue(cyclicXYItemRenderer0.getBaseShapesFilled());
      assertFalse(cyclicXYItemRenderer0.getPlotLines());
      assertFalse(cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(cyclicXYItemRenderer0.getBaseCreateEntities());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(cyclicXYItemRenderer0.getPlotImages());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(cyclicXYItemRenderer0);
      
      xYItemRendererArray0[0] = (XYItemRenderer) cyclicXYItemRenderer0;
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer(0.0);
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01);
      assertEquals(4.0, stackedXYBarRenderer0.getShadowYOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01);
      assertFalse(stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(stackedXYBarRenderer0.getRenderAsPercentages());
      assertTrue(stackedXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYBarRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.getUseYInterval());
      assertTrue(stackedXYBarRenderer0.getShadowsVisible());
      assertEquals(4.0, stackedXYBarRenderer0.getShadowXOffset(), 0.01);
      assertFalse(stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedXYBarRenderer0.getPassCount());
      assertTrue(stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals((-1.0), stackedXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertNotNull(stackedXYBarRenderer0);
      
      xYItemRendererArray0[1] = (XYItemRenderer) stackedXYBarRenderer0;
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertEquals(2, XYStepAreaRenderer.AREA);
      assertEquals(1, XYStepAreaRenderer.SHAPES);
      assertEquals(3, XYStepAreaRenderer.AREA_AND_SHAPES);
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYStepAreaRenderer0.getPlotArea());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYStepAreaRenderer0.getShapesVisible());
      assertTrue(xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYStepAreaRenderer0.isOutline());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertFalse(xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYStepAreaRenderer0.getBaseSeriesVisible());
      assertTrue(xYStepAreaRenderer0.getBaseCreateEntities());
      assertTrue(xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYStepAreaRenderer0.isShapesFilled());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01);
      assertNotNull(xYStepAreaRenderer0);
      
      xYItemRendererArray0[2] = (XYItemRenderer) xYStepAreaRenderer0;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertTrue(deviationRenderer0.getAutoPopulateSeriesShape());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(deviationRenderer0.getUseFillPaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertFalse(deviationRenderer0.getUseOutlinePaint());
      assertTrue(deviationRenderer0.getDrawSeriesLineAsPath());
      assertTrue(deviationRenderer0.getBaseSeriesVisible());
      assertTrue(deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(deviationRenderer0.getBaseShapesFilled());
      assertTrue(deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertTrue(deviationRenderer0.getBaseCreateEntities());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(deviationRenderer0.getDrawOutlines());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(deviationRenderer0.getBaseItemLabelsVisible());
      assertTrue(deviationRenderer0.getBaseShapesVisible());
      assertTrue(deviationRenderer0.getBaseLinesVisible());
      assertNotNull(deviationRenderer0);
      
      xYItemRendererArray0[3] = (XYItemRenderer) deviationRenderer0;
      StandardXYZURLGenerator standardXYZURLGenerator0 = new StandardXYZURLGenerator();
      assertNotNull(standardXYZURLGenerator0);
      
      XYAreaRenderer2 xYAreaRenderer2_0 = new XYAreaRenderer2(standardXYToolTipGenerator0, standardXYZURLGenerator0);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertTrue(xYAreaRenderer2_0.getBaseCreateEntities());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYAreaRenderer2_0.getDefaultEntityRadius());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYAreaRenderer2_0.getBaseSeriesVisible());
      assertTrue(xYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYAreaRenderer2_0.getPassCount());
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertFalse(xYAreaRenderer2_0.isOutline());
      assertFalse(xYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("null", standardXYToolTipGenerator0.getNullYString());
      assertEquals("", standardXYToolTipGenerator0.getFormatString());
      assertNotNull(xYAreaRenderer2_0);
      
      xYItemRendererArray0[4] = (XYItemRenderer) xYAreaRenderer2_0;
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertTrue(xYDotRenderer0.getBaseCreateEntities());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertTrue(xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertTrue(xYDotRenderer0.getBaseSeriesVisible());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYDotRenderer0.getBaseItemLabelsVisible());
      assertFalse(xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertNotNull(xYDotRenderer0);
      
      xYItemRendererArray0[5] = (XYItemRenderer) xYDotRenderer0;
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(defaultXYItemRenderer0.getUseFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultXYItemRenderer0.getUseOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseShapesFilled());
      assertFalse(defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertTrue(defaultXYItemRenderer0.getDrawOutlines());
      assertTrue(defaultXYItemRenderer0.getBaseShapesVisible());
      assertTrue(defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(defaultXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultXYItemRenderer0.getBaseCreateEntities());
      assertNotNull(defaultXYItemRenderer0);
      
      xYItemRendererArray0[6] = (XYItemRenderer) defaultXYItemRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer((-2532));
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertFalse(stackedXYAreaRenderer0.getPlotArea());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertFalse(stackedXYAreaRenderer0.getPlotLines());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(stackedXYAreaRenderer0.getUseFillPaint());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer0.isOutline());
      assertTrue(stackedXYAreaRenderer0.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer0.getPlotShapes());
      assertTrue(stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertNotNull(stackedXYAreaRenderer0);
      
      xYItemRendererArray0[7] = (XYItemRenderer) stackedXYAreaRenderer0;
      StackedXYAreaRenderer stackedXYAreaRenderer1 = new StackedXYAreaRenderer(1119);
      assertEquals(3, XYAreaRenderer.SHAPES_AND_LINES);
      assertEquals(5, XYAreaRenderer.AREA_AND_SHAPES);
      assertEquals(2, XYAreaRenderer.LINES);
      assertEquals(1, XYAreaRenderer.SHAPES);
      assertEquals(4, XYAreaRenderer.AREA);
      assertTrue(stackedXYAreaRenderer1.equals((Object)stackedXYAreaRenderer0));
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesPaint());
      assertFalse(stackedXYAreaRenderer1.getPlotShapes());
      assertTrue(stackedXYAreaRenderer1.getBaseCreateEntities());
      assertFalse(stackedXYAreaRenderer1.getUseFillPaint());
      assertEquals(2.0, stackedXYAreaRenderer1.getItemLabelAnchorOffset(), 0.01);
      assertFalse(stackedXYAreaRenderer1.getPlotLines());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesShape());
      assertEquals(2, stackedXYAreaRenderer1.getPassCount());
      assertFalse(stackedXYAreaRenderer1.getBaseItemLabelsVisible());
      assertFalse(stackedXYAreaRenderer1.getPlotArea());
      assertEquals(3, stackedXYAreaRenderer1.getDefaultEntityRadius());
      assertFalse(stackedXYAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertTrue(stackedXYAreaRenderer1.getAutoPopulateSeriesStroke());
      assertTrue(stackedXYAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedXYAreaRenderer1.getBaseSeriesVisible());
      assertFalse(stackedXYAreaRenderer1.isOutline());
      assertNotNull(stackedXYAreaRenderer1);
      
      xYItemRendererArray0[8] = (XYItemRenderer) stackedXYAreaRenderer1;
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(9, xYItemRendererArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(9, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isNotify());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 0.0);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      combinedRangeXYPlot0.setRangeAxis(1131, (ValueAxis) cyclicNumberAxis0, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(valueAxis0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(valueAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(2830);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(2830, axisLocation0, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.FORWARD;
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("DatasetRenderingOrder.FORWARD", datasetRenderingOrder0.toString());
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      combinedRangeCategoryPlot0.setRenderer(500, (CategoryItemRenderer) statisticalLineAndShapeRenderer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(501, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertTrue(statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertFalse(statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertFalse(statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      
      BasicStroke basicStroke1 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(basicStroke1, basicStroke0);
      assertFalse(basicStroke1.equals((Object)basicStroke0));
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertNotNull(basicStroke1);
      
      combinedRangeXYPlot0.setRangeAxisLocation(500, axisLocation0, true);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(501, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(10.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(10.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      XYItemRendererState xYItemRendererState0 = new XYItemRendererState(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertNotNull(xYItemRendererState0);
      
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)xYItemRendererState0.getEntityCollection();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo1 = new ChartRenderingInfo(standardEntityCollection0);
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo1);
      
      PlotRenderingInfo plotRenderingInfo1 = chartRenderingInfo1.getPlotInfo();
      assertNotSame(chartRenderingInfo0, chartRenderingInfo1);
      assertNotSame(plotRenderingInfo0, plotRenderingInfo1);
      assertNotSame(chartRenderingInfo1, chartRenderingInfo0);
      assertNotSame(plotRenderingInfo1, plotRenderingInfo0);
      assertTrue(chartRenderingInfo0.equals((Object)chartRenderingInfo1));
      assertTrue(chartRenderingInfo1.equals((Object)chartRenderingInfo0));
      assertTrue(plotRenderingInfo1.equals((Object)plotRenderingInfo0));
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertTrue(xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo1.getSubplotCount());
      assertNotNull(plotRenderingInfo1);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, (-117), 15, 10, 10, 2830, true, true, false, false, true, false, true);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2830, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertNotNull(chartPanel0);
      
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(chartPanel0, 680, 768, (-1857), (-1), 2930, 2749, 1984, 680, true, 1, 300, (-117));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2830, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals((-2147483585), mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getX());
      assertEquals(768L, mouseWheelEvent0.getWhen());
      assertEquals(2749, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(1, mouseWheelEvent0.getScrollType());
      assertEquals(680, mouseWheelEvent0.getClickCount());
      assertEquals((-117), mouseWheelEvent0.getWheelRotation());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-35100), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(1984, mouseWheelEvent0.getYOnScreen());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(300, mouseWheelEvent0.getScrollAmount());
      assertEquals(680, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(2930, mouseWheelEvent0.getY());
      assertNotNull(mouseWheelEvent0);
      
      Point point0 = chartPanel0.getToolTipLocation(mouseWheelEvent0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1132, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertEquals(10, chartPanel0.getMaximumDrawWidth());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.isRangeZoomable());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertEquals(10, chartPanel0.getMinimumDrawHeight());
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertEquals(2830, chartPanel0.getMaximumDrawHeight());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals((-2147483585), mouseWheelEvent0.getModifiers());
      assertEquals((-1), mouseWheelEvent0.getX());
      assertEquals(768L, mouseWheelEvent0.getWhen());
      assertEquals(2749, mouseWheelEvent0.getXOnScreen());
      assertTrue(mouseWheelEvent0.isMetaDown());
      assertEquals(1, mouseWheelEvent0.getScrollType());
      assertEquals(680, mouseWheelEvent0.getClickCount());
      assertEquals((-117), mouseWheelEvent0.getWheelRotation());
      assertTrue(mouseWheelEvent0.isShiftDown());
      assertTrue(mouseWheelEvent0.isAltGraphDown());
      assertEquals((-35100), mouseWheelEvent0.getUnitsToScroll());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertFalse(mouseWheelEvent0.isConsumed());
      assertEquals(1984, mouseWheelEvent0.getYOnScreen());
      assertTrue(mouseWheelEvent0.isControlDown());
      assertTrue(mouseWheelEvent0.isPopupTrigger());
      assertEquals(300, mouseWheelEvent0.getScrollAmount());
      assertEquals(680, mouseWheelEvent0.getID());
      assertTrue(mouseWheelEvent0.isAltDown());
      assertEquals(2930, mouseWheelEvent0.getY());
      assertNull(point0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.zoomDomainAxes((double) 10, (-679.0), plotRenderingInfo1, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedRangeXYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.removeRangeMarker((Marker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      boolean boolean2 = combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(color1, color0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getRed());
      assertNotNull(color1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 50.0;
      doubleArray0[2] = (double) 10;
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0, 1.0);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      combinedDomainXYPlot0.addRangeMarker((-1492), (Marker) intervalMarker0, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      Collection collection1 = combinedDomainXYPlot0.getDomainMarkers(2427, layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection1);
      
      int int1 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedDomainXYPlot0.mapDatasetToRangeAxis(1, (-275));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      XYPlot xYPlot0 = new XYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.canSelectByPoint());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((-1518.2926565), (-2432.0));
      assertEquals((-1518.2926565), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-2432.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      boolean boolean0 = combinedDomainXYPlot1.removeDomainMarker((Marker) intervalMarker0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(boolean0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals((-1518.2926565), intervalMarker0.getStartValue(), 0.01);
      assertNull(intervalMarker0.getLabel());
      assertEquals((-2432.0), intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(2440);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setTickMarkInsideLength((-451.4175F));
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      
      combinedDomainXYPlot0.setDomainAxis(2440, (ValueAxis) logarithmicAxis0, false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(0, axisLocation0, false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(logarithmicAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(color1, color0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, color1.getTransparency());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getGreen());
      assertNotNull(color1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) 1.0F;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertNotNull(defaultTreeCellRenderer0);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)defaultTreeCellRenderer0.getBorderSelectionColor();
      assertEquals((-10255681), colorUIResource0.getRGB());
      assertEquals(130, colorUIResource0.getGreen());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(99, colorUIResource0.getRed());
      assertEquals(191, colorUIResource0.getBlue());
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertNotNull(colorUIResource0);
      
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, color0, colorUIResource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'polygon' array must contain an even number of items.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNotNull(logarithmicAxis0);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) logarithmicAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals("", logarithmicAxis0.getLabel());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertFalse(logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 10 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.removeAnnotations();
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, int0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean2 = combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      candlestickRenderer0.setUseOutlinePaint(false);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRangeGridlinePaint(candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(categoryMarker0);
      
      categoryMarker0.setLabel("");
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNotNull(thermometerPlot0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNull(axisSpace0);
      
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, (Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:null
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis0);
      
      numberAxis0.setMinorTickMarkOutsideLength((-216.18F));
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getDomainAxisLocation(10);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(true, combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT, combinedRangeXYPlot0.DEFAULT_GRIDLINE_STROKE, combinedRangeXYPlot0.DEFAULT_BACKGROUND_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE, 0.0F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addRangeMarker((-739), (Marker) categoryMarker0, layer0, false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation1, true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      Layer layer1 = Layer.BACKGROUND;
      assertSame(layer1, layer0);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNotNull(layer1);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(500, layer1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(layer1, layer0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNull(collection0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot1);
      
      boolean boolean1 = combinedDomainXYPlot1.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(boolean1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(boolean1 == boolean0);
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      
      combinedDomainXYPlot0.addRangeMarker(959, (Marker) categoryMarker0, layer1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertSame(layer1, layer0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isInverted());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer1.toString());
      
      Collection collection1 = combinedDomainXYPlot0.getDomainMarkers(468, layer1);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertSame(layer1, layer0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Layer.BACKGROUND", layer1.toString());
      assertNull(collection1);
      
      int int0 = combinedDomainXYPlot1.getDomainAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertEquals(1, int0);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      
      combinedDomainXYPlot0.mapDatasetToRangeAxis(10, 10);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.removeAnnotations();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      
      NumberAxis numberAxis0 = new NumberAxis();
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(numberAxis0);
      
      numberAxis0.setPositiveArrowVisible(false);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      
      SystemColor systemColor0 = SystemColor.window;
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getRed());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(2.0F, 630.7, candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale0);
      
      LookupPaintScale lookupPaintScale1 = (LookupPaintScale)lookupPaintScale0.clone();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNotSame(lookupPaintScale1, lookupPaintScale0);
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertTrue(lookupPaintScale1.equals((Object)lookupPaintScale0));
      assertEquals(630.7, lookupPaintScale1.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale1.getLowerBound(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(lookupPaintScale1);
      
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, numberAxis0);
      assertTrue(paintScaleLegend0.visible);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertEquals(15.0, paintScaleLegend0.getStripWidth(), 0.01);
      assertTrue(paintScaleLegend0.getNotify());
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getAxisOffset(), 0.01);
      assertTrue(paintScaleLegend0.isStripOutlineVisible());
      assertEquals(1.0, paintScaleLegend0.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend0.getID());
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend0.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend0.isVisible());
      assertEquals(100, paintScaleLegend0.getSubdivisionCount());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScaleLegend0);
      
      PaintScaleLegend paintScaleLegend1 = new PaintScaleLegend(lookupPaintScale0, numberAxis0);
      assertTrue(paintScaleLegend1.visible);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertEquals(0.0, paintScaleLegend1.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend1.isVisible());
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(1.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend1.getID());
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(paintScaleLegend1);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)paintScaleLegend1.getBounds();
      assertTrue(paintScaleLegend1.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertEquals(0.0, paintScaleLegend1.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend1.isVisible());
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(1.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend1.getID());
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      assertNotNull(rectangle2D_Float0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertNotNull(numberAxis3D0);
      
      double double0 = numberAxis3D0.valueToJava2D(10, rectangle2D_Float0, rectangleEdge0);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(paintScaleLegend1.visible);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertNotSame(paintScaleLegend1, paintScaleLegend0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(lookupPaintScale0, lookupPaintScale1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(paintScaleLegend1.equals((Object)paintScaleLegend0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertTrue(lookupPaintScale0.equals((Object)lookupPaintScale1));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, paintScaleLegend1.getAxisOffset(), 0.01);
      assertEquals(100, paintScaleLegend1.getSubdivisionCount());
      assertEquals(0.0, paintScaleLegend1.getWidth(), 0.01);
      assertEquals(1.0, paintScaleLegend1.getContentXOffset(), 0.01);
      assertTrue(paintScaleLegend1.isVisible());
      assertTrue(paintScaleLegend1.getNotify());
      assertEquals(1.0, paintScaleLegend1.getContentYOffset(), 0.01);
      assertNull(paintScaleLegend1.getID());
      assertEquals(15.0, paintScaleLegend1.getStripWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend1.getHeight(), 0.01);
      assertTrue(paintScaleLegend1.isStripOutlineVisible());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabel());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNull(numberAxis0.getLabelURL());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(630.7, lookupPaintScale0.getUpperBound(), 0.01);
      assertEquals(2.0, lookupPaintScale0.getLowerBound(), 0.01);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot1);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getRed());
      assertNotNull(color0);
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertSame(color1, color0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals((-1), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getGreen());
      assertNotNull(color1);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabel());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker(1.0F);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxis();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      
      DateAxis dateAxis0 = new DateAxis();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(dateAxis0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot1);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainXYPlot0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2, 10, chartRenderingInfo0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(graphics2D0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot1.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertTrue(dateAxis0.isVisible());
      assertNull(dateAxis0.getLabelURL());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot1.isNotify());
      assertFalse(combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainPannable());
      assertFalse(combinedRangeXYPlot1.canSelectByPoint());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertFalse(combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot1.getDatasetCount());
      assertTrue(combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot1.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot1.canSelectByRegion());
      assertTrue(combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot1.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot1.getRendererCount());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertTrue(combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot1.isOutlineVisible());
      assertTrue(combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertNotNull(rectangle0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertNotNull(xYErrorRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      double double0 = 360.0;
      JTable jTable0 = new JTable(15, 10);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNotNull(jTable0);
      
      Component component0 = jTable0.getEditorComponent();
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertNull(component0);
      
      try { 
        JColorChooser.showDialog((Component) null, "A+OY8yEQn", systemColor0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.addDomainMarker((Marker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(2440);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis("", periodAxis0.DEFAULT_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNotNull(moduloAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(moduloAxis0);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(periodAxis0.isInverted());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals("", periodAxis0.getLabel());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isAutoTickUnitSelection());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01);
      assertFalse(moduloAxis0.isInverted());
      assertEquals("", moduloAxis0.getLabel());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01);
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01);
      assertTrue(moduloAxis0.getAutoRangeStickyZero());
      assertTrue(moduloAxis0.isAutoRange());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(moduloAxis0.isNegativeArrowVisible());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01);
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isPositiveArrowVisible());
      assertFalse(moduloAxis0.isVerticalTickLabels());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation2, axisLocation1);
      assertNotSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation2.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertSame(axisLocation1, axisLocation2);
      assertFalse(axisLocation0.equals((Object)axisLocation2));
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(847.5292682518, 54.76900196514, "");
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(54.76900196514, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(847.5292682518, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(847.5292682518, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(54.76900196514, cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(847.5292682518, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(847.5292682518, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertFalse(numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      JFreeChart jFreeChart0 = new JFreeChart(thermometerPlot0);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1), 1582, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1) and height (1582) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      PeriodAxis periodAxis0 = new PeriodAxis("RangeType.FULL");
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertNotNull(periodAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(periodAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      AxisLocation axisLocation3 = AxisLocation.getOpposite(axisLocation2);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertNotSame(axisLocation2, axisLocation3);
      assertSame(axisLocation3, axisLocation1);
      assertNotSame(axisLocation3, axisLocation0);
      assertNotSame(axisLocation3, axisLocation2);
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertFalse(axisLocation3.equals((Object)axisLocation0));
      assertFalse(axisLocation3.equals((Object)axisLocation2));
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation3.toString());
      assertNotNull(axisLocation3);
      
      AxisLocation axisLocation4 = AxisLocation.BOTTOM_OR_LEFT;
      assertNotSame(axisLocation4, axisLocation3);
      assertNotSame(axisLocation4, axisLocation1);
      assertSame(axisLocation4, axisLocation2);
      assertSame(axisLocation4, axisLocation0);
      assertFalse(axisLocation4.equals((Object)axisLocation3));
      assertFalse(axisLocation4.equals((Object)axisLocation1));
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation4.toString());
      assertNotNull(axisLocation4);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation4, true);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation4, axisLocation3);
      assertNotSame(axisLocation4, axisLocation1);
      assertSame(axisLocation4, axisLocation2);
      assertSame(axisLocation4, axisLocation0);
      assertFalse(axisLocation4.equals((Object)axisLocation3));
      assertFalse(axisLocation4.equals((Object)axisLocation1));
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation4.toString());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, 1.0E-8, "?");
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals("?", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      cyclicNumberAxis0.setPositiveArrowVisible(false);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals("?", cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(true);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0, periodAxis0.getUpperBound(), 0.01);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertEquals("RangeType.FULL", periodAxis0.getLabel());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      int int0 = 3977;
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 3977, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateAxis dateAxis0 = new DateAxis((String) null, zoneInfo0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertNotNull(dateAxis0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(2.0F);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator(66, 400, false);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertNull(xYURLGenerator0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(2301, highLowItemLabelGenerator0, (XYURLGenerator) null);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(standardXYItemRenderer0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYTaskDataset0, 2.0E7);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(2.0E7, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      XYPlot xYPlot0 = null;
      try {
        xYPlot0 = new XYPlot(xYBarDataset0, cyclicNumberAxis0, cyclicNumberAxis0, (XYItemRenderer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.removeAnnotations();
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      boolean boolean2 = combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      combinedDomainXYPlot0.setDomainGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      
      candlestickRenderer0.setUseOutlinePaint(false);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      combinedDomainXYPlot0.setRangeGridlinePaint(candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertNull(categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertNotNull(categoryMarker0);
      
      categoryMarker0.setLabel("");
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals("", categoryMarker0.getLabel());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(color1, color0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals((-16776961), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertNotNull(color1);
      
      Color color2 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(color2, color1);
      assertSame(color2, color0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(255, color2.getAlpha());
      assertEquals(1, color2.getTransparency());
      assertEquals(0, color2.getGreen());
      assertEquals(255, color2.getBlue());
      assertEquals((-16776961), color2.getRGB());
      assertEquals(0, color2.getRed());
      assertNotNull(color2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 50.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (-6245.73691);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1.0F;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, color1, candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals((-16776961), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertArrayEquals(new double[] {50.0, 1.0, 10.0, (-6245.73691), 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      
      boolean boolean3 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertSame(color1, color0);
      assertSame(color1, color2);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNull(xYPolygonAnnotation0.getURL());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertEquals(255, color1.getAlpha());
      assertEquals(255, color1.getBlue());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getGreen());
      assertEquals((-16776961), color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertArrayEquals(new double[] {50.0, 1.0, 10.0, (-6245.73691), 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNotNull(cyclicNumberAxis0);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(defaultPolarItemRenderer0);
      
      PolarPlot polarPlot0 = new PolarPlot(defaultXYZDataset0, cyclicNumberAxis0, defaultPolarItemRenderer0);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1.05, polarPlot0.getMaxRadius(), 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRangeZoomable());
      assertNotNull(polarPlot0);
      
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1.05, polarPlot0.getMaxRadius(), 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(45.0, PolarPlot.DEFAULT_ANGLE_TICK_UNIT_SIZE, 0.01);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertTrue(defaultPolarItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultPolarItemRenderer0.getDefaultEntityRadius());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(defaultPolarItemRenderer0.getBaseCreateEntities());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertFalse(defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(polarPlot0.isDomainZoomable());
      assertEquals(1.05, polarPlot0.getMaxRadius(), 0.01);
      assertTrue(polarPlot0.isAngleLabelsVisible());
      assertTrue(polarPlot0.isAngleGridlinesVisible());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(polarPlot0.isRadiusGridlinesVisible());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertTrue(polarPlot0.isOutlineVisible());
      assertTrue(polarPlot0.isNotify());
      assertNull(polarPlot0.getNoDataMessage());
      assertFalse(polarPlot0.isSubplot());
      assertTrue(polarPlot0.isRangeZoomable());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(2568);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2568, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, false);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedDomainXYPlot0.clearSelection();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabelURL());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertNotNull(graphics2D0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(generalPath0);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals((-4), rectangle0.y);
      assertEquals((-4), rectangle0.x);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(rectangle0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(xYErrorRenderer0);
      
      Stroke stroke0 = xYErrorRenderer0.getErrorStroke();
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNull(stroke0);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals((-4), rectangle0.y);
      assertEquals((-4), rectangle0.x);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(0, systemColor0.getGreen());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(112);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertNotNull(affineTransform0);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(chartPanel0);
      
      Point point0 = chartPanel0.getLocation();
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(point0);
      
      Point point1 = (Point)affineTransform0.inverseTransform((Point2D) point0, (Point2D) point0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(point1);
      
      PlotState plotState0 = new PlotState();
      assertNotNull(plotState0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      combinedRangeXYPlot0.draw(graphics2D0, rectangle0, point1, plotState0, plotRenderingInfo0);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(4, rectangle0.x);
      assertEquals((-8), rectangle0.width);
      assertEquals(420, ChartPanel.DEFAULT_HEIGHT);
      assertTrue(ChartPanel.DEFAULT_BUFFER_USED);
      assertEquals(1024, ChartPanel.DEFAULT_MAXIMUM_DRAW_WIDTH);
      assertEquals(768, ChartPanel.DEFAULT_MAXIMUM_DRAW_HEIGHT);
      assertEquals(300, ChartPanel.DEFAULT_MINIMUM_DRAW_WIDTH);
      assertEquals(200, ChartPanel.DEFAULT_MINIMUM_DRAW_HEIGHT);
      assertEquals(10, ChartPanel.DEFAULT_ZOOM_TRIGGER_DISTANCE);
      assertEquals(680, ChartPanel.DEFAULT_WIDTH);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point1.x);
      assertEquals(0, point1.y);
      assertSame(point0, point1);
      assertSame(point1, point0);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals((-4.0), rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01);
      assertEquals(4.0, rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals((-8.0), rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getY(), 0.01);
      assertEquals(4.0, rectangle0.getX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertFalse(chartPanel0.getIgnoreRepaint());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertTrue(chartPanel0.isEnforceFileExtensions());
      assertTrue(chartPanel0.getFillZoomRectangle());
      assertTrue(chartPanel0.isRangeZoomable());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertFalse(chartPanel0.getZoomAroundAnchor());
      assertFalse(chartPanel0.getRefreshBuffer());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01);
      assertFalse(chartPanel0.isMouseWheelEnabled());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertFalse(chartPanel0.isFocusTraversalPolicySet());
      assertTrue(chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01);
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01);
      assertTrue(chartPanel0.getFocusTraversalKeysEnabled());
      assertFalse(chartPanel0.isFocusTraversalPolicyProvider());
      assertFalse(chartPanel0.isFocusCycleRoot());
      assertTrue(chartPanel0.isDomainZoomable());
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point1.getY(), 0.01);
      assertEquals(0.0, point1.getX(), 0.01);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertNotNull(numberAxis0);
      
      numberAxis0.setMinorTickMarkOutsideLength((-216.18F));
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint(numberAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      AxisLocation axisLocation1 = combinedRangeXYPlot0.getDomainAxisLocation(10);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals((-216.18F), numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertNull(numberAxis0.getLabelURL());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(thermometerPlot0);
      
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, xYIntervalSeriesCollection0, combinedDomainXYPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.data.xy.XYIntervalSeriesCollection@ca
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("JzM>|ui9-1^5U");
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis0);
      
      TickUnits tickUnits0 = (TickUnits)NumberAxis.createIntegerTickUnits();
      assertEquals(31, tickUnits0.size());
      assertNotNull(tickUnits0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.setAnchorValue(0.0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.mapDatasetToDomainAxis((-2519), (-163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'index' >= 0.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      
      combinedDomainXYPlot0.configureDomainAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertNotNull(combinedDomainXYPlot0);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertNotNull(point2D_Float0);
      
      combinedDomainXYPlot0.setQuadrantOrigin(point2D_Float0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      
      int int0 = combinedDomainXYPlot0.getRangeAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(boolean0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      combinedDomainXYPlot0.setRangeGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      xYPlot0.setDomainMinorGridlinesVisible(true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertNotNull(combinedDomainXYPlot0);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis((String) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertNotNull(logarithmicAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(logarithmicAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot1);
      
      combinedDomainXYPlot1.setQuadrantOrigin(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      
      int int0 = combinedDomainXYPlot1.getRangeAxisCount();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertEquals(1, int0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(2.302585092994046, logarithmicAxis0.DEFAULT_AXIS_LABEL_PAINT, combinedDomainXYPlot1.DEFAULT_GRIDLINE_STROKE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.302585092994046, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertFalse(xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertFalse(xYPlot0.isSubplot());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertTrue(xYPlot0.isNotify());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertFalse(logarithmicAxis0.isInverted());
      assertTrue(logarithmicAxis0.isVisible());
      assertNull(logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2.302585092994046, valueMarker0.getValue(), 0.01);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2805.02188616112, "");
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      PeriodAxis periodAxis0 = new PeriodAxis("");
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAutoRange());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertFalse(periodAxis0.isInverted());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals("", periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange((ValueAxis) null);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, true);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis(0.0F, "");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis1.getLabel());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isVisible());
      assertNotNull(cyclicNumberAxis1);
      
      cyclicNumberAxis1.setPositiveArrowVisible(false);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      assertTrue(cyclicNumberAxis1.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis1.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis1.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis1.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis1.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01);
      assertEquals(0.0, cyclicNumberAxis1.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis1.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis1.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis1.getLabelURL());
      assertFalse(cyclicNumberAxis1.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis1.isTickMarksVisible());
      assertFalse(cyclicNumberAxis1.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01);
      assertTrue(cyclicNumberAxis1.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis1.getOffset(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01);
      assertTrue(cyclicNumberAxis1.isAutoRange());
      assertFalse(cyclicNumberAxis1.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis1.getLabel());
      assertFalse(cyclicNumberAxis1.isInverted());
      assertTrue(cyclicNumberAxis1.isVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(false);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(cyclicNumberAxis0, cyclicNumberAxis1);
      assertFalse(cyclicNumberAxis0.equals((Object)cyclicNumberAxis1));
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2805.02188616112, cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.canSelectByRegion();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(candlestickRenderer0);
      
      candlestickRenderer0.removeAnnotations();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      boolean boolean1 = combinedDomainXYPlot0.isDomainZoomable();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      RectangleEdge rectangleEdge1 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertNotNull(rectangleEdge1);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      boolean boolean2 = combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      candlestickRenderer0.setUseOutlinePaint(false);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRangeGridlinePaint(candlestickRenderer0.DEFAULT_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      CategoryMarker categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertNotNull(categoryMarker0);
      
      categoryMarker0.setLabel("");
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      
      combinedDomainXYPlot0.addRangeMarker(2, (Marker) categoryMarker0, layer0, true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      Layer layer1 = Layer.FOREGROUND;
      assertSame(layer1, layer0);
      assertEquals("Layer.FOREGROUND", layer1.toString());
      assertNotNull(layer1);
      
      Collection collection1 = combinedDomainXYPlot0.getRangeMarkers((-1492), layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(layer0, layer1);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection1);
      
      boolean boolean3 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.addRangeMarker(982, (Marker) categoryMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertSame(layer0, layer1);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertFalse(categoryMarker0.getDrawAsLine());
      assertEquals("", categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), candlestickRenderer0.getCandleWidth(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      
      Collection collection2 = combinedDomainXYPlot0.getDomainMarkers(85, layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertSame(layer0, layer1);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection2);
      
      int int1 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.mapDatasetToRangeAxis(400, (-1492));
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertNotNull(valueMarker0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(226, (Marker) valueMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0, valueMarker0.getValue(), 0.01);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getRendererCount());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertNotNull(categoryPlot0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedBarRenderer0);
      
      DateAxis dateAxis0 = new DateAxis();
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertNull(dateAxis0.getLabelToolTip());
      assertNull(dateAxis0.getLabel());
      assertFalse(dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      
      categoryPlot0.setRenderer(10, (CategoryItemRenderer) stackedBarRenderer0, true);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(11, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation(226);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(11, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = categoryPlot0.getRangeAxisLocation();
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(11, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      combinedDomainXYPlot0.setRangeAxisLocation(226, axisLocation0, true);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, categoryPlot0.getDomainAxisCount());
      assertFalse(categoryPlot0.isRangeCrosshairVisible());
      assertTrue(categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertFalse(categoryPlot0.isDomainPannable());
      assertFalse(categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertFalse(categoryPlot0.getDrawSharedDomainAxis());
      assertFalse(categoryPlot0.isDomainZoomable());
      assertTrue(categoryPlot0.isRangeGridlinesVisible());
      assertFalse(categoryPlot0.isRangeZeroBaselineVisible());
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertTrue(categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01);
      assertEquals(11, categoryPlot0.getRendererCount());
      assertFalse(categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertFalse(categoryPlot0.isDomainCrosshairVisible());
      assertFalse(categoryPlot0.isRangePannable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertTrue(categoryPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(stackedBarRenderer0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.2, BarRenderer.DEFAULT_ITEM_MARGIN, 0.01);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseSeriesVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertTrue(stackedBarRenderer0.getDefaultShadowsVisible());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(stackedBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01);
      assertFalse(stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01);
      assertFalse(stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01);
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertTrue(stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertTrue(stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertFalse(stackedBarRenderer0.isDrawBarOutline());
      assertTrue(stackedBarRenderer0.getAutoPopulateSeriesShape());
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      Color color1 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(color1, color0);
      assertEquals(255, color1.getGreen());
      assertEquals((-1), color1.getRGB());
      assertEquals(255, color1.getRed());
      assertEquals(255, color1.getBlue());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(color1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) stackedBarRenderer0.ZERO;
      XYPolygonAnnotation xYPolygonAnnotation0 = null;
      try {
        xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, categoryPlot0.DEFAULT_OUTLINE_STROKE, categoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'polygon' array must contain an even number of items.
         //
         verifyException("org.jfree.chart.annotations.XYPolygonAnnotation", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logAxis0.isInverted());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logAxis0.isAutoRange());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01);
      assertFalse(logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertFalse(logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertTrue(logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(logAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation((-910));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertNotNull(numberAxis0);
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(numberAxis0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertNotNull(combinedRangeCategoryPlot0);
      
      numberAxis0.setMinorTickMarksVisible(true);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isMinorTickMarksVisible());
      
      combinedRangeCategoryPlot0.setAnchorValue((-0.8294458854701872));
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals((-0.8294458854701872), combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeCategoryPlot0.getDomainAxisCount());
      assertFalse(combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isDomainPannable());
      assertFalse(combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
      assertFalse(combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertFalse(combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals((-0.8294458854701872), combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
      assertEquals(1, combinedRangeCategoryPlot0.getRangeAxisCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01);
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeCategoryPlot0.getRendererCount());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.mapDatasetToDomainAxis(982, 10);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(numberAxis0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertNotNull(combinedDomainXYPlot1);
      
      AxisLocation axisLocation1 = combinedDomainXYPlot0.getRangeAxisLocation(10);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      Range range0 = combinedDomainXYPlot1.getDataRange(numberAxis0);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(numberAxis0.isMinorTickMarksVisible());
      assertFalse(combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getDatasetCount());
      assertFalse(combinedDomainXYPlot1.isRangePannable());
      assertTrue(combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainPannable());
      assertFalse(combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01);
      assertTrue(combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot1.isDomainZoomable());
      assertTrue(combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertTrue(combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot1.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot1.isNotify());
      assertTrue(combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(1, combinedDomainXYPlot1.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot1.getRendererCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(2440);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      assertNotNull(logarithmicAxis0);
      
      logarithmicAxis0.setTickMarkInsideLength((-451.4175F));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      
      combinedDomainXYPlot0.setDomainAxis(2440, (ValueAxis) logarithmicAxis0, false);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairVisible();
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(boolean0);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      logarithmicAxis0.setTickLabelInsets(combinedDomainXYPlot0.DEFAULT_INSETS);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertEquals(1.0E-100, LogarithmicAxis.SMALL_LOG_VALUE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertEquals(2.302585092994046, LogarithmicAxis.LOG10_VALUE, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(2441, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(logarithmicAxis0.getExpTickLabelsFlag());
      assertFalse(logarithmicAxis0.getAllowNegativesFlag());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isInverted());
      assertFalse(logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.getAutoRangeIncludesZero());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals((-451.4175F), logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.getLog10TickLabelsFlag());
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01);
      assertTrue(logarithmicAxis0.getStrictValuesFlag());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertFalse(logarithmicAxis0.isPositiveArrowVisible());
      assertTrue(logarithmicAxis0.isAutoRange());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01);
      assertTrue(logarithmicAxis0.getAutoRangeStickyZero());
      assertFalse(logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01);
      assertTrue(logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
      assertFalse(logarithmicAxis0.isVerticalTickLabels());
      assertNull(logarithmicAxis0.getLabelURL());
      
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4, 500, byteArray0, 0, true, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertNotSame(axisLocation0, axisLocation1);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      
      combinedRangeXYPlot0.setRangeCrosshairPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isInverted());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(periodAxis0.getLabelToolTip());
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabel());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertNotNull(graphics2D0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNotNull(generalPath0);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals((-4), rectangle0.x);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      assertEquals((-4), rectangle0.y);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertNotNull(rectangle0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYErrorRenderer0);
      
      Stroke stroke0 = xYErrorRenderer0.getErrorStroke();
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertNull(stroke0);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals((-4), rectangle0.x);
      assertEquals(8, rectangle0.width);
      assertEquals(8, rectangle0.height);
      assertEquals((-4), rectangle0.y);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1, generalPath0.getWindingRule());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals((-16777216), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(0, systemColor0.getBlue());
      assertTrue(jFreeChart0.isNotify());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainMinorGridlinePaint();
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-8355712), color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-149.474489594898), (String) null);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint(cyclicNumberAxis0.DEFAULT_TICK_MARK_PAINT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(periodAxis0);
      
      Range range0 = combinedRangeXYPlot0.getDataRange(periodAxis0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(range0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      AxisLocation axisLocation1 = axisLocation0.getOpposite();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertNotNull(axisLocation1);
      
      AxisLocation axisLocation2 = AxisLocation.getOpposite(axisLocation1);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertNotSame(axisLocation2, axisLocation1);
      assertSame(axisLocation2, axisLocation0);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation2.equals((Object)axisLocation1));
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation2.toString());
      assertNotNull(axisLocation2);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation1, true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertSame(axisLocation0, axisLocation2);
      assertNotSame(axisLocation0, axisLocation1);
      assertNotSame(axisLocation1, axisLocation0);
      assertNotSame(axisLocation1, axisLocation2);
      assertFalse(axisLocation0.equals((Object)axisLocation1));
      assertFalse(axisLocation1.equals((Object)axisLocation0));
      assertFalse(axisLocation1.equals((Object)axisLocation2));
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertFalse(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation1.toString());
      
      cyclicNumberAxis0.setPositiveArrowVisible(true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      
      combinedRangeXYPlot0.setDomainCrosshairLockedOnData(true);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedRangeXYPlot0.setRangeCrosshairPaint(periodAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(periodAxis0.isPositiveArrowVisible());
      assertTrue(periodAxis0.isAutoRange());
      assertNull(periodAxis0.getLabel());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelURL());
      assertFalse(periodAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01);
      assertTrue(periodAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01);
      assertFalse(periodAxis0.isVerticalTickLabels());
      assertFalse(periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertFalse(periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(false);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      
      jFreeChart0.setBackgroundImageAlignment((-1860));
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-1860), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500, chartRenderingInfo0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-1860), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(bufferedImage0);
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-1860), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(graphics2D0);
      
      GeneralPath generalPath0 = new GeneralPath(combinedRangeXYPlot0.DEFAULT_LEGEND_ITEM_BOX);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Rectangle rectangle0 = generalPath0.getBounds();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertNotNull(rectangle0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertNotNull(xYErrorRenderer0);
      
      Stroke stroke0 = xYErrorRenderer0.getErrorStroke();
      assertTrue(xYErrorRenderer0.getBaseCreateEntities());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertTrue(xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawYError());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01);
      assertTrue(xYErrorRenderer0.getDrawOutlines());
      assertFalse(xYErrorRenderer0.getBaseLinesVisible());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYErrorRenderer0.getUseFillPaint());
      assertFalse(xYErrorRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertTrue(xYErrorRenderer0.getBaseShapesFilled());
      assertTrue(xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertTrue(xYErrorRenderer0.getDrawXError());
      assertFalse(xYErrorRenderer0.getUseOutlinePaint());
      assertNull(stroke0);
      
      chartRenderingInfo0.setChartArea(rectangle0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      
      SystemColor systemColor0 = SystemColor.windowText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      combinedRangeXYPlot0.drawHorizontalLine(graphics2D0, rectangle0, 2.0F, (Stroke) null, systemColor0);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(8, rectangle0.height);
      assertEquals(8, rectangle0.width);
      assertEquals((-4), rectangle0.x);
      assertEquals((-4), rectangle0.y);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(500, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(500, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(8.0, rectangle0.getWidth(), 0.01);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxY(), 0.01);
      assertEquals(4.0, rectangle0.getMaxX(), 0.01);
      assertEquals(8.0, rectangle0.getHeight(), 0.01);
      assertFalse(rectangle0.isEmpty());
      assertEquals((-4.0), rectangle0.getMinX(), 0.01);
      assertEquals((-4.0), rectangle0.getX(), 0.01);
      assertEquals((-4.0), rectangle0.getY(), 0.01);
      assertEquals((-4.0), rectangle0.getMinY(), 0.01);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01);
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getRed());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777216), systemColor0.getRGB());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals((-1860), jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertFalse(boolean0);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01);
      assertNull(cyclicNumberAxis0.getLabel());
      assertTrue(cyclicNumberAxis0.isAutoRange());
      assertTrue(cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAutoTickUnitSelection());
      assertFalse(cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertTrue(cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-149.474489594898), cyclicNumberAxis0.getOffset(), 0.01);
      assertFalse(cyclicNumberAxis0.isInverted());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertFalse(cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertTrue(cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(false);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(412);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.configureRangeAxes();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertNotNull(numberAxis3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis3D0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke(numberAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertFalse(numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isNegativeArrowVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01);
      assertTrue(numberAxis3D0.isAutoRange());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertTrue(numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01);
      assertFalse(numberAxis3D0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      
      // Undeclared exception!
      try { 
        combinedRangeXYPlot0.getDomainAxisForDataset(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 500 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateAxis0.setMaximumDate(date0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
      
      combinedRangeXYPlot0.setRangeZeroBaselineVisible(true);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      combinedRangeXYPlot0.clearDomainMarkers(95);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(95, axisLocation0);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals("", dateAxis0.getLabel());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertEquals(1.39240928132E12, dateAxis0.getUpperBound(), 0.01);
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 693;
      int int1 = 0;
      combinedRangeXYPlot0.mapDatasetToRangeAxis(693, 0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      
      Color color0 = (Color)MeterPlot.DEFAULT_DIAL_BACKGROUND_PAINT;
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setDomainZeroBaselinePaint(color0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getRed());
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainGridlinesVisible();
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertTrue(boolean0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      
      IntervalMarker intervalMarker0 = new IntervalMarker(1.0F, 0.0, combinedDomainXYPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[0];
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isNotify());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertNotNull(meterPlot0);
      
      combinedDomainXYPlot0.setParent(meterPlot0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10.0F, MeterPlot.DEFAULT_CIRCLE_SIZE, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(3.0F, MeterPlot.DEFAULT_BORDER_SIZE, 0.01F);
      assertEquals(270, MeterPlot.DEFAULT_METER_ANGLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(meterPlot0.isOutlineVisible());
      assertEquals("Units", meterPlot0.getUnits());
      assertFalse(meterPlot0.getDrawBorder());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01);
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(meterPlot0.getTickLabelsVisible());
      assertTrue(meterPlot0.isNotify());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertFalse(meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(0, xYItemRendererArray0.length);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = combinedDomainXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean2 = combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getFixedLegendItems();
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertNull(legendItemCollection0);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(8.0, XYLine3DRenderer.DEFAULT_Y_OFFSET, 0.01);
      assertEquals(12.0, XYLine3DRenderer.DEFAULT_X_OFFSET, 0.01);
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertFalse(xYLine3DRenderer0.getUseFillPaint());
      assertFalse(xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertTrue(xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertTrue(xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertFalse(xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(xYLine3DRenderer0.getBaseSeriesVisible());
      assertTrue(xYLine3DRenderer0.getDrawOutlines());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01);
      assertTrue(xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01);
      assertFalse(xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertTrue(xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertTrue(xYLine3DRenderer0.getBaseLinesVisible());
      assertTrue(xYLine3DRenderer0.getBaseShapesFilled());
      assertTrue(xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(xYLine3DRenderer0.getUseOutlinePaint());
      assertTrue(xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(xYLine3DRenderer0);
      
      Graphics2D graphics2D0 = null;
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertFalse(clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertTrue(clusteredXYBarRenderer0.getBaseCreateEntities());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01);
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertTrue(clusteredXYBarRenderer0.getShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertTrue(clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertTrue(clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertFalse(clusteredXYBarRenderer0.getUseYInterval());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertTrue(clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertFalse(clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01);
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01);
      assertNotNull(clusteredXYBarRenderer0);
      
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[6];
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(4676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertFalse(combinedDomainXYPlot0.isSubplot());
      assertFalse(combinedDomainXYPlot0.isRangePannable());
      assertTrue(combinedDomainXYPlot0.isNotify());
      assertFalse(combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertTrue(combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01);
      assertFalse(combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertTrue(combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getRendererCount());
      assertTrue(combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getDomainAxisCount());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(combinedDomainXYPlot0.canSelectByPoint());
      assertFalse(combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01);
      assertFalse(combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(combinedDomainXYPlot0.isDomainPannable());
      assertTrue(combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getDatasetCount());
      assertFalse(combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 55;
      // Undeclared exception!
      try { 
        combinedDomainXYPlot0.getRangeAxisForDataset(55);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 55 out of bounds.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DateAxis dateAxis0 = new DateAxis(")I.MP(3BB$X[", timeZone0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(")I.MP(3BB$X[", dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertNotNull(dateAxis0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.0F);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getURLGenerator(100, (-87), true);
      assertEquals(2, CandlestickRenderer.WIDTHMETHOD_INTERVALDATA);
      assertEquals(1, CandlestickRenderer.WIDTHMETHOD_SMALLEST);
      assertEquals(0, CandlestickRenderer.WIDTHMETHOD_AVERAGE);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01);
      assertTrue(candlestickRenderer0.getDrawVolume());
      assertTrue(candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertFalse(candlestickRenderer0.getUseOutlinePaint());
      assertTrue(candlestickRenderer0.getBaseSeriesVisible());
      assertTrue(candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertFalse(candlestickRenderer0.getBaseItemLabelsVisible());
      assertTrue(candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01);
      assertTrue(candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01);
      assertNull(xYURLGenerator0);
      
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(100, highLowItemLabelGenerator0, (XYURLGenerator) null);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertNotNull(standardXYItemRenderer0);
      
      XYPlot xYPlot0 = new XYPlot(timeTableXYDataset0, dateAxis0, dateAxis0, standardXYItemRenderer0);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(")I.MP(3BB$X[", dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainCrosshairStroke();
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertEquals(2.0, DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS, 0.01);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(3, StandardXYItemRenderer.SHAPES_AND_LINES);
      assertEquals(1, StandardXYItemRenderer.SHAPES);
      assertEquals(4, StandardXYItemRenderer.IMAGES);
      assertEquals(2, StandardXYItemRenderer.LINES);
      assertEquals(10, StandardXYItemRenderer.DISCONTINUOUS_LINES);
      assertEquals(8, StandardXYItemRenderer.DISCONTINUOUS);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01);
      assertEquals(")I.MP(3BB$X[", dateAxis0.getLabel());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertFalse(dateAxis0.isPositiveArrowVisible());
      assertTrue(dateAxis0.isAutoRange());
      assertFalse(dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isInverted());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01);
      assertFalse(standardXYItemRenderer0.getPlotDiscontinuous());
      assertFalse(standardXYItemRenderer0.getPlotLines());
      assertTrue(standardXYItemRenderer0.getBaseCreateEntities());
      assertTrue(standardXYItemRenderer0.getPlotImages());
      assertFalse(standardXYItemRenderer0.getBaseShapesVisible());
      assertTrue(standardXYItemRenderer0.getBaseShapesFilled());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertFalse(standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertTrue(standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertTrue(standardXYItemRenderer0.getBaseSeriesVisible());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertTrue(standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01);
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertFalse(xYPlot0.isDomainCrosshairVisible());
      assertFalse(xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getRendererCount());
      assertTrue(xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getDomainAxisCount());
      assertFalse(xYPlot0.isRangePannable());
      assertTrue(xYPlot0.isRangeGridlinesVisible());
      assertFalse(xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getDatasetCount());
      assertFalse(xYPlot0.isSubplot());
      assertFalse(xYPlot0.isDomainPannable());
      assertTrue(xYPlot0.isDomainGridlinesVisible());
      assertTrue(xYPlot0.isOutlineVisible());
      assertTrue(xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1, xYPlot0.getRangeAxisCount());
      assertFalse(xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(xYPlot0.isDomainZoomable());
      assertFalse(xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "JzM>|ui9-1^5U";
      NumberAxis numberAxis0 = new NumberAxis("JzM>|ui9-1^5U");
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertNotNull(numberAxis0);
      
      TickUnits tickUnits0 = (TickUnits)NumberAxis.createIntegerTickUnits();
      assertEquals(31, tickUnits0.size());
      assertNotNull(tickUnits0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(numberAxis0);
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation((-2133));
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(boolean0);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      combinedRangeXYPlot0.configureRangeAxes();
      assertTrue(ValueAxis.DEFAULT_AUTO_RANGE);
      assertFalse(ValueAxis.DEFAULT_INVERTED);
      assertEquals(0.05, ValueAxis.DEFAULT_LOWER_MARGIN, 0.01);
      assertEquals(0.05, ValueAxis.DEFAULT_UPPER_MARGIN, 0.01);
      assertEquals(500, ValueAxis.MAXIMUM_TICK_COUNT);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO);
      assertEquals(1.0E-8, ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE, 0.01);
      assertEquals(2.0F, Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH, 0.01F);
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
      assertTrue(Axis.DEFAULT_AXIS_VISIBLE);
      assertFalse(NumberAxis.DEFAULT_VERTICAL_TICK_LABELS);
      assertTrue(ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION);
      assertEquals(0.0F, Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH, 0.01F);
      assertTrue(NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO);
      assertTrue(Axis.DEFAULT_TICK_MARKS_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertFalse(XYPlot.DEFAULT_CROSSHAIR_VISIBLE);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertFalse(numberAxis0.isVerticalTickLabels());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01);
      assertTrue(numberAxis0.isAutoTickUnitSelection());
      assertFalse(numberAxis0.isNegativeArrowVisible());
      assertTrue(numberAxis0.getAutoRangeIncludesZero());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01);
      assertEquals("JzM>|ui9-1^5U", numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertFalse(numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01);
      assertTrue(numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01);
      assertTrue(numberAxis0.isAutoRange());
      assertEquals(1, combinedRangeXYPlot0.getDomainAxisCount());
      assertTrue(combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.isRangeZoomable());
      assertFalse(combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertFalse(combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getRendererCount());
      assertTrue(combinedRangeXYPlot0.isDomainZoomable());
      assertTrue(combinedRangeXYPlot0.canSelectByRegion());
      assertTrue(combinedRangeXYPlot0.isOutlineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertFalse(combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01);
      assertFalse(combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01);
      assertEquals(1, combinedRangeXYPlot0.getDatasetCount());
      assertEquals(1, combinedRangeXYPlot0.getRangeAxisCount());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertFalse(combinedRangeXYPlot0.isRangePannable());
      assertFalse(combinedRangeXYPlot0.isDomainPannable());
      assertFalse(combinedRangeXYPlot0.canSelectByPoint());
      assertFalse(combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertTrue(combinedRangeXYPlot0.isNotify());
      assertTrue(combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertNotNull(thermometerPlot0);
      
      Font font0 = thermometerPlot0.getValueFont();
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
      assertEquals(1, ThermometerPlot.UNITS_FAHRENHEIT);
      assertEquals(1, ThermometerPlot.WARNING);
      assertEquals(2, ThermometerPlot.CRITICAL);
      assertEquals(0, ThermometerPlot.NONE);
      assertEquals(0, ThermometerPlot.UNITS_NONE);
      assertEquals(10, Plot.MINIMUM_WIDTH_TO_DRAW);
      assertEquals(1, ThermometerPlot.RIGHT);
      assertEquals(3, ThermometerPlot.BULB);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
      assertEquals(3, ThermometerPlot.UNITS_KELVIN);
      assertEquals(1.0F, Plot.DEFAULT_BACKGROUND_ALPHA, 0.01F);
      assertEquals(0, ThermometerPlot.NORMAL);
      assertEquals(2, ThermometerPlot.UNITS_CELCIUS);
      assertEquals(2, ThermometerPlot.LEFT);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(thermometerPlot0.isNotify());
      assertTrue(thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertFalse(thermometerPlot0.getFollowDataInSubranges());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertFalse(thermometerPlot0.isDomainZoomable());
      assertFalse(thermometerPlot0.isSubplot());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertTrue(thermometerPlot0.isOutlineVisible());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertTrue(thermometerPlot0.isRangeZoomable());
      assertFalse(font0.isPlain());
      assertFalse(font0.isTransformed());
      assertEquals(16.0F, font0.getSize2D(), 0.01F);
      assertFalse(font0.hasLayoutAttributes());
      assertTrue(font0.isBold());
      assertEquals(16, font0.getSize());
      assertFalse(font0.hasUniformLineMetrics());
      assertFalse(font0.isItalic());
      assertEquals(1, font0.getStyle());
      assertEquals("Tahoma", font0.getName());
      assertNotNull(font0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '/';
      charArray0[2] = 'e';
      charArray0[3] = 'x';
      charArray0[4] = '!';
      int int0 = (-2074);
      AffineTransform affineTransform0 = new AffineTransform();
      assertEquals(0.0, affineTransform0.getTranslateX(), 0.01);
      assertEquals(0.0, affineTransform0.getTranslateY(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleX(), 0.01);
      assertEquals(1.0, affineTransform0.getDeterminant(), 0.01);
      assertEquals(0.0, affineTransform0.getShearY(), 0.01);
      assertEquals(0.0, affineTransform0.getShearX(), 0.01);
      assertEquals(1.0, affineTransform0.getScaleY(), 0.01);
      assertNotNull(affineTransform0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      assertNotNull(attributedCharacterIterator_Attribute0);
      
      FontRenderContext fontRenderContext0 = null;
      try {
        fontRenderContext0 = new FontRenderContext(affineTransform0, defaultPieDataset0, attributedCharacterIterator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // AA hint:org.jfree.data.general.DefaultPieDataset@1
         //
         verifyException("java.awt.font.FontRenderContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      xYPlot0.getDomainAxis();
      assertTrue(xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertTrue(xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      boolean boolean0 = true;
      xYPlot0.setDomainMinorGridlinesVisible(true);
      int int0 = 85;
      // Undeclared exception!
      try { 
        xYPlot0.getQuadrantPaint(85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (85) should be in the range 0 to 3.
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      combinedRangeCategoryPlot0.setAnchorValue((-1.5707963267948966));
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      int int0 = 982;
      combinedDomainXYPlot0.mapDatasetToDomainAxis(982, 10);
      Plot.resolveRangeAxisLocation(axisLocation0, plotOrientation0);
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(false);
      combinedDomainXYPlot0.getRangeTickBandPaint();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      combinedDomainXYPlot0.clearRangeMarkers();
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      ValueMarker valueMarker0 = new ValueMarker(10, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT, combinedDomainXYPlot0.DEFAULT_CROSSHAIR_STROKE);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      valueMarker0.setLabelAnchor(rectangleAnchor0);
      Layer layer0 = Layer.FOREGROUND;
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(226, (Marker) valueMarker0, layer0);
      assertFalse(boolean0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      DateAxis dateAxis0 = new DateAxis();
      combinedDomainXYPlot0.setRangeAxis(0, (ValueAxis) dateAxis0, false);
      categoryPlot0.setRenderer(10, (CategoryItemRenderer) stackedBarRenderer0, true);
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation(226);
      AxisLocation.getOpposite(axisLocation0);
      combinedDomainXYPlot0.setRangeAxisLocation(226, axisLocation0, false);
      combinedDomainXYPlot0.setDomainMinorGridlinePaint(stackedBarRenderer0.DEFAULT_OUTLINE_PAINT);
      Layer layer1 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getRangeMarkers(10, layer1);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      combinedDomainXYPlot0.addRangeMarker(226, (Marker) valueMarker0, layer0);
      combinedDomainXYPlot0.getDomainMarkers(0, layer0);
      combinedDomainXYPlot0.getDomainAxisCount();
      combinedDomainXYPlot0.mapDatasetToRangeAxis(0, 400);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1, combinedDomainXYPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      ValueAxis[] valueAxisArray0 = new ValueAxis[6];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(10, 1.0F, "7Cu)CWl");
      valueAxisArray0[0] = (ValueAxis) cyclicNumberAxis0;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      valueAxisArray0[1] = (ValueAxis) numberAxis3D0;
      NumberAxis numberAxis0 = new NumberAxis("7Cu)CWl");
      valueAxisArray0[2] = (ValueAxis) numberAxis0;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      combinedRangeXYPlot0.clone();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxisArray0[3] = valueAxis0;
      double double0 = 4027.0;
      numberAxis0.setPositiveArrowVisible(true);
      SystemColor systemColor0 = SystemColor.window;
      LookupPaintScale lookupPaintScale0 = null;
      try {
        lookupPaintScale0 = new LookupPaintScale(3, 0.0, systemColor0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires lowerBound < upperBound.
         //
         verifyException("org.jfree.chart.renderer.LookupPaintScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      double double0 = 0.0;
      double double1 = 1162.0;
      JMenu jMenu0 = new JMenu();
      Component component0 = jMenu0.getComponent();
      AbstractBorder.getInteriorRectangle(component0, (Border) null, 0, 0, 0, (-61));
      Hashtable<AttributedCharacterIterator.Attribute, DefaultTableXYDataset> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, DefaultTableXYDataset>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      JFreeChart jFreeChart0 = new JFreeChart("", font0, xYPlot0, false);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(dateAxis0);
      combinedDomainXYPlot0.removeChangeListener(combinedRangeXYPlot0);
      combinedDomainXYPlot0.getOrientation();
      combinedDomainXYPlot0.setRangeGridlinePaint(dateAxis0.DEFAULT_AXIS_LABEL_PAINT);
      Color color0 = Color.YELLOW;
      CategoryMarker categoryMarker0 = null;
      try {
        categoryMarker0 = new CategoryMarker(500, color0, combinedRangeXYPlot0.DEFAULT_OUTLINE_STROKE, dateAxis0.DEFAULT_TICK_MARK_PAINT, dateAxis0.DEFAULT_TICK_MARK_STROKE, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'alpha' value must be in the range 0.0f to 1.0f
         //
         verifyException("org.jfree.chart.plot.Marker", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1079, 10, chartRenderingInfo0);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Rectangle2D rectangle2D0 = plotRenderingInfo0.getDataArea();
      Rectangle2D rectangle2D1 = combinedDomainXYPlot0.DEFAULT_INSETS.createOutsetRectangle(rectangle2D0, true, false);
      PeriodAxis periodAxis0 = new PeriodAxis("PRINT");
      combinedDomainXYPlot0.drawDomainCrosshair(graphics2D0, rectangle2D1, (PlotOrientation) null, 1642.501079, periodAxis0, periodAxis0.DEFAULT_TICK_MARK_STROKE, periodAxis0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertTrue(combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) null);
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(412);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainXYPlot0.getDomainMarkers((-1492), layer0);
      combinedDomainXYPlot0.isDomainGridlinesVisible();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      candlestickRenderer0.removeAnnotations();
      combinedDomainXYPlot0.setRenderer((XYItemRenderer) candlestickRenderer0);
      combinedDomainXYPlot0.getRangeAxisEdge((-1492));
      combinedDomainXYPlot0.getDomainAxisCount();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      combinedDomainXYPlot0.isDomainZoomable();
      combinedDomainXYPlot0.getRangeAxisEdge();
      combinedDomainXYPlot0.getRangeCrosshairPaint();
      combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      combinedDomainXYPlot0.isDomainMinorGridlinesVisible();
      combinedDomainXYPlot0.setDomainGridlinesVisible(false);
      candlestickRenderer0.setUseOutlinePaint(false);
      combinedDomainXYPlot0.setRangeGridlinePaint(candlestickRenderer0.DEFAULT_PAINT);
      CategoryMarker categoryMarker0 = new CategoryMarker(candlestickRenderer0.ZERO);
      categoryMarker0.setLabel("");
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      categoryMarker0.setLabelAnchor(rectangleAnchor0);
      combinedDomainXYPlot0.addRangeMarker(2, (Marker) categoryMarker0, layer0, true);
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, true);
      Paint paint0 = combinedDomainXYPlot0.getRangeGridlinePaint();
      combinedDomainXYPlot0.getRangeGridlinePaint();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 50.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (-6245.73691);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1.0F;
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, combinedDomainXYPlot0.DEFAULT_GRIDLINE_STROKE, paint0, candlestickRenderer0.DEFAULT_PAINT);
      combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYPolygonAnnotation0);
      assertFalse(combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      combinedDomainXYPlot0.getAnnotations();
      double double0 = (-241.89662270641176);
      JFreeChart jFreeChart0 = new JFreeChart("", cyclicNumberAxis0.DEFAULT_TICK_LABEL_FONT, combinedDomainXYPlot0, false);
      PolarChartPanel polarChartPanel0 = null;
      try {
        polarChartPanel0 = new PolarChartPanel(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // plot is not a PolarPlot
         //
         verifyException("org.jfree.chart.PolarChartPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, false, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 680, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      int int0 = 2440;
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      logarithmicAxis0.setTickMarkInsideLength((-451.4175F));
      combinedDomainXYPlot0.setDomainAxis(2440, (ValueAxis) logarithmicAxis0, false);
      combinedDomainXYPlot0.isDomainCrosshairVisible();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(4, 500, byteArray0, 0, true, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        plotRenderingInfo0.getSubplotInfo(2154);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2154, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
